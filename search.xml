<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>react-native之run-android报错SDK location not found</title>
      <link href="/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/"/>
      <url>/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/</url>
      <content type="html"><![CDATA[<p>react-native 项目运行 Android 时报错,错误信息如下:<br><a id="more"></a></p><p><img src="/images/sdk-location-not-found.png" alt="SDK location not found"></p><p><strong>解决办法</strong></p><blockquote><p>1.cd到项目文件夹 android目录下<br>2.创建<code>local.properties</code> 文件(命令行创建方法: <code>touch local.properties</code>)<br>3.编辑<code>local.properties</code>文件,添加 <code>sdk.dir = /Users/用户名/Library/Android/sdk</code>(等号右侧为sdk 的路径)<br>4.完成!</p></blockquote>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> run-android </tag>
            
            <tag> SDK location not found </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native之原生跳转RN</title>
      <link href="/2018/10/30/react-native%E4%B9%8B%E5%8E%9F%E7%94%9F%E8%B7%B3%E8%BD%ACRN/"/>
      <url>/2018/10/30/react-native%E4%B9%8B%E5%8E%9F%E7%94%9F%E8%B7%B3%E8%BD%ACRN/</url>
      <content type="html"><![CDATA[<p><a href="https://zjqian.github.io/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/" target="_blank" rel="noopener">上一篇文章</a>记录了一下RN跳转原生的一些操作, 这次记录一下原生跳转 RN 页面的一些具体操作.<br><a id="more"></a></p><h2 id="1-创建-rn-页面并注册"><a href="#1-创建-rn-页面并注册" class="headerlink" title="1.创建 rn 页面并注册"></a>1.创建 rn 页面并注册</h2><p><strong>创建页面</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    View,</span><br><span class="line">    Text</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>,<span class="attr">backgroundColor</span>: <span class="string">'red'</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;&#123;<span class="attr">marginTop</span>: <span class="number">100</span>&#125;&#125;&gt; 这是 RN 页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在入口函数中注册组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'test'</span>,()=&gt;test);</span><br></pre></td></tr></table></figure><h2 id="2-在原生文件中加载"><a href="#2-在原生文件中加载" class="headerlink" title="2.在原生文件中加载"></a>2.在原生文件中加载</h2><p><strong>具体方案</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•建立一个NSObject类，让其实现RCTBridgeDelegate协议</span><br><span class="line">•这个类添加一个bridge属性作为一个全局的bridge，每一次新建RN页面使用这个bridge</span><br><span class="line">•类中实现预加载方法，在适当的时候可以预加载RCTRootView</span><br><span class="line">•类中实现RCTRootView的管理，将预加载的RCTRootView保存起来，在用到的时候直接提取</span><br></pre></td></tr></table></figure><p>新建一个继承自NSObject的类ReactRootViewManager:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//.h文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridge.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ReactRootViewManager</span> : <span class="title">NSObject</span>&lt;<span class="title">RCTBridgeDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局唯一的bridge */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) RCTBridge * bridge;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 获取单例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)manager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据viewName预加载bundle文件</span></span><br><span class="line"><span class="comment"> * param:</span></span><br><span class="line"><span class="comment"> *     viewName RN界面名称</span></span><br><span class="line"><span class="comment"> *     initialProperty: 初始化参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName;</span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName initialProperty:(<span class="built_in">NSDictionary</span> *)initialProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据viewName获取rootView</span></span><br><span class="line"><span class="comment"> * param:</span></span><br><span class="line"><span class="comment"> *     viewName RN界面名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * return: 返回匹配的rootView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (RCTRootView *)rootViewWithName:(<span class="built_in">NSString</span> *)viewName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure><p>具体实现:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ReactRootViewManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ReactRootViewManager</span> ()</span></span><br><span class="line"><span class="comment">// 以 viewName-rootView 的形式保存需预加载的RN界面</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, RCTRootView*&gt; * rootViewMap;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ReactRootViewManager</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">  _rootViewMap = <span class="literal">nil</span>;</span><br><span class="line">  [_bridge invalidate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)manager &#123;</span><br><span class="line">  <span class="keyword">static</span> ReactRootViewManager * _rootViewManager = <span class="literal">nil</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    _rootViewManager = [[ReactRootViewManager alloc] init];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> _rootViewManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">    _rootViewMap = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">0</span>];</span><br><span class="line">    _bridge = [[RCTBridge alloc] initWithDelegate:<span class="keyword">self</span> launchOptions:<span class="literal">nil</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName &#123;</span><br><span class="line">  [<span class="keyword">self</span> preLoadRootViewWithName:viewName initialProperty:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName initialProperty:(<span class="built_in">NSDictionary</span> *)initialProperty &#123;</span><br><span class="line">  <span class="keyword">if</span> (!viewName &amp;&amp; [_rootViewMap objectForKey:viewName]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 由bridge创建rootView</span></span><br><span class="line">  RCTRootView * rnView = [[RCTRootView alloc] initWithBridge:<span class="keyword">self</span>.bridge</span><br><span class="line">                                                  moduleName:viewName</span><br><span class="line">                                           initialProperties:initialProperty];</span><br><span class="line">  [_rootViewMap setObject:rnView forKey:viewName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (RCTRootView *)rootViewWithName:(<span class="built_in">NSString</span> *)viewName &#123;</span><br><span class="line">  <span class="keyword">if</span> (!viewName) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">self</span>.rootViewMap objectForKey:viewName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - RCTBridgeDelegate</span></span><br><span class="line">- (<span class="built_in">NSURL</span> *)sourceURLForBridge:(RCTBridge *)bridge &#123;</span><br><span class="line">  <span class="keyword">return</span> [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class="string">@"index"</span> fallbackResource:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="3-创建一个-controller-加载-RN-页面"><a href="#3-创建一个-controller-加载-RN-页面" class="headerlink" title="3.创建一个 controller 加载 RN 页面"></a>3.创建一个 controller 加载 RN 页面</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test为注册组件时定义的名称</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">self</span>.view=[[ReactRootViewManager manager] rootViewWithName:<span class="string">@"test"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-跳转操作"><a href="#4-跳转操作" class="headerlink" title="4.跳转操作"></a>4.跳转操作</h2><p><strong>预加载 RN 页面</strong></p><p>在原生的 controller 里预加载 RN 页面</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//RN页面预加载</span></span><br><span class="line">  <span class="built_in">NSString</span> *pageName = <span class="string">@"test"</span>;</span><br><span class="line">  [[ReactRootViewManager manager] preLoadRootViewWithName:pageName initialProperty:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p><strong>进行跳转</strong></p><p>在按钮的 click 事件里进行跳转:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)jumpToRN &#123;</span><br><span class="line">  </span><br><span class="line">  RNRootViewController *vc = [[RNRootViewController alloc] init];</span><br><span class="line">  [<span class="keyword">self</span>.navigationController pushViewController:vc animated:<span class="literal">YES</span>];</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="/images/gif2.gif" alt="原生跳转 RN"></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原生跳转RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native之RN跳转原生界面</title>
      <link href="/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/"/>
      <url>/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>混合开发中不可避免的会遇到原生页面与非原生页面之间的跳转, 这篇文章记录一下 RN 页面跳转原生页面的一些具体操作.<br><a id="more"></a></p><h2 id="1-配置原生文件"><a href="#1-配置原生文件" class="headerlink" title="1.配置原生文件"></a>1.配置原生文件</h2><p>在 <code>AppDelegate.h</code> 文件中声明一个属性 <code>nav</code>:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UINavigationController</span>         *           nav;</span><br></pre></td></tr></table></figure><p>在 <code>AppDelegate.m</code> 文件中配置导航栏:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line"><span class="built_in">UIViewController</span> *rootViewController = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">rootViewController.view = rootView;</span><br><span class="line">_nav = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:rootViewController];</span><br><span class="line"><span class="keyword">self</span>.window.rootViewController = _nav;</span><br><span class="line">[<span class="keyword">self</span>.window makeKeyAndVisible];</span><br></pre></td></tr></table></figure><h2 id="2-创建文件实现RCTBridgeModule协议"><a href="#2-创建文件实现RCTBridgeModule协议" class="headerlink" title="2.创建文件实现RCTBridgeModule协议"></a>2.创建文件实现<code>RCTBridgeModule</code>协议</h2><p>创建一个继承 NSObject 的类:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//.h文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RNToNative</span> : <span class="title">NSObject</span>&lt;<span class="title">RCTBridgeModule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.m文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"RNToNative.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridge.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NativeViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"AppDelegate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RNToNative</span></span></span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE(RNToNative);</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参</span></span><br><span class="line">RCT_EXPORT_METHOD(jumpToNative) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    </span><br><span class="line">    NativeViewController *vc = [[NativeViewController alloc] init];</span><br><span class="line">    AppDelegate *app = (AppDelegate *)<span class="built_in">UIApplication</span>.sharedApplication.delegate;</span><br><span class="line">    [app.nav pushViewController:vc animated:<span class="literal">YES</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参</span></span><br><span class="line">RCT_EXPORT_METHOD(jump2Native:(<span class="built_in">NSString</span> *)para) &#123;</span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    </span><br><span class="line">    NativeViewController *vc = [[NativeViewController alloc] init];</span><br><span class="line">    vc.para = para;</span><br><span class="line">    AppDelegate *app = (AppDelegate *)<span class="built_in">UIApplication</span>.sharedApplication.delegate;</span><br><span class="line">    [app.nav pushViewController:vc animated:<span class="literal">YES</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="3-在-RN-文件中配置"><a href="#3-在-RN-文件中配置" class="headerlink" title="3.在 RN 文件中配置"></a>3.在 RN 文件中配置</h2><p>直接贴源码好了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RNToNative为在原生文件中定义的类名称.</span></span><br><span class="line">jumpToNative()&#123;</span><br><span class="line">    <span class="keyword">var</span> jump = NativeModules.RNToNative;</span><br><span class="line">    InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//jumpToNative为在原生文件中定义的函数名称, 此为无参的函数</span></span><br><span class="line">        jump.jumpToNative();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">jumpToNativeWithPara() &#123;</span><br><span class="line">    <span class="keyword">var</span> jump = NativeModules.RNToNative;</span><br><span class="line">    InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//jump2Native为在原生文件中定义的函数名称, 此为带参的函数</span></span><br><span class="line">        jump.jump2Native(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>,<span class="attr">justifyContent</span>: <span class="string">'space-around'</span>&#125;&#125;&gt;</span><br><span class="line">            &lt;TouchableOpacity activeOpacity=&#123;<span class="number">0.5</span>&#125; onPress=&#123;<span class="keyword">this</span>.jumpToNative&#125; style=&#123;styles.btn&#125;&gt;</span><br><span class="line">                &lt;Text&gt;跳转原生(无参数)&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>TouchableOpacity&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TouchableOpacity activeOpacity=&#123;<span class="number">0.5</span>&#125; onPress=&#123;<span class="keyword">this</span>.jumpToNativeWithPara&#125; style=&#123;styles.btn&#125;&gt;</span><br><span class="line">                &lt;Text&gt;跳转原生(带参数)&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>TouchableOpacity&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="/images/gif.gif" alt="rn跳转原生"></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RN跳转原生界面 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一行命令统计iOS工程代码总行数</title>
      <link href="/2018/10/27/%E4%B8%80%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%BB%9F%E8%AE%A1iOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%80%BB%E8%A1%8C%E6%95%B0/"/>
      <url>/2018/10/27/%E4%B8%80%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%BB%9F%E8%AE%A1iOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%80%BB%E8%A1%8C%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>我们有时候想要统计一下我们的工程的总代码行数，来获取一些成就感或者作为别的用图，这里就介绍一些如何便捷地统计代码的行数，非常简单，方法如下：<br><a id="more"></a></p><ol><li>打开终端；</li><li>通过cd命令到达我们的工程文件，这里注意如果要避免统计引用的第三方库的代码量，我们就要进一步进到我们自己写的代码文件中去，一般是一个与工程文件同名的文件；</li><li>统计代码行数：</li></ol><p>如果想列出每个文件的行数，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs wc -l</span><br></pre></td></tr></table></figure><p>如果想直接列出总代码行数，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs grep -v <span class="string">"^$"</span>|wc -l</span><br></pre></td></tr></table></figure><p>这样就可以直接得出数量了，而且非常快，是不是很方便\~</p><p>这个统计过程会去掉空行，但注释是会计算在内的。</p>]]></content>
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MAC 终端上传代码到Github 或者 Gitlab</title>
      <link href="/2018/10/27/MAC%20%E7%BB%88%E7%AB%AF%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E5%88%B0Github%20%E6%88%96%E8%80%85%20Gitlab/"/>
      <url>/2018/10/27/MAC%20%E7%BB%88%E7%AB%AF%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E5%88%B0Github%20%E6%88%96%E8%80%85%20Gitlab/</url>
      <content type="html"><![CDATA[<p>1.创建远程仓库。</p><a id="more"></a><p><img src="/images/931143-20171206110906988-34407557.png" alt="创建远程仓库"></p><blockquote><p>Project name：项目名称</p><p>Project description (optional)：项目介绍</p><p>Visibility Level ：项目的访问权限</p></blockquote><p><img src="/images/931143-20171206111039097-1933937425.png" alt=""></p><p>2.创建完成后操作,终端cd 到你需要克隆到的文件夹目录下：</p><p>　</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　a. <span class="built_in">cd</span> &lt;你本地文件夹目录&gt;</span><br><span class="line"></span><br><span class="line">　　b.git <span class="built_in">clone</span> &lt;你自己刚创建的远程仓库目录&gt;</span><br><span class="line"></span><br><span class="line">　　c.把代码导入你<span class="built_in">clone</span> 下来的目录下</span><br></pre></td></tr></table></figure><p>3.提交代码　　　　</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. git add *</span><br><span class="line">　　b.git commit -m<span class="string">"&lt;注释&gt;"</span></span><br><span class="line">　　c.git push origin master是简单的代码上传过程。</span><br></pre></td></tr></table></figure><p>注：你自己也可以在终端创建远程仓库</p><h2 id="4-打开git命令窗口"><a href="#4-打开git命令窗口" class="headerlink" title="4.打开git命令窗口:"></a>4.打开git命令窗口:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程代码仓库的地址</span><br><span class="line"><span class="built_in">cd</span> （git <span class="built_in">clone</span>的文件夹路径）</span><br><span class="line"></span><br><span class="line">git pull origin master//更新 必须做的操作</span><br><span class="line"></span><br><span class="line">// git remote add origin 你刚才建立的项目连接</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'注释'</span></span><br><span class="line">git push -u origin master 将代码推送到gitlab端</span><br></pre></td></tr></table></figure><h2 id="5-创建并切换分支本地分支并推送到远程服务器；"><a href="#5-创建并切换分支本地分支并推送到远程服务器；" class="headerlink" title="5,创建并切换分支本地分支并推送到远程服务器；"></a>5,创建并切换分支本地分支并推送到远程服务器；</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git branch : 查看我们的git仓库有几个分支，而我们目前工作处于那个分支，前面有个*号的就为我们目前所处的分支。</span><br><span class="line"></span><br><span class="line">git branch -a : 查看远程分支。</span><br><span class="line"></span><br><span class="line">git branch name : 创建分支，而这个分支的指针就指向最新的commit对象，也就和HEAD指向同一对象。如git branch <span class="built_in">test</span>，表示创建本地<span class="built_in">test</span>分支。</span><br><span class="line">git checkout name : 切换到目的分支，我们默认的主分支为master。</span><br><span class="line">git checkout –b name：创建并切换分支。</span><br><span class="line">git push origin name： 将本地name分支推送到远程服务器。</span><br><span class="line"></span><br><span class="line">git status : 查看文件更改状态。在添加文件之前或之后，我们会用git status 查看有变化的文件（一般有变化的文件会以红色显示出来）。</span><br><span class="line"></span><br><span class="line">//设置显示隐藏文件夹</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles YES</span><br></pre></td></tr></table></figure><h2 id="6，遇到的问题，即解决办法："><a href="#6，遇到的问题，即解决办法：" class="headerlink" title="6，遇到的问题，即解决办法："></a>6，遇到的问题，即解决办法：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">! [rejected] master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">'git@github.com:******/Demo.git'</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br></pre></td></tr></table></figure><p> <1>. 使用强制push的方法：</1></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master -f</span><br></pre></td></tr></table></figure><p>这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。</p><p> <2>. push前先将远程repository修改pull下来</2></p><blockquote><p>$ git pull origin master</p><p>$ git push -u origin master</p></blockquote><p><3>. 若不想merge远程和本地修改，可以先创建新的分支：</3></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [name]</span><br></pre></td></tr></table></figure><p>然后push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin [name]</span><br></pre></td></tr></table></figure><p>方法一很暴力，但很实用，可以轻易本地文件同步到远程服务器端。<br>多人协作使用，慎用！</p><h2 id="7-tag-的简单使用"><a href="#7-tag-的简单使用" class="headerlink" title="7.tag 的简单使用"></a>7.tag 的简单使用</h2><ol><li>git push –tags 把本地的tag推送到远程</li><li>git fetch origin tag <tagname> 获取远程tag</tagname></li></ol>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native 之常用组件</title>
      <link href="/2018/10/27/React%20Native%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/10/27/React%20Native%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>本文收录了,React Native中常用的一些相关组件,</p><p>摘录的过程中,可能有所差错,不足之处还望指出.</p><p>希望大家可以互相学习,互帮互助!<br><a id="more"></a></p><hr><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p><a href="https://github.com/183959633/react-navigation-CustomerHeadView" target="_blank" rel="noopener">基于react-navigation组件的自定义 head 视图</a></p><p>react-native-carousel 轮播图</p><p>react-native-countdown 倒计时</p><p>react-native-device-info 设备信息</p><p>react-native-fileupload  文件上传</p><p>react-native-icons 图标</p><p>react-native-image-picker  图片选择器</p><p>react-native-keychain   iOSKeyChain管理</p><p>react-native-picker 滚轮选择器</p><p>react-native-picker-Android  安卓滚轮选择器</p><p>react-native-refreshable-listview 可刷新列表</p><p>react-native-scrollable-tab-view 可滚动标签</p><p>react-native-side-menu 侧边栏</p><p>react-native-swiper 轮播</p><p>react-native-video 视频播放</p><p>react-native-viewpager 分页浏览</p><p>react-native-scrollable-tab-view    可滑动的底部或上部导航栏框架</p><p>react-native-tab-navigator    底部或上部导航框架(不可滑动)</p><p>react-native-check-box         CheckBox</p><p>react-native-splash-screen   启动白屏问题</p><p>react-native-simple-router     简易路由跳转框架</p><p>react-native-storage             持久化存储</p><p>react-native-sortable-listview   分类ListView</p><p>react-native-htmlview               将 HTML 目录作为本地视图的控件，其风格可以定制</p><p>react-native-easy-toast         一款简单易用的 Toast 组件</p><hr><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>选项卡 <a href="https://github.com/exponentjs/react-native-tab-navigator" target="_blank" rel="noopener">https://github.com/exponentjs/react-native-tab-navigator</a></p><p>material组件库</p><p><a href="https://github.com/xinthink/react-native-material-kit" target="_blank" rel="noopener">https://github.com/xinthink/react-native-material-kit</a></p><p>base组件库</p><p><a href="http://nativebase.io/docs/v0.4.6/components#anatomy" target="_blank" rel="noopener">http://nativebase.io/docs/v0.4.6/components#anatomy</a></p><p><a href="https://github.com/GeekyAnts/NativeBase" target="_blank" rel="noopener">https://github.com/GeekyAnts/NativeBase</a></p><p>按钮 </p><p><a href="https://github.com/mastermoo/react-native-action-button" target="_blank" rel="noopener">https://github.com/mastermoo/react-native-action-button</a></p><p><a href="https://github.com/ide/react-native-button" target="_blank" rel="noopener">https://github.com/ide/react-native-button</a></p><p>表单验证</p><p><a href="https://github.com/gcanti/tcomb-form-native" target="_blank" rel="noopener">https://github.com/gcanti/tcomb-form-native</a></p><p><a href="https://github.com/FaridSafi/react-native-gifted-form" target="_blank" rel="noopener">https://github.com/FaridSafi/react-native-gifted-form</a></p><p><a href="https://github.com/bartonhammond/snowflake" target="_blank" rel="noopener">https://github.com/bartonhammond/snowflake</a></p><p>带动画效果的TextInput</p><p><a href="https://github.com/halilb/react-native-textinput-effects" target="_blank" rel="noopener">https://github.com/halilb/react-native-textinput-effects</a></p><p><a href="https://github.com/zbtang/React-Native-TextInputLayout" target="_blank" rel="noopener">https://github.com/zbtang/React-Native-TextInputLayout</a></p><p>聊天</p><p><a href="https://github.com/FaridSafi/react-native-gifted-chat" target="_blank" rel="noopener">https://github.com/FaridSafi/react-native-gifted-chat</a></p><p>蓝牙通信 </p><p><a href="http://blog.csdn.net/withings/article/details/71378562" target="_blank" rel="noopener">http://blog.csdn.net/withings/article/details/71378562</a></p><p>谷歌地图</p><p><a href="https://github.com/lelandrichardson/react-native-maps" target="_blank" rel="noopener">https://github.com/lelandrichardson/react-native-maps</a></p><p>高德地图 </p><p><a href="https://github.com/Eleme-IMF/dodo" target="_blank" rel="noopener">https://github.com/Eleme-IMF/dodo</a></p><p>时间轴,快递流程图效果</p><p><a href="https://github.com/24ark/react-native-step-indicator" target="_blank" rel="noopener">https://github.com/24ark/react-native-step-indicator</a></p><p><a href="https://github.com/thegamenicorus/react-native-timeline-listview" target="_blank" rel="noopener">https://github.com/thegamenicorus/react-native-timeline-listview</a></p><p>动画效果</p><p><a href="https://github.com/oblador/react-native-animatable" target="_blank" rel="noopener">https://github.com/oblador/react-native-animatable</a></p><p>加载Loading动画</p><p><a href="https://github.com/maxs15/react-native-spinkit" target="_blank" rel="noopener">https://github.com/maxs15/react-native-spinkit</a></p><p>抽屉效果</p><p><a href="https://github.com/root-two/react-native-drawer" target="_blank" rel="noopener">https://github.com/root-two/react-native-drawer</a></p><p><a href="https://github.com/react-native-fellowship/react-native-side-menu" target="_blank" rel="noopener">https://github.com/react-native-fellowship/react-native-side-menu</a></p><p>侧滑按钮</p><p><a href="https://github.com/dancormier/react-native-swipeout" target="_blank" rel="noopener">https://github.com/dancormier/react-native-swipeout</a></p><p><a href="https://github.com/jemise111/react-native-swipe-list-view" target="_blank" rel="noopener">https://github.com/jemise111/react-native-swipe-list-view</a></p><p>图表/制图</p><p><a href="https://github.com/tomauty/react-native-chart" target="_blank" rel="noopener">https://github.com/tomauty/react-native-chart</a></p><p>股票金融</p><p><a href="https://github.com/7kfpun/FinanceReactNative" target="_blank" rel="noopener">https://github.com/7kfpun/FinanceReactNative</a></p><p>时间组件</p><p><a href="https://github.com/xgfe/react-native-datepicker" target="_blank" rel="noopener">https://github.com/xgfe/react-native-datepicker</a></p><p>日历组件</p><p><a href="https://github.com/wix/react-native-calendars" target="_blank" rel="noopener">https://github.com/wix/react-native-calendars</a></p><p>电子签名</p><p><a href="https://github.com/jgrancher/react-native-sketch" target="_blank" rel="noopener">https://github.com/jgrancher/react-native-sketch</a></p><p>下拉放大(回弹效果)</p><p><a href="https://github.com/lelandrichardson/react-native-parallax-view" target="_blank" rel="noopener">https://github.com/lelandrichardson/react-native-parallax-view</a></p><p>日历组件</p><p><a href="https://github.com/cqm1994617/react-native-myCalendar" target="_blank" rel="noopener">https://github.com/cqm1994617/react-native-myCalendar</a></p><p><a href="https://github.com/vczero/react-native-calendar" target="_blank" rel="noopener">https://github.com/vczero/react-native-calendar</a></p><p>多语言</p><p><a href="https://github.com/joshswan/react-native-globalize" target="_blank" rel="noopener">https://github.com/joshswan/react-native-globalize</a></p><p>单选/多选组件</p><p><a href="https://github.com/hinet/react-native-checkboxlist" target="_blank" rel="noopener">https://github.com/hinet/react-native-checkboxlist</a></p><p>二维码</p><p><a href="https://github.com/ideacreation/react-native-barcodescanner" target="_blank" rel="noopener">https://github.com/ideacreation/react-native-barcodescanner</a></p><p>制作本地库</p><p><a href="https://github.com/frostney/react-native-create-library" target="_blank" rel="noopener">https://github.com/frostney/react-native-create-library</a></p><p>影音相关</p><p><a href="https://github.com/MisterAlex95/react-native-record-sound" target="_blank" rel="noopener">https://github.com/MisterAlex95/react-native-record-sound</a></p><p>提示消息(横条Bar)</p><p><a href="https://github.com/KBLNY/react-native-message-bar" target="_blank" rel="noopener">https://github.com/KBLNY/react-native-message-bar</a></p><p>iOS原生TableView</p><p><a href="https://github.com/aksonov/react-native-tableview" target="_blank" rel="noopener">https://github.com/aksonov/react-native-tableview</a></p><p>点击弹出视图</p><p><a href="https://github.com/jeanregisser/react-native-popover" target="_blank" rel="noopener">https://github.com/jeanregisser/react-native-popover</a></p><p><a href="https://github.com/instea/react-native-popup-menu" target="_blank" rel="noopener">https://github.com/instea/react-native-popup-menu</a></p><p>3D Touch</p><p><a href="https://github.com/madriska/react-native-quick-actions" target="_blank" rel="noopener">https://github.com/madriska/react-native-quick-actions</a></p><p>双平台兼容的ActionSheet</p><p><a href="https://github.com/beefe/react-native-actionsheet" target="_blank" rel="noopener">https://github.com/beefe/react-native-actionsheet</a></p><p>照片墙</p><p><a href="https://github.com/ldn0x7dc/react-native-gallery" target="_blank" rel="noopener">https://github.com/ldn0x7dc/react-native-gallery</a></p><p>键盘遮挡问题</p><p><a href="https://github.com/reactnativecn/react-native-inputscrollview" target="_blank" rel="noopener">https://github.com/reactnativecn/react-native-inputscrollview</a></p><p><a href="https://github.com/wix/react-native-keyboard-aware-scrollview" target="_blank" rel="noopener">https://github.com/wix/react-native-keyboard-aware-scrollview</a></p><p>本地存储</p><p><a href="https://github.com/sunnylqm/react-native-storage" target="_blank" rel="noopener">https://github.com/sunnylqm/react-native-storage</a></p><p>小星星评分(动画效果)</p><p><a href="https://github.com/djchie/react-native-star-rating" target="_blank" rel="noopener">https://github.com/djchie/react-native-star-rating</a></p><p>扫描二维码</p><p><a href="https://github.com/lazaronixon/react-native-qrcode-reader" target="_blank" rel="noopener">https://github.com/lazaronixon/react-native-qrcode-reader</a></p><p>通讯录</p><p><a href="https://github.com/rt2zz/react-native-contacts" target="_blank" rel="noopener">https://github.com/rt2zz/react-native-contacts</a></p><p>加密</p><p><a href="https://www.npmjs.com/package/crypto-js" target="_blank" rel="noopener">https://www.npmjs.com/package/crypto-js</a></p><p>清除缓存</p><p><a href="https://github.com/reactnativecn/react-native-http-cache" target="_blank" rel="noopener">https://github.com/reactnativecn/react-native-http-cache</a></p><p>ListView的优化</p><p><a href="https://github.com/sghiassy/react-native-sglistview" target="_blank" rel="noopener">https://github.com/sghiassy/react-native-sglistview</a></p><p>图片base64转码</p><p><a href="https://github.com/xfumihiro/react-native-image-to-base64" target="_blank" rel="noopener">https://github.com/xfumihiro/react-native-image-to-base64</a></p><p>白屏问题</p><p><a href="https://github.com/mehcode/rn-splash-screen" target="_blank" rel="noopener">https://github.com/mehcode/rn-splash-screen</a></p><p>Text跑马灯效果</p><p><a href="https://github.com/remobile/react-native-marquee-label" target="_blank" rel="noopener">https://github.com/remobile/react-native-marquee-label</a></p><p>WebView相关</p><p><a href="https://github.com/alinz/react-native-webview-bridge" target="_blank" rel="noopener">https://github.com/alinz/react-native-webview-bridge</a></p><p>判断横竖屏</p><p><a href="https://github.com/yamill/react-native-orientation" target="_blank" rel="noopener">https://github.com/yamill/react-native-orientation</a></p><p>PDF</p><p><a href="https://github.com/cnjon/react-native-pdf-view" target="_blank" rel="noopener">https://github.com/cnjon/react-native-pdf-view</a></p><p>获取设备信息</p><p><a href="https://github.com/rebeccahughes/react-native-device-info" target="_blank" rel="noopener">https://github.com/rebeccahughes/react-native-device-info</a></p><p>手势放大/缩小/移动</p><p><a href="https://github.com/kiddkai/react-native-gestures" target="_blank" rel="noopener">https://github.com/kiddkai/react-native-gestures</a></p><p><a href="https://github.com/johanneslumpe/react-native-gesture-recognizers" target="_blank" rel="noopener">https://github.com/johanneslumpe/react-native-gesture-recognizers</a></p><p>上拉-刷新/下拉-加载</p><p><a href="https://github.com/FaridSafi/react-native-gifted-listview" target="_blank" rel="noopener">https://github.com/FaridSafi/react-native-gifted-listview</a></p><p><a href="https://github.com/jsdf/react-native-refreshable-listview" target="_blank" rel="noopener">https://github.com/jsdf/react-native-refreshable-listview</a></p><p><a href="https://github.com/greatbsky/react-native-pull/wiki" target="_blank" rel="noopener">https://github.com/greatbsky/react-native-pull/wiki</a></p><p>下拉选</p><p><a href="https://github.com/alinz/react-native-dropdown" target="_blank" rel="noopener">https://github.com/alinz/react-native-dropdown</a></p><p>图片查看</p><p><a href="https://github.com/oblador/react-native-lightbox" target="_blank" rel="noopener">https://github.com/oblador/react-native-lightbox</a></p><p>照片选择</p><p><a href="https://github.com/marcshilling/react-native-image-picker" target="_blank" rel="noopener">https://github.com/marcshilling/react-native-image-picker</a></p><p><a href="https://github.com/ivpusic/react-native-image-crop-picker" target="_blank" rel="noopener">https://github.com/ivpusic/react-native-image-crop-picker</a></p><p>图片加载进度条</p><p><a href="https://github.com/oblador/react-native-image-progress" target="_blank" rel="noopener">https://github.com/oblador/react-native-image-progress</a></p><p>轮播视图</p><p><a href="https://github.com/race604/react-native-viewpager" target="_blank" rel="noopener">https://github.com/race604/react-native-viewpager</a></p><p><a href="https://github.com/FuYaoDe/react-native-app-intro" target="_blank" rel="noopener">https://github.com/FuYaoDe/react-native-app-intro</a></p><p><a href="https://github.com/appintheair/react-native-looped-carousel" target="_blank" rel="noopener">https://github.com/appintheair/react-native-looped-carousel</a></p><p><a href="https://github.com/leecade/react-native-swiper" target="_blank" rel="noopener">https://github.com/leecade/react-native-swiper</a></p><p>模态视图</p><p><a href="https://github.com/maxs15/react-native-modalbox" target="_blank" rel="noopener">https://github.com/maxs15/react-native-modalbox</a></p><p><a href="https://github.com/brentvatne/react-native-modal" target="_blank" rel="noopener">https://github.com/brentvatne/react-native-modal</a></p><p><a href="https://github.com/bodyflex/react-native-simple-modal" target="_blank" rel="noopener">https://github.com/bodyflex/react-native-simple-modal</a></p><p>毛玻璃效果</p><p><a href="https://github.com/react-native-fellowship/react-native-blur" target="_blank" rel="noopener">https://github.com/react-native-fellowship/react-native-blur</a></p><p>HTML 相关</p><p><a href="https://github.com/jsdf/react-native-htmlview" target="_blank" rel="noopener">https://github.com/jsdf/react-native-htmlview</a></p><p>推荐一款最近用到的日历组件(iOS android 两端通用)———–2018-01-25</p><p>日历组件</p><p><a href="https://github.com/xgfe/react-native-datepicker" target="_blank" rel="noopener">https://github.com/xgfe/react-native-datepicker</a></p><p>下拉选组件(ios,android 两端通用)———2018-01-25</p><p>Picker组件</p><p><a href="https://github.com/beefe/react-native-picker" target="_blank" rel="noopener">https://github.com/beefe/react-native-picker</a></p><p>短信倒计时（支持后台持续计时）   ——2018-04-09</p><p><a href="https://github.com/kkkelicheng/ReactNative-CountDownButton" target="_blank" rel="noopener">https://github.com/kkkelicheng/ReactNative-CountDownButton</a></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 常用组件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native 之react-native-swiper 动态赋值</title>
      <link href="/2018/10/27/React-native%20%E4%B9%8B%20react-native-swiper%20%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC/"/>
      <url>/2018/10/27/React-native%20%E4%B9%8B%20react-native-swiper%20%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>在实际开发中, 经常会遇到轮播图, 轮播图的数据通常情况下都是网络获取的. 这里简单的记录一下接口获取轮播图数据, 然后动态赋值给 swiper.<br><a id="more"></a></p><p>轮播图组件是通过 <code>react-native-swiper</code> 实现, 这里不再多说.</p><p>直接源码说明:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">        headerTitle: <span class="string">'首页'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            bannerData: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.fetchData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;ScrollView style=&#123;styles.container&#125;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;View style=&#123;styles.cycle_view&#125;&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">this</span>.state.bannerData == <span class="literal">null</span> ?</span><br><span class="line">                                &lt;View style=&#123;styles.slide&#125;/&gt;</span><br><span class="line">                                :</span><br><span class="line">                                &lt;Swiper</span><br><span class="line">                                    style=&#123;styles.swiper&#125;</span><br><span class="line">                                    height=&#123;width/<span class="number">720</span>*<span class="number">407</span>&#125;</span><br><span class="line">                                    loop=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                                    autoplay=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                                    autoplayTimeout=&#123;<span class="number">3</span>&#125;</span><br><span class="line">                                    horizontal=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                                    paginationStyle=&#123;&#123;<span class="attr">bottom</span>: <span class="number">10</span>&#125;&#125;</span><br><span class="line">                                    showsPagination=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">                                    &#123;<span class="keyword">this</span>.renderSwiper()&#125;</span><br><span class="line">                                &lt;<span class="regexp">/Swiper&gt;</span></span><br><span class="line"><span class="regexp">                        &#125;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>View&gt;</span><br><span class="line">                &lt;<span class="regexp">/ScrollView&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求数据</span></span><br><span class="line">    fetchData() &#123;</span><br><span class="line">        NetRequest.get(<span class="string">'你的接口 url地址'</span>,<span class="literal">null</span>,<span class="literal">null</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                bannerData: response[<span class="string">'data'</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, (error) =&gt; &#123;</span><br><span class="line">            Alert.alert(<span class="string">'error'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染</span></span><br><span class="line">    renderSwiper()&#123;</span><br><span class="line">        <span class="keyword">var</span> itemArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.state.bannerData.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="keyword">this</span>.state.bannerData[i];</span><br><span class="line">            itemArr.push(</span><br><span class="line">                &lt;TouchableOpacity key=&#123;i&#125;&gt;</span><br><span class="line">                    &lt;Image source=&#123;&#123;<span class="attr">uri</span>: data[<span class="string">'imagePath'</span>]&#125;&#125; style=&#123;styles.swiper_image&#125; /&gt;</span><br><span class="line">                &lt;<span class="regexp">/TouchableOpacity&gt;</span></span><br><span class="line"><span class="regexp">            );</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return itemArr;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    container: &#123;</span></span><br><span class="line"><span class="regexp">        backgroundColor: color.view_background,</span></span><br><span class="line"><span class="regexp">        flex: 1,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    cycle_view: &#123;</span></span><br><span class="line"><span class="regexp">      height: width/</span><span class="number">720</span>*<span class="number">407</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    slide: &#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        justifyContent: <span class="string">'center'</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span>,</span><br><span class="line">        backgroundColor: <span class="string">'#9DD6EB'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    swiper: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    swiper_image: &#123;</span><br><span class="line">        height: width/<span class="number">720</span>*<span class="number">407</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其实很简单, 就是通过请求的数据来动态的创建每一个 swiperItem !</p><p><strong>react-native 小白交流群: 860196537 或者    234713941</strong>  </p><p>enjoy it!</p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> react-native-swiper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native 之九宫格列表</title>
      <link href="/2018/10/27/react-native%20%E4%B9%8B%E4%B9%9D%E5%AE%AB%E6%A0%BC%E5%88%97%E8%A1%A8/"/>
      <url>/2018/10/27/react-native%20%E4%B9%8B%E4%B9%9D%E5%AE%AB%E6%A0%BC%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>就是类似这种的列表. 在 iOS 中有 <code>UICollectionView</code> 可以直接写这种类型的列表, 但在<code>React-native</code> 中直接就可以用 <code>FlatList</code> 完成, 也就是说这种类型的列表和普通的列表没什么区别, 只是在布局的时候要些许的差异. Let’s do it!<br><a id="more"></a></p><p>先上效果图:</p><p><img src="/images/20180817092853807.png" alt="九宫格列表"></p><h2 id="1-渲染一个列表"><a href="#1-渲染一个列表" class="headerlink" title="1.渲染一个列表"></a>1.渲染一个列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">       return (</span><br><span class="line">           <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">FlatList</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">renderItem</span>=<span class="string">&#123;this.renderItem&#125;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">keyExtractor</span>=<span class="string">&#123;(item,</span> <span class="attr">index</span>) =&gt;</span> index&#125;</span><br><span class="line">                   contentContainerStyle=&#123;styles.list_container&#125;</span><br><span class="line">               /&gt;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">       )</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><h2 id="2-给列表一个样式"><a href="#2-给列表一个样式" class="headerlink" title="2. 给列表一个样式"></a>2. 给列表一个样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">list_container</span>: &#123;</span><br><span class="line">        // 主轴方向</span><br><span class="line">        <span class="selector-tag">flexDirection</span><span class="selector-pseudo">:'row'</span>,</span><br><span class="line">        justifyContent: 'space-between',</span><br><span class="line">        // 一行显示不下,换一行</span><br><span class="line">        <span class="selector-tag">flexWrap</span><span class="selector-pseudo">:'wrap'</span>,</span><br><span class="line">        // 侧轴方向</span><br><span class="line">        alignItems:'center', // 必须设置,否则换行不起作用</span><br><span class="line">        <span class="selector-tag">paddingHorizontal</span>: 20,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><strong>这里注意:  <code>flexDirection</code>    <code>flexWrap</code>   <code>alignItems</code> 这三个属性是必须设置的.</strong> </p><p>其实写九宫格列表最重要的就是这一块.</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码:"></a>完整代码:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;width, height&#125; = Dimensions.get(<span class="string">'window'</span>)</span><br><span class="line"><span class="keyword">const</span> cols = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> vMargin = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> cellWH = (width<span class="number">-2</span>*vMargin<span class="number">-15</span>)/cols;</span><br><span class="line"><span class="keyword">const</span> hMargin = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AllRecommend</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            data: [],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.fetchData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;FlatList</span><br><span class="line">                    data=&#123;<span class="keyword">this</span>.state.data&#125;</span><br><span class="line">                    renderItem=&#123;<span class="keyword">this</span>.renderItem&#125;</span><br><span class="line">                    keyExtractor=&#123;(item, index) =&gt; index&#125;</span><br><span class="line">                    contentContainerStyle=&#123;styles.list_container&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    renderItem(&#123;item, index&#125;)  &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;TouchableOpacity activeOpacity=&#123;0.5&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;View style=&#123;styles.item&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Image source=&#123;&#123;uri: item['image']&#125;&#125; style=&#123;&#123;width: cellWH,height:cellWH, borderRadius: 5&#125;&#125;/</span>&gt;</span><br><span class="line">                    &lt;Text style=&#123;&#123;<span class="attr">marginTop</span>: <span class="number">5</span>, <span class="attr">textAlign</span>: <span class="string">'center'</span>&#125;&#125; numberOfLines=&#123;<span class="number">1</span>&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>View&gt;</span><br><span class="line">            &lt;<span class="regexp">/TouchableOpacity&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    fetchData() &#123;</span></span><br><span class="line"><span class="regexp">        NetRequest.get('https:/</span><span class="regexp">/api.douban.com/</span>v2/music/search?q=李志<span class="string">',null,null).then((response) =&gt; &#123;</span></span><br><span class="line"><span class="string">            this.setState(&#123;</span></span><br><span class="line"><span class="string">                data: response['</span>musics<span class="string">']</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;, (error) =&gt; &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="string">    container: &#123;</span></span><br><span class="line"><span class="string">        flex: 1,</span></span><br><span class="line"><span class="string">        backgroundColor: color.white,</span></span><br><span class="line"><span class="string">        paddingVertical: 15,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    list_container: &#123;</span></span><br><span class="line"><span class="string">        // 主轴方向</span></span><br><span class="line"><span class="string">        flexDirection:'</span>row<span class="string">',</span></span><br><span class="line"><span class="string">        justifyContent: '</span>space-between<span class="string">',</span></span><br><span class="line"><span class="string">        // 一行显示不下,换一行</span></span><br><span class="line"><span class="string">        flexWrap:'</span>wrap<span class="string">',</span></span><br><span class="line"><span class="string">        // 侧轴方向</span></span><br><span class="line"><span class="string">        alignItems:'</span>center<span class="string">', // 必须设置,否则换行不起作用</span></span><br><span class="line"><span class="string">        paddingHorizontal: 20,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    item: &#123;</span></span><br><span class="line"><span class="string">        width:cellWH,</span></span><br><span class="line"><span class="string">        marginTop:hMargin,</span></span><br><span class="line"><span class="string">        alignItems: '</span>center<span class="string">',</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>每一个 item 的大小尺寸可以根据自己的实际需求去设置.  </p><p>enjoy it!</p><p><strong>小白开发交流群: 860196537</strong></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 九宫格 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python爬取拉勾网数据(破解反爬虫机制)</title>
      <link href="/2018/10/27/Python%E7%88%AC%E5%8F%96%E6%8B%89%E5%8B%BE%E7%BD%91%E6%95%B0%E6%8D%AE(%E7%A0%B4%E8%A7%A3%E5%8F%8D%E7%88%AC%E8%99%AB%E6%9C%BA%E5%88%B6)/"/>
      <url>/2018/10/27/Python%E7%88%AC%E5%8F%96%E6%8B%89%E5%8B%BE%E7%BD%91%E6%95%B0%E6%8D%AE(%E7%A0%B4%E8%A7%A3%E5%8F%8D%E7%88%AC%E8%99%AB%E6%9C%BA%E5%88%B6)/</url>
      <content type="html"><![CDATA[<blockquote><p><strong>人生苦短, 我学 Python!</strong></p></blockquote><p>这篇文章主要记录一下我学习 Python 爬虫的一个小例子, 是爬取的拉勾网的数据.</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><p>配置 Python 环境什么的就不说了, 网上教程很多, 自行解决.</p><a id="more"></a><h2 id="2-扒源码"><a href="#2-扒源码" class="headerlink" title="2.扒源码"></a>2.扒源码</h2><p>先打开[拉勾网][1]的网页. 我们要爬取这部分的数据, 即搜索结果列表数据:</p><p><img src="/images/20181011225855279.png" alt="搜索接口列表"></p><p>检查源码, 打开如下图所示位置:</p><p><img src="/images/20181011230239245.png" alt="代码检查工具"></p><p>然后发现,这部分数据是我们所要爬取的数据:</p><p><img src="/images/20181011230435602.png" alt="将要爬取的数据"><br>ok! 开始撸代码!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">url=<span class="string">'https://www.lagou.com/jobs/positionAjax.json?city=%E4%B8%8A%E6%B5%B7&amp;needAddtionalResult=false'</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Mobile Safari/537.36'</span>,</span><br><span class="line"><span class="string">'Host'</span>:<span class="string">'www.lagou.com'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'https://www.lagou.com/jobs/list_python?city=%E4%B8%8A%E6%B5%B7&amp;cl=false&amp;fromSearch=true&amp;labelWords=&amp;suginput='</span>,</span><br><span class="line"><span class="string">'X-Anit-Forge-Code'</span>:<span class="string">'0'</span>,</span><br><span class="line"><span class="string">'X-Anit-Forge-Token'</span>:None,</span><br><span class="line"><span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></span><br><span class="line">&#125;</span><br><span class="line">form_data = &#123;</span><br><span class="line"><span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line"><span class="string">'pn'</span>: <span class="string">'1'</span>,</span><br><span class="line"><span class="string">'kd'</span>: <span class="string">'Python'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url,headers=headers,data=form_data)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>解释一下:</strong></p><p>headers的获取:<br><img src="/images/20181011231107603.png" alt="请求数据"></p><p>这样就能获取到列表数据了, 为了方便操作这些数据, 还可以转换成 json 格式, 这样就可以为所欲为了! </p><p>enjoy it!</p>]]></content>
      
      <categories>
          
          <category> python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pythton </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-navigation 使用详解</title>
      <link href="/2018/04/12/react-navigation-detail/"/>
      <url>/2018/04/12/react-navigation-detail/</url>
      <content type="html"><![CDATA[<p>转自: <a href="https://blog.csdn.net/u013718120/article/details/72357698" target="_blank" rel="noopener">这里</a></p><h2 id="一、开源库介绍"><a href="#一、开源库介绍" class="headerlink" title="一、开源库介绍"></a>一、开源库介绍</h2><p>今年1月份，新开源的<code>react-natvigation</code>库备受瞩目。在短短不到3个月的时间，<code>github</code>上星数已达4000+。Fb推荐使用库，并且在<code>React Native</code>当前最新版本0.44中将<code>Navigator</code>删除。<code>react-navigation</code>据称有原生般的性能体验效果。<a id="more"></a> 可能会成为未来<code>React Native</code>导航组件的主流军。本篇内容基于【 ^1.0.0-beta.9 】版本来介绍关于该库的使用和实战技巧。可以看到，虽然是beta版本，不过基本稳定，大家可放心在项目中使用。</p><p>该库包含三类组件：</p><blockquote><p>（1）StackNavigator：用来跳转页面和传递参数<br>（2）TabNavigator：类似底部导航栏，用来在同一屏幕下切换不同界面<br>（3）DrawerNavigator：侧滑菜单导航栏，用于轻松设置带抽屉导航的屏幕</p></blockquote><h2 id="二、react-navigation使用"><a href="#二、react-navigation使用" class="headerlink" title="二、react-navigation使用"></a>二、react-navigation使用</h2><p>具体内容大致分为如下：</p><blockquote><p>（1）react-navigation库属性介绍</p><p>（2）StackNavigator、TabNavigator实现界面间跳转，Tab切换</p><p>（3）StackNavigator界面间跳转、传值、取值</p><p>（4）DrawerNavigator实现抽屉导航菜单</p><p>（5）DrawerNavigator扩展功能</p></blockquote><h3>1、StackNavigator属性介绍</h3><p>navigationOptions：配置StackNavigator的一些属性。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">title：标题，如果设置了这个导航栏和标签栏的title就会变成一样的，不推荐使用  </span><br><span class="line">   header：可以设置一些导航的属性，如果隐藏顶部导航栏只要将这个属性设置为null  </span><br><span class="line">   headerTitle：设置导航栏标题，推荐  </span><br><span class="line">   headerBackTitle：设置跳转页面左侧返回箭头后面的文字，默认是上一个页面的标题。可以自定义，也可以设置为null  </span><br><span class="line">   headerTruncatedBackTitle：设置当上个页面标题不符合返回箭头后的文字时，默认改成&quot;返回&quot;  </span><br><span class="line">   headerRight：设置导航条右侧。可以是按钮或者其他视图控件  </span><br><span class="line">   headerLeft：设置导航条左侧。可以是按钮或者其他视图控件  </span><br><span class="line">   headerStyle：设置导航条的样式。背景色，宽高等  </span><br><span class="line">   headerTitleStyle：设置导航栏文字样式  </span><br><span class="line">   headerBackTitleStyle：设置导航栏‘返回’文字样式  </span><br><span class="line">   headerTintColor：设置导航栏颜色  </span><br><span class="line">   headerPressColorAndroid：安卓独有的设置颜色纹理，需要安卓版本大于5.0  </span><br><span class="line">   gesturesEnabled：是否支持滑动返回手势，iOS默认支持，安卓默认关闭  </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">screen：对应界面名称，需要填入import之后的页面  </span><br><span class="line"> </span><br><span class="line">mode：定义跳转风格  </span><br><span class="line"> </span><br><span class="line">  card：使用iOS和安卓默认的风格  </span><br><span class="line"> </span><br><span class="line">  modal：iOS独有的使屏幕从底部画出。类似iOS的present效果  </span><br><span class="line"> </span><br><span class="line">  headerMode：返回上级页面时动画效果  </span><br><span class="line"> </span><br><span class="line">  float：iOS默认的效果  </span><br><span class="line"> </span><br><span class="line">  screen：滑动过程中，整个页面都会返回  </span><br><span class="line"> </span><br><span class="line">  none：无动画  </span><br><span class="line"> </span><br><span class="line">  cardStyle：自定义设置跳转效果  </span><br><span class="line"> </span><br><span class="line">  transitionConfig： 自定义设置滑动返回的配置  </span><br><span class="line"> </span><br><span class="line">  onTransitionStart：当转换动画即将开始时被调用的功能  </span><br><span class="line"> </span><br><span class="line">  onTransitionEnd：当转换动画完成，将被调用的功能  </span><br><span class="line"> </span><br><span class="line">  path：路由中设置的路径的覆盖映射配置  </span><br><span class="line"> </span><br><span class="line"> initialRouteName：设置默认的页面组件，必须是上面已注册的页面组件  </span><br><span class="line"> </span><br><span class="line"> initialRouteParams：初始路由参数</span><br></pre></td></tr></table></figure><p><strong>注：大家可能对于<code>path</code>不太理解。<code>path</code>属性适用于其他<code>app</code>或浏览器使用url打开本<code>app</code>并进入指定页面。<code>path</code>属性用于声明一个界面路径，例如：<code>【/pages/Home】</code>。此时我们可以在手机浏览器中输入：<code>app名称://pages/Home</code>来启动该<code>App</code>，并进入<code>Home</code>界面。</strong></p><h3>2、TabNavigator属性介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">screen：和导航的功能是一样的，对应界面名称，可以在其他页面通过这个screen传值和跳转。  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">navigationOptions：配置TabNavigator的一些属性  </span><br><span class="line">  </span><br><span class="line">title：标题，会同时设置导航条和标签栏的title  </span><br><span class="line">  </span><br><span class="line">tabBarVisible：是否隐藏标签栏。默认不隐藏(true)  </span><br><span class="line">  </span><br><span class="line">tabBarIcon：设置标签栏的图标。需要给每个都设置  </span><br><span class="line">  </span><br><span class="line">tabBarLabel：设置标签栏的title。推荐  </span><br><span class="line">  </span><br><span class="line">导航栏配置  </span><br><span class="line">  </span><br><span class="line">tabBarPosition：设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：&apos;top&apos;，&apos;bottom&apos;）  </span><br><span class="line">  </span><br><span class="line">swipeEnabled：是否允许在标签之间进行滑动  </span><br><span class="line">  </span><br><span class="line">animationEnabled：是否在更改标签时显示动画  </span><br><span class="line">  </span><br><span class="line">lazy：是否根据需要懒惰呈现标签，而不是提前，意思是在app打开的时候将底部标签栏全部加载，默认false,推荐为true  </span><br><span class="line">  </span><br><span class="line">trueinitialRouteName： 设置默认的页面组件  </span><br><span class="line">  </span><br><span class="line">backBehavior：按 back 键是否跳转到第一个Tab(首页)， none 为不跳转  </span><br><span class="line">  </span><br><span class="line">tabBarOptions：配置标签栏的一些属性iOS属性  </span><br><span class="line">  </span><br><span class="line">activeTintColor：label和icon的前景色 活跃状态下  </span><br><span class="line">  </span><br><span class="line">activeBackgroundColor：label和icon的背景色 活跃状态下  </span><br><span class="line">  </span><br><span class="line">inactiveTintColor：label和icon的前景色 不活跃状态下  </span><br><span class="line">  </span><br><span class="line">inactiveBackgroundColor：label和icon的背景色 不活跃状态下  </span><br><span class="line">  </span><br><span class="line">showLabel：是否显示label，默认开启 style：tabbar的样式  </span><br><span class="line">  </span><br><span class="line">labelStyle：label的样式安卓属性  </span><br><span class="line">  </span><br><span class="line">activeTintColor：label和icon的前景色 活跃状态下  </span><br><span class="line">  </span><br><span class="line">inactiveTintColor：label和icon的前景色 不活跃状态下  </span><br><span class="line">  </span><br><span class="line">showIcon：是否显示图标，默认关闭  </span><br><span class="line">  </span><br><span class="line">showLabel：是否显示label，默认开启 style：tabbar的样式  </span><br><span class="line">  </span><br><span class="line">labelStyle：label的样式 upperCaseLabel：是否使标签大写，默认为true  </span><br><span class="line">  </span><br><span class="line">pressColor：material涟漪效果的颜色（安卓版本需要大于5.0）  </span><br><span class="line">  </span><br><span class="line">pressOpacity：按压标签的透明度变化（安卓版本需要小于5.0）  </span><br><span class="line">  </span><br><span class="line">scrollEnabled：是否启用可滚动选项卡 tabStyle：tab的样式  </span><br><span class="line">  </span><br><span class="line">indicatorStyle：标签指示器的样式对象（选项卡底部的行）。安卓底部会多出一条线，可以将height设置为0来暂时解决这个问题  </span><br><span class="line">  </span><br><span class="line">labelStyle：label的样式  </span><br><span class="line">  </span><br><span class="line">iconStyle：图标样式</span><br></pre></td></tr></table></figure><h3>3、DrawerNavigator属性介绍<h3><br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DrawerNavigatorConfig  </span><br><span class="line">  </span><br><span class="line">    drawerWidth - 抽屉的宽度  </span><br><span class="line">    drawerPosition - 选项是左或右。 默认为左侧位置  </span><br><span class="line">    contentComponent - 用于呈现抽屉内容的组件，例如导航项。 接收抽屉的导航。 默认为DrawerItems  </span><br><span class="line">    contentOptions - 配置抽屉内容  </span><br><span class="line">  </span><br><span class="line">    initialRouteName - 初始路由的routeName  </span><br><span class="line">    order - 定义抽屉项目顺序的routeNames数组。  </span><br><span class="line">    路径 - 提供routeName到路径配置的映射，它覆盖routeConfigs中设置的路径。  </span><br><span class="line">    backBehavior - 后退按钮是否会切换到初始路由？ 如果是，设置为initialRoute，否则为none。 默认为initialRoute行为  </span><br><span class="line">  </span><br><span class="line">   DrawerItems的contentOptions属性  </span><br><span class="line">  </span><br><span class="line">    activeTintColor - 活动标签的标签和图标颜色  </span><br><span class="line">    activeBackgroundColor - 活动标签的背景颜色  </span><br><span class="line">    inactiveTintColor - 非活动标签的标签和图标颜色  </span><br><span class="line">    inactiveBackgroundColor - 非活动标签的背景颜色  </span><br><span class="line">    内容部分的样式样式对象  </span><br><span class="line">    labelStyle - 当您的标签是字符串时，要覆盖内容部分中的文本样式的样式对象</span><br></pre></td></tr></table></figure><br><br><br>从上述中大致了解了<code>react-navigation</code>三种组件的一些基本属性，所以到我们甩起袖子撸代码见证下奇迹了。<br><br><h3>4、使用StackNavigator + TabNavigator实现Tab界面切换、界面间导航</h3><p>API定义：StackNavigator(RouteConfigs, StackNavigatorConfig)、TabNavigator(RouteConfigs, TabNavigatorConfig)</p><blockquote><p>（1）集成 react-navigation：在终端执行 【 npm install react-navigation –save 】</p><p>（2）界面中导入必要组件：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;StackNavigator,TabNavigator,TabBarBottom&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;  </span><br><span class="line"><span class="keyword">import</span> HomeScreen <span class="keyword">from</span> <span class="string">'./pages/HomePage'</span>;  </span><br><span class="line"><span class="keyword">import</span> MineScreen <span class="keyword">from</span> <span class="string">'./pages/MinePage'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>（3）定义TabNavigator：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Tab = TabNavigator(  </span><br><span class="line">  &#123;  </span><br><span class="line">    Home:&#123;  </span><br><span class="line">      screen:HomeScreen,  </span><br><span class="line">      navigationOptions:<span class="function">(<span class="params">&#123;navigation&#125;</span>) =&gt;</span> (&#123;  </span><br><span class="line">        tabBarLabel:<span class="string">'首页'</span>,  </span><br><span class="line">        tabBarIcon:<span class="function">(<span class="params">&#123;focused,tintColor&#125;</span>) =&gt;</span> (  </span><br><span class="line">          &lt;TabBarItem  </span><br><span class="line">            tintColor=&#123;tintColor&#125;  </span><br><span class="line">            focused=&#123;focused&#125;  </span><br><span class="line">            normalImage=&#123;<span class="built_in">require</span>(<span class="string">'./imgs/nav_fav@2x.png'</span>)&#125;  </span><br><span class="line">            selectedImage=&#123;<span class="built_in">require</span>(<span class="string">'./imgs/nav_fav_actived@3x.png'</span>)&#125;  </span><br><span class="line">          /&gt;  </span><br><span class="line">        )  </span><br><span class="line">      &#125;),  </span><br><span class="line">    &#125;,  </span><br><span class="line">  </span><br><span class="line">    Mine:&#123;  </span><br><span class="line">          screen:MineScreen,  </span><br><span class="line">          navigationOptions:<span class="function">(<span class="params">&#123;navigation&#125;</span>) =&gt;</span> (&#123;  </span><br><span class="line">          tabBarLabel:<span class="string">'我'</span>,  </span><br><span class="line">          tabBarIcon:<span class="function">(<span class="params">&#123;focused,tintColor&#125;</span>) =&gt;</span> (  </span><br><span class="line">            &lt;TabBarItem  </span><br><span class="line">             tintColor=&#123;tintColor&#125;  </span><br><span class="line">              focused=&#123;focused&#125;  </span><br><span class="line">              normalImage=&#123;<span class="built_in">require</span>(<span class="string">'./imgs/tab_me_nor@3x.png'</span>)&#125;  </span><br><span class="line">              selectedImage=&#123;<span class="built_in">require</span>(<span class="string">'./imgs/tab_me_selected@2x.png'</span>)&#125;  </span><br><span class="line">            /&gt;  </span><br><span class="line">          )  </span><br><span class="line">        &#125;),  </span><br><span class="line">      &#125;,  </span><br><span class="line">    &#125;,  </span><br><span class="line">  </span><br><span class="line">    &#123;  </span><br><span class="line">      tabBarComponent:TabBarBottom,  </span><br><span class="line">      tabBarPosition:<span class="string">'bottom'</span>,  </span><br><span class="line">      swipeEnabled:<span class="literal">false</span>,  </span><br><span class="line">      animationEnabled:<span class="literal">false</span>,  </span><br><span class="line">      lazy:<span class="literal">true</span>,  </span><br><span class="line">      tabBarOptions:&#123;  </span><br><span class="line">        activeTintColor:<span class="string">'#06c1ae'</span>,  </span><br><span class="line">        inactiveTintColor:<span class="string">'#979797'</span>,  </span><br><span class="line">        style:&#123;<span class="attr">backgroundColor</span>:<span class="string">'#ffffff'</span>,&#125;,  </span><br><span class="line">        labelStyle: &#123;  </span><br><span class="line">              fontSize: <span class="number">20</span>, <span class="comment">// 文字大小  </span></span><br><span class="line">          &#125;,  </span><br><span class="line">      &#125;  </span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>TabBarItem为封装的组件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React,&#123;Component&#125; from 'react';  </span><br><span class="line">import &#123;Image&#125; from 'react-native';  </span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> <span class="selector-tag">class</span> <span class="selector-tag">TabBarItem</span> <span class="selector-tag">extends</span> <span class="selector-tag">Component</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    render() &#123;  </span><br><span class="line">        <span class="selector-tag">return</span>(  </span><br><span class="line">            &lt;Image source=&#123; this.props.focused ? this.props.selectedImage : this.props.normalImage &#125;  </span><br><span class="line">                style=&#123; &#123; tintColor:this.props.tintColor,width:25,height:25 &#125; &#125;  </span><br><span class="line">            /&gt;  </span><br><span class="line">        )  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们定义了一个名称为【Tab】的TabNavigator的导航组件。在组件中，分为两层参数：</p><blockquote><p>（1）第一层参数定义了要切换的界面，即【首页】、【我】两个界面组件，通过screen属性指定。并且通过navigationOptions属性设置相关属性参数。</p><p>（2）设置导航栏的属性参数。</p></blockquote><p><code>TabNavigator</code>定义好之后，需要用<code>StackNavigator</code>，顾名思义，<code>StackNavigator</code>就是以栈的方式来存放整个界面的，而<code>TabNavigator</code>是作为一个界面内不同子界面之间切换。所以还需要我们定义<code>StackNavigator</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Navigator = StackNavigator(  </span><br><span class="line">    </span><br><span class="line">  &#123;  </span><br><span class="line">    Tab:&#123;<span class="attr">screen</span>:Tab&#125;,  </span><br><span class="line">    Product:&#123;<span class="attr">screen</span>:ProductScreen&#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  &#123;  </span><br><span class="line">    navigationOptions:&#123;  </span><br><span class="line">      headerBackTitle:<span class="literal">null</span>,  </span><br><span class="line">      headerTintColor:<span class="string">'#333333'</span>,  </span><br><span class="line">      showIcon:<span class="literal">true</span>,  </span><br><span class="line">     swipeEnabled:<span class="literal">false</span>,  </span><br><span class="line">     animationEnabled:<span class="literal">false</span>,  </span><br><span class="line">    &#125;,  </span><br><span class="line">  </span><br><span class="line">    mode:<span class="string">'card'</span>,  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>看起来和<code>TabNavigator</code>很相似，同样是指定了两个参数：</p><blockquote><p>（1）指定要跳转的界面组件。同样是screen属性标识界面组件，不多赘述。</p><p>（2）定义跳转属性参数，即顶部导航栏的一些参数设置和跳转方式。</p></blockquote><p>可以看到，我们将<code>Tab</code>作为一个界面设置到了<code>StackNavigator</code>。这样就可以实现Tab导航和界面间跳转的效果了。</p><p>最后就是在<code>render</code>中引用<code>StackNavigator</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">  render() &#123;  </span><br><span class="line">        <span class="keyword">return</span> (  </span><br><span class="line">          &lt;Navigator /&gt;  </span><br><span class="line">        );  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StackNavigator</code>还提供了<code>onNavigationStateChange</code>回调方法，用来监听导航状态的改变。具体不再赘述。实现了界面跳转和切换，那么就该来增加下界面之间的感情了，来看看如何实现界面之间的传值和取值。</p><h3>5、界面间跳转、传值、取值</h3><p>在界面组件注入到<code>StackNavigator</code>中时，界面组件就被赋予了<code>navigation</code>属性，即在界面组件中可以通过<code>【this.props.navigation】</code>获取并进行一些操作。</p><p><code>navigation</code>属性中提供了很多的函数简化界面间操作，简单列举几点：</p><blockquote><p>（1）通过navigate函数实现界面之间跳转：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Mine'</span>);</span><br></pre></td></tr></table></figure><p>参数为我们在<code>StackNavigator</code>注册界面组件时的名称。同样也可以从当前页面返回到上一页：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回上一页  </span></span><br><span class="line"><span class="keyword">this</span>.props.navigation.goBack();</span><br></pre></td></tr></table></figure><blockquote><p>（2）跳转时传值：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Mine'</span>,&#123;<span class="attr">info</span>:<span class="string">'传值过去'</span>&#125;);</span><br></pre></td></tr></table></figure><p>第一个参数同样为要跳转的界面组件名称，第二个参数为要传递的参数，info可以理解为key，后面即传递的参数。</p><blockquote><p>（3）获取值：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">this</span>.props.navigation.state.params.info&#125;</span><br></pre></td></tr></table></figure><p>通过<code>state.params</code>来获取传来的参数，后面为<code>key</code>值。此处为<code>info</code>。</p><p>以上实现完成，我们就可以愉快的玩耍啦~~ 什么？忽然发现在Android上的效果和IOS效果不一样。老板要界面一致哇~ 怎么办？那就需要我们进行简单的适配了。</p><h2 id="三、DrawerNavigator实现抽屉导航"><a href="#三、DrawerNavigator实现抽屉导航" class="headerlink" title="三、DrawerNavigator实现抽屉导航"></a>三、DrawerNavigator实现抽屉导航</h2><h3>1、导航实现</h3><p>API定义：DrawerNavigator（RouteConfigs，DrawerNavigatorConfig）</p><blockquote><p>（1）界面中定义DrawerNavigator：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;StackNavigator,TabNavigator,DrawerNavigator&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;  </span><br><span class="line"><span class="keyword">import</span> HomeScreen <span class="keyword">from</span> <span class="string">'./pages/HomePage'</span>;  </span><br><span class="line"><span class="keyword">import</span> MineScreen <span class="keyword">from</span> <span class="string">'./pages/MinePage'</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">  render() &#123;  </span><br><span class="line">        <span class="keyword">return</span> (  </span><br><span class="line">          &lt;Navigator /&gt;  </span><br><span class="line">        );  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> Navigator = DrawerNavigator(&#123;  </span><br><span class="line">  </span><br><span class="line">    Home:&#123;<span class="attr">screen</span>:HomeScreen&#125;,  </span><br><span class="line">    Mine:&#123;<span class="attr">screen</span>:MineScreen&#125;,  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;  </span><br><span class="line">  </span><br><span class="line">    container: &#123;  </span><br><span class="line">        flex: <span class="number">1</span>,  </span><br><span class="line">    &#125;,  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">AppRegistry.registerComponent(<span class="string">'Demo'</span>, () =&gt; Demo);</span><br></pre></td></tr></table></figure><p>定义方式和<code>StackNavigator</code>基本类似，不再赘述。</p><blockquote><p>（2）HomeScreen界面和MineScreen界面：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> navigationOptions = &#123;  </span><br><span class="line">        drawerLabel: <span class="string">'首页'</span>,  </span><br><span class="line">        drawerIcon:<span class="function">(<span class="params">&#123;tintColor&#125;</span>) =&gt;</span> (  </span><br><span class="line">            &lt;Image  </span><br><span class="line">                source=&#123;<span class="built_in">require</span>(<span class="string">'./../imgs/ic_happy.png'</span>)&#125;  </span><br><span class="line">                style=&#123;[styles.icon, &#123;<span class="attr">tintColor</span>: tintColor&#125;]&#125;/&gt;  </span><br><span class="line">        ),  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    render() &#123;  </span><br><span class="line">        <span class="keyword">return</span>(  </span><br><span class="line">            &lt;View style=&#123;&#123;<span class="attr">flex</span>:<span class="number">1</span>&#125;&#125;&gt;  </span><br><span class="line">                &lt;Text onPress=&#123;<span class="keyword">this</span>._skip.bind(<span class="keyword">this</span>)&#125;&gt;点击跳转&lt;<span class="regexp">/Text&gt;  </span></span><br><span class="line"><span class="regexp">            &lt;/</span>View&gt;  </span><br><span class="line">        );  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    _skip() &#123;  </span><br><span class="line">        <span class="keyword">this</span>.props.navigation.navigate(<span class="string">"Mine"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MinePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> navigationOptions = &#123;  </span><br><span class="line">        drawerLabel:<span class="string">'我'</span>,  </span><br><span class="line">         drawerIcon: <span class="function">(<span class="params">&#123; tintColor &#125;</span>) =&gt;</span> (  </span><br><span class="line">            &lt;Image  </span><br><span class="line">                source=&#123;<span class="built_in">require</span>(<span class="string">'./../imgs/ic_h.png'</span>)&#125;  </span><br><span class="line">                style=&#123;[styles.icon, &#123;<span class="attr">tintColor</span>: tintColor&#125;]&#125;  </span><br><span class="line">            /&gt;  </span><br><span class="line">        ),  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    render() &#123;  </span><br><span class="line">        <span class="keyword">return</span>(  </span><br><span class="line">            &lt;View style=&#123;&#123;<span class="attr">flex</span>:<span class="number">1</span>&#125;&#125;&gt;  </span><br><span class="line">                &lt;Text onPress=&#123;<span class="keyword">this</span>._skip.bind(<span class="keyword">this</span>)&#125;&gt;返回上一界面&lt;<span class="regexp">/Text&gt;  </span></span><br><span class="line"><span class="regexp">            &lt;/</span>View&gt;  </span><br><span class="line">        );  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 跳转  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    _skip() &#123;  </span><br><span class="line">        <span class="keyword">this</span>.props.navigation.goBack();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，实现了界面之间的跳转。</p><h3>2、扩展功能</h3><blockquote><p>（1）默认DrawerView不可滚动。要实现可滚动视图，必须使用contentComponent自定义容器，如下所示：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  drawerWidth：<span class="number">200</span>，  </span><br><span class="line">  抽屉位置：“对”  </span><br><span class="line">  contentComponent：props =&gt; &lt;ScrollView&gt; &lt;DrawerItems &#123;... props&#125; /&gt; &lt;/ ScrollView&gt;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（2）可以覆盖导航使用的默认组件，使用DrawerItems自定义导航组件：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;DrawerItems&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> CustomDrawerContentComponent = <span class="function">(<span class="params">props</span>) =&gt;</span> (  </span><br><span class="line">  &lt;View style = &#123;style.container&#125;&gt;  </span><br><span class="line">    &lt;DrawerItems &#123;... props&#125; /&gt;  </span><br><span class="line">  &lt;<span class="regexp">/View&gt;    </span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><blockquote><p>（3）嵌套抽屉导航</p></blockquote><p>如果您嵌套<code>DrawerNavigation</code>，抽屉将显示在父导航下方。</p><h2 id="五、效果图"><a href="#五、效果图" class="headerlink" title="五、效果图"></a>五、效果图</h2><p>抽屉导航：<br><img src="https://img-blog.csdn.net/20170517171824737" alt="这里写图片描述"></p><p>以上就是我们实战中常用的属性和技巧。具体的操作还需要大家在实践过程中测试体会。</p><p><a href="https://github.com/songxiaoliang/ComicApp" target="_blank" rel="noopener">源码参考</a></p></h3></h3>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> navigator </tag>
            
            <tag> tabNavigator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Method Swizzling 和 AOP 实践</title>
      <link href="/2018/04/03/Method_Swizzling_and_AOP/"/>
      <url>/2018/04/03/Method_Swizzling_and_AOP/</url>
      <content type="html"><![CDATA[<p>转自: <a href="http://tech.glowing.com/cn/method-swizzling-aop/" target="_blank" rel="noopener">http://tech.glowing.com/cn/method-swizzling-aop/</a></p><p>上一篇介绍了 <a href="http://tech.glowing.com/cn/objective-c-runtime/" target="_blank" rel="noopener">Objective-C Messaging</a>。利用 <code>Objective-C</code> 的 <code>Runtime</code> 特性，我们可以给语言做扩展，帮助解决项目开发中的一些设计和技术问题。这一篇，我们来探索一些利用 <code>Objective-C Runtime</code> 的黑色技巧。这些技巧中最具争议的或许就是 <code>Method Swizzling</code> 。</p><a id="more"></a><p>介绍一个技巧，最好的方式就是提出具体的需求，然后用它跟其他的解决方法做比较。</p><p>所以，先来看看我们的需求：对 <code>App</code> 的用户行为进行追踪和分析。简单说，就是当用户看到某个 <code>View</code> 或者点击某个 <code>Button</code> 的时候，就把这个事件记下来。</p><h2 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h2><p>最直接粗暴的方式就是在每个 <code>viewDidAppear</code> 里添加记录事件的代码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyViewController</span> ()</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Custom code </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging</span></span><br><span class="line">    [Logging logWithEventName:@“my view did appear”];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)myButtonClicked:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Custom code </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging</span></span><br><span class="line">    [Logging logWithEventName:@“my button clicked”];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的缺点也很明显：它破坏了代码的干净整洁。因为 <code>Logging</code> 的代码本身并不属于 <code>ViewController</code> 里的主要逻辑。随着项目扩大、代码量增加，你的 <code>ViewController</code> 里会到处散布着 <code>Logging</code> 的代码。这时，要找到一段事件记录的代码会变得困难，也很容易忘记添加事件记录的代码。</p><p>你可能会想到用继承或类别，在重写的方法里添加事件记录的代码。代码可以是长的这个样子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> ()</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)myViewDidAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Custom code </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging</span></span><br><span class="line">    [Logging logWithEventName:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)myButtonClicked:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Custom code </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging</span></span><br><span class="line">    <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithFormat:@“my button <span class="keyword">in</span> %@ is clicked”, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])];</span><br><span class="line">    [Logging logWithEventName:name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Logging</code>的代码都很相似，通过继承或类别重写相关方法是可以把它从主要逻辑中剥离出来。但同时也带来新的问题：</p><ol><li>你需要继承 <code>UIViewController</code>, <code>UITableViewController</code>,<br><code>UICollectionViewController</code> 所有这些 <code>ViewController</code> ，或者给他们添加类别；</li><li>每个 <code>ViewController</code> 里的 <code>ButtonClick</code> 方法命名不可能都一样；</li><li>你不能控制别人如何去实例化你的子类；</li><li>对于类别，你没办法调用到原来的方法实现。大多时候，我们重写一个方法只是为了添加一些代码，而不是完全取代它。</li><li>如果有两个类别都实现了相同的方法，运行时没法保证哪一个类别的方法会给调用。</li></ol><h2 id="Method-Swizzling"><a href="#Method-Swizzling" class="headerlink" title="Method Swizzling"></a>Method Swizzling</h2><p><code>Method Swizzling</code> 利用 <code>Runtime</code> 特性把一个方法的实现与另一个方法的实现进行替换。</p><p>上一篇文章 有讲到每个类里都有一个 <code>Dispatch Table</code> ，将方法的名字（<code>SEL</code>）跟方法的实现（<code>IMP</code>，指向 C 函数的指针）一一对应。<code>Swizzle</code> 一个方法其实就是在程序运行时在 <code>Dispatch Table</code> 里做点改动，让这个方法的名字（<code>SEL</code>）对应到另个<code>IMP</code> 。</p><p>首先定义一个类别，添加将要 Swizzled 的方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Logging</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)swizzled_viewDidAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// call original implementation</span></span><br><span class="line">    [<span class="keyword">self</span> swizzled_viewDidAppear:animated];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging</span></span><br><span class="line">    [Logging logWithEventName:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码看起来可能有点奇怪，像递归不是么。当然不会是递归，因为在 <code>runtime</code> 的时候，函数实现已经被交换了。调用 <code>viewDidAppear:</code> 会调用你实现的 <code>swizzled_viewDidAppear:</code>，而在 <code>swizzled_viewDidAppear:</code> 里调用 <code>swizzled_viewDidAppear:</code> 实际上调用的是原来的 <code>viewDidAppear:</code> 。</p><p>接下来实现 <code>swizzle</code> 的方法 ：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Logging</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> swizzleMethod(Class <span class="keyword">class</span>, SEL originalSelector, SEL swizzledSelector)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// the method might not exist in the class, but in its superclass</span></span><br><span class="line">    Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>, originalSelector);</span><br><span class="line">    Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>, swizzledSelector);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// class_addMethod will fail if original method already exists</span></span><br><span class="line">    <span class="built_in">BOOL</span> didAddMethod = class_addMethod(<span class="keyword">class</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the method doesn’t exist and we just added one</span></span><br><span class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">        class_replaceMethod(<span class="keyword">class</span>, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里唯一可能需要解释的是 <code>class_addMethod</code> 。要先尝试添加原 <code>selector</code> 是为了做一层保护，因为如果这个类没有实现 <code>originalSelector</code> ，但其父类实现了，那 <code>class_getInstanceMethod</code> 会返回父类的方法。这样 <code>method_exchangeImplementations</code> 替换的是父类的那个方法，这当然不是你想要的。所以我们先尝试添加 <code>orginalSelector</code> ，如果已经存在，再用 <code>method_exchangeImplementations</code> 把原方法的实现跟新的方法实现给交换掉。</p><p>最后，我们只需要确保在程序启动的时候调用 <code>swizzleMethod</code> 方法。比如，我们可以在之前 <code>UIViewController</code> 的 <code>Logging</code> 类别里添加 <code>+load:</code> 方法，然后在 <code>+load:</code> 里把 <code>viewDidAppear</code> 给替换掉：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Logging</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    swizzleMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(viewDidAppear:), <span class="keyword">@selector</span>(swizzled_viewDidAppear:));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下，类别里的方法会重写掉主类里相同命名的方法。如果有两个类别实现了相同命名的方法，只有一个方法会被调用。但 <code>+load:</code> 是个特例，当一个类被读到内存的时候， <code>runtime</code> 会给这个类及它的每一个类别都发送一个 <code>+load:</code> 消息。</p><p>其实，这里还可以更简化点：直接用新的 <code>IMP</code>取代原 <code>IMP</code> ，而不是替换。只需要有全局的函数指针指向原<code>IMP</code> 就可以。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (gOriginalViewDidAppear)(<span class="keyword">id</span>, SEL, <span class="built_in">BOOL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> newViewDidAppear(<span class="built_in">UIViewController</span> *<span class="keyword">self</span>, SEL _cmd, <span class="built_in">BOOL</span> animated)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// call original implementation</span></span><br><span class="line">    gOriginalViewDidAppear(<span class="keyword">self</span>, _cmd, animated);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging</span></span><br><span class="line">    [Logging logWithEventName:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    Method originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewDidAppear:));</span><br><span class="line">    gOriginalViewDidAppear = (<span class="keyword">void</span> *)method_getImplementation(originalMethod);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!class_addMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewDidAppear:), (IMP) newViewDidAppear, method_getTypeEncoding(originalMethod))) &#123;</span><br><span class="line">        method_setImplementation(originalMethod, (IMP) newViewDidAppear);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>Method Swizzling</code> ，我们成功把逻辑代码跟处理事件记录的代码解耦。当然除了 <code>Logging</code> ，还有很多类似的事务，如 <code>Authentication</code> 和 <code>Caching</code>。这些事务琐碎，跟主要业务逻辑无关，在很多地方都有，又很难抽象出来单独的模块。这种程序设计问题，业界也给了他们一个名字 - <a href="https://en.wikipedia.org/wiki/Cross-cutting_concern" target="_blank" rel="noopener">Cross Cutting Concerns</a>。</p><p>而像上面例子用 <code>Method Swizzling</code> 动态给指定的方法添加代码，以解决 <code>Cross Cutting Concerns</code> 的编程方式叫：<a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" target="_blank" rel="noopener">Aspect Oriented Programming</a></p><h2 id="Aspect-Oriented-Programming-（面向切面编程）"><a href="#Aspect-Oriented-Programming-（面向切面编程）" class="headerlink" title="Aspect Oriented Programming （面向切面编程）"></a>Aspect Oriented Programming （面向切面编程）</h2><p>Wikipedia 里对 AOP 是这么介绍的:</p><blockquote><p>An aspect can alter the behavior of the base code by applying advice<br>(additional behavior) at various join points (points in a program)<br>specified in a quantification or query called a pointcut (that detects<br>whether a given join point matches).</p></blockquote><p>在 <code>Objective-C</code> 的世界里，这句话意思就是利用 <code>Runtime</code> 特性给指定的方法添加自定义代码。有很多方式可以实现 <code>AOP</code> ，<code>Method Swizzling</code> 就是其中之一。而且幸运的是，目前已经有一些第三方库可以让你不需要了解 <code>Runtime</code> ，就能直接开始使用 <code>AOP</code> 。</p><p><code>Aspects</code> 就是一个不错的 <code>AOP</code> 库，封装了 <code>Runtime</code> ， <code>Method Swizzling</code> 这些黑色技巧，只提供两个简单的API：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">id</span>&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span><br><span class="line">                          withOptions:(AspectOptions)options</span><br><span class="line">                       usingBlock:(<span class="keyword">id</span>)block</span><br><span class="line">                            error:(<span class="built_in">NSError</span> **)error;</span><br><span class="line">- (<span class="keyword">id</span>&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span><br><span class="line">                      withOptions:(AspectOptions)options</span><br><span class="line">                       usingBlock:(<span class="keyword">id</span>)block</span><br><span class="line">                            error:(<span class="built_in">NSError</span> **)error;</span><br></pre></td></tr></table></figure><p>使用 <code>Aspects</code> 提供的<code>API</code>，我们之前的例子会进化成这个样子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Logging</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">UIViewController</span> aspect_hookSelector:<span class="keyword">@selector</span>(viewDidAppear:)</span><br><span class="line">                              withOptions:AspectPositionAfter</span><br><span class="line">                               usingBlock:^(<span class="keyword">id</span>&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *className = <span class="built_in">NSStringFromClass</span>([[aspectInfo instance] <span class="keyword">class</span>]);</span><br><span class="line">        [Logging logWithEventName:className];</span><br><span class="line">                               &#125; error:<span class="literal">NULL</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以用同样的方式在任何你感兴趣的方法里添加自定义代码，比如 <code>IBAction</code> 的方法里。更好的方式，你提供一个 <code>Logging</code> 的配置文件作为唯一处理事件记录的地方：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span> (<span class="title">Logging</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)setupLogging</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *config = @&#123;</span><br><span class="line">        <span class="string">@"MainViewController"</span>: @&#123;</span><br><span class="line">            GLLoggingPageImpression: <span class="string">@"page imp - main page"</span>,</span><br><span class="line">            GLLoggingTrackedEvents: @[</span><br><span class="line">                @&#123;</span><br><span class="line">                    GLLoggingEventName: <span class="string">@"button one clicked"</span>,</span><br><span class="line">                    GLLoggingEventSelectorName: <span class="string">@"buttonOneClicked:"</span>,</span><br><span class="line">                    GLLoggingEventHandlerBlock: ^(<span class="keyword">id</span>&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                        [Logging logWithEventName:<span class="string">@"button one clicked"</span>];</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                @&#123;</span><br><span class="line">                    GLLoggingEventName: <span class="string">@"button two clicked"</span>,</span><br><span class="line">                    GLLoggingEventSelectorName: <span class="string">@"buttonTwoClicked:"</span>,</span><br><span class="line">                    GLLoggingEventHandlerBlock: ^(<span class="keyword">id</span>&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                        [Logging logWithEventName:<span class="string">@"button two clicked"</span>];</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">           ],</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">@"DetailViewController"</span>: @&#123;</span><br><span class="line">            GLLoggingPageImpression: <span class="string">@"page imp - detail page"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    [AppDelegate setupWithConfiguration:config];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)setupWithConfiguration:(<span class="built_in">NSDictionary</span> *)configs</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Hook Page Impression</span></span><br><span class="line">    [<span class="built_in">UIViewController</span> aspect_hookSelector:<span class="keyword">@selector</span>(viewDidAppear:)</span><br><span class="line">                              withOptions:AspectPositionAfter</span><br><span class="line">                               usingBlock:^(<span class="keyword">id</span>&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                                       <span class="built_in">NSString</span> *className = <span class="built_in">NSStringFromClass</span>([[aspectInfo instance] <span class="keyword">class</span>]);</span><br><span class="line">                                    [Logging logWithEventName:className];</span><br><span class="line">                               &#125; error:<span class="literal">NULL</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hook Events</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *className <span class="keyword">in</span> configs) &#123;</span><br><span class="line">        Class clazz = <span class="built_in">NSClassFromString</span>(className);</span><br><span class="line">        <span class="built_in">NSDictionary</span> *config = configs[className];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config[GLLoggingTrackedEvents]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *event <span class="keyword">in</span> config[GLLoggingTrackedEvents]) &#123;</span><br><span class="line">                SEL selekor = <span class="built_in">NSSelectorFromString</span>(event[GLLoggingEventSelectorName]);</span><br><span class="line">                AspectHandlerBlock block = event[GLLoggingEventHandlerBlock];</span><br><span class="line"></span><br><span class="line">                [clazz aspect_hookSelector:selekor</span><br><span class="line">                               withOptions:AspectPositionAfter</span><br><span class="line">                                usingBlock:^(<span class="keyword">id</span>&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                                    block(aspectInfo);</span><br><span class="line">                                &#125; error:<span class="literal">NULL</span>];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>-application:didFinishLaunchingWithOptions:</code> 里调用 <code>setupLogging：</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupLogging];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>利用 <code>objective-C Runtime</code> 特性和 <code>Aspect Oriented Programming</code> ，我们可以把琐碎事务的逻辑从主逻辑中分离出来，作为单独的模块。它是对面向对象编程模式的一个补充。<code>Logging</code> 是个经典的应用，这里做个抛砖引玉，发挥想象力，可以做出其他有趣的应用。</p><p>使用 <code>Aspects</code> 完整的例子可以从这里获得：<a href="https://github.com/okcomp/AspectsDemo" target="_blank" rel="noopener">AspectsDemo</a>。</p>]]></content>
      
      <categories>
          
          <category> iOS 之 runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> runtime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 之简易涂鸦板</title>
      <link href="/2017/06/08/android-canvas/"/>
      <url>/2017/06/08/android-canvas/</url>
      <content type="html"><![CDATA[<p>没有废话，简单粗暴。</p><h2 id="1-创建一个自定义-view"><a href="#1-创建一个自定义-view" class="headerlink" title="1.创建一个自定义 view"></a><strong>1.创建一个自定义 view</strong></h2><p>创建一个 DrawView，继承自 android.view.View 类。在这个类中，先定义所需的属性，再创建一个构造方法。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> view_width = <span class="number">0</span>;<span class="comment">//画板宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> view_height = <span class="number">0</span>;<span class="comment">//画板高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> preX;<span class="comment">//起始点的 x 坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> preY;<span class="comment">//起始点的 y 坐标</span></span><br><span class="line">    <span class="keyword">private</span> Path path;<span class="comment">//路径</span></span><br><span class="line">    <span class="keyword">public</span> Paint paint = <span class="keyword">null</span>;<span class="comment">//画笔</span></span><br><span class="line">    Bitmap cacheBitmap = <span class="keyword">null</span>;<span class="comment">//定义一个内存中的图片，该图片作为缓冲区</span></span><br><span class="line">    Canvas cacheCanvas = <span class="keyword">null</span>;<span class="comment">//定义 cacheBitmap 上的 Canvas 对象</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*构造方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawView</span><span class="params">(Context context, AttributeSet set)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,set);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*重写 onDraw 方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-修改-xml-文件"><a href="#2-修改-xml-文件" class="headerlink" title="2.修改 xml 文件"></a><strong>2.修改 xml 文件</strong></h2><p>修改 activity_main.xml 文件，并将自定义的 DrawView 添加到布局管理器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.test.DrawView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/drawView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-DrawView-的构造方法"><a href="#3-DrawView-的构造方法" class="headerlink" title="3.DrawView 的构造方法"></a><strong>3.DrawView 的构造方法</strong></h2><p>在 DrawView 的构造方法中，首先获取屏幕的宽度和高度，并创建一个与该 view 相同大小的缓存区，然后创建一个新的画面，并实例化一个路径，再讲内存中的位图绘制到 cacheCanvas 中，最后实例化一个画笔，并设置画笔的相关属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取屏幕宽度</span></span><br><span class="line">        view_width = context.getResources().getDisplayMetrics().widthPixels;</span><br><span class="line">        <span class="comment">//获取屏幕高度</span></span><br><span class="line">        view_height = context.getResources().getDisplayMetrics().heightPixels;</span><br><span class="line"></span><br><span class="line">        cacheBitmap = Bitmap.createBitmap(view_width,view_height, Bitmap.Config.ARGB_8888);</span><br><span class="line">        <span class="comment">//创建一个新的画布</span></span><br><span class="line">        cacheCanvas = <span class="keyword">new</span> Canvas();</span><br><span class="line">        path = <span class="keyword">new</span> Path();</span><br><span class="line">        <span class="comment">//在 cacheCanvas 上绘制 cacheBitmap</span></span><br><span class="line">        cacheCanvas.setBitmap(cacheBitmap);</span><br><span class="line"></span><br><span class="line">        paint = <span class="keyword">new</span> Paint(Paint.DITHER_FLAG);</span><br><span class="line">        <span class="comment">//设置默认的画笔颜色</span></span><br><span class="line">        paint.setColor(Color.RED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置填充方式为描边</span></span><br><span class="line">        paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        <span class="comment">//设置笔刷的图形样式</span></span><br><span class="line">        paint.setStrokeJoin(Paint.Join.ROUND);</span><br><span class="line">        <span class="comment">//设置画笔转弯处的连接风格</span></span><br><span class="line">        paint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class="line">        <span class="comment">//设置默认的画笔的宽度</span></span><br><span class="line">        paint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//使用抗锯齿功能</span></span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//使用抖动效果</span></span><br><span class="line">        paint.setDither(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="4-重写-onDraw-方法"><a href="#4-重写-onDraw-方法" class="headerlink" title="4.重写 onDraw 方法"></a><strong>4.重写 onDraw 方法</strong></h2><p>在 DrawView 的 onDraw 方法中，设置背景颜色，绘制 cacheBitmap，绘制路径以及保存当前的状态到栈中，并调用 restore()方法恢复所保存的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置背景颜色</span></span><br><span class="line">        canvas.drawColor(<span class="number">0xFFFFFFFF</span>);</span><br><span class="line">        <span class="comment">//采用默认设置创建一个画笔</span></span><br><span class="line">        Paint bmpPaint = <span class="keyword">new</span> Paint();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制cacheBitmap</span></span><br><span class="line">        canvas.drawBitmap(cacheBitmap,<span class="number">0</span>,<span class="number">0</span>,bmpPaint);</span><br><span class="line">        <span class="comment">//绘制路径</span></span><br><span class="line">        canvas.drawPath(path,paint);</span><br><span class="line">        <span class="comment">//保存 canvas 状态</span></span><br><span class="line">        canvas.save(Canvas.ALL_SAVE_FLAG);</span><br><span class="line">        <span class="comment">//恢复 canvas 之前的保存状态，防止保存后对 canvas 执行的操作最后续的绘制有影响</span></span><br><span class="line">        canvas.restore();</span><br></pre></td></tr></table></figure><h2 id="5-重写-onTouchEvent-方法"><a href="#5-重写-onTouchEvent-方法" class="headerlink" title="5.重写 onTouchEvent 方法"></a><strong>5.重写 onTouchEvent 方法</strong></h2><p>在 DrawView 类中，重写onTouchEvent() 方法，为该视图添加触摸时间监听器，在该方法中，首先获取触摸时间发生的位置，然后应用 switch 对时间的不同状态添加响应代码，最后调用invalidate()方法更新视图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取触摸时间发生的位置</span></span><br><span class="line">        <span class="keyword">float</span> x = event.getX();</span><br><span class="line">        <span class="keyword">float</span> y = event.getY();</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将绘图的起始点移到（x，y）的坐标位置</span></span><br><span class="line">                path.moveTo(x,y);</span><br><span class="line">                preX = x;</span><br><span class="line">                preY = y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">float</span> dx = Math.abs(x-preX);</span><br><span class="line">                <span class="keyword">float</span> dy = Math.abs(y-preY);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否在允许的范围内</span></span><br><span class="line">                <span class="keyword">if</span> (dx&gt;=<span class="number">5</span> || dy &gt;= <span class="number">5</span>)&#123;</span><br><span class="line">                    path.quadTo(preX,preY,(x+preX)/<span class="number">2</span>,(y+preY)/<span class="number">2</span>);</span><br><span class="line">                    preX = x;</span><br><span class="line">                    preY = y;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="comment">//绘制路径</span></span><br><span class="line">                cacheCanvas.drawPath(path,paint);</span><br><span class="line">                path.reset();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        invalidate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 true，表示处理方法已经处理该事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-编写-clear-方法"><a href="#6-编写-clear-方法" class="headerlink" title="6.编写 clear() 方法"></a><strong>6.编写 clear() 方法</strong></h2><p>写一个 clear() 方法，用来实现橡皮擦功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置图形重叠时的处理方式</span></span><br><span class="line">       paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.CLEAR));</span><br><span class="line">       <span class="comment">//设置橡皮擦的宽度</span></span><br><span class="line">       paint.setStrokeWidth(<span class="number">50</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="7-编写-save-方法"><a href="#7-编写-save-方法" class="headerlink" title="7.编写 save() 方法"></a><strong>7.编写 save() 方法</strong></h2><p>写一个方法，用来保存当前的绘图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            saveBitmap(<span class="string">"myPicture"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveBitmap</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/sdcard/pictures/"</span>+filename+<span class="string">".png"</span>);</span><br><span class="line">        <span class="comment">//创建一个新文件</span></span><br><span class="line">        file.createNewFile();</span><br><span class="line">        <span class="comment">//创建一个文件输出流对象</span></span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        <span class="comment">//将绘图内容压缩成 PNG 格式输出到输出流对象中</span></span><br><span class="line">        cacheBitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</span><br><span class="line">        <span class="comment">//将缓冲区的数据全部写出到输出流中</span></span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="comment">//关闭文件输出流对象</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="8-设置权限"><a href="#8-设置权限" class="headerlink" title="8.设置权限"></a><strong>8.设置权限</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-创建-menu-资源文件"><a href="#9-创建-menu-资源文件" class="headerlink" title="9.创建 menu 资源文件"></a><strong>9.创建 menu 资源文件</strong></h2><p>在 res 目录下，创建menu 文件夹，在 menu 文件夹下，创建 toolsmenu.xml 资源文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:title</span>=<span class="string">"@string/color"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">menu</span> &gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义一组单选菜单项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span> &gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 定义子菜单 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/red"</span> <span class="attr">android:title</span>=<span class="string">"@string/color_red"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/green"</span> <span class="attr">android:title</span>=<span class="string">"@string/color_green"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/blue"</span> <span class="attr">android:title</span>=<span class="string">"@string/color_blue"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:title</span>=<span class="string">"@string/width"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">menu</span> &gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义子菜单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/width_1"</span> <span class="attr">android:title</span>=<span class="string">"@string/width_1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/width_2"</span> <span class="attr">android:title</span>=<span class="string">"@string/width_2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/width_3"</span> <span class="attr">android:title</span>=<span class="string">"@string/width_3"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/clear"</span> <span class="attr">android:title</span>=<span class="string">"@string/clear"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/save"</span> <span class="attr">android:title</span>=<span class="string">"@string/save"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-添加选项菜单"><a href="#10-添加选项菜单" class="headerlink" title="10.添加选项菜单"></a><strong>10.添加选项菜单</strong></h2><h3 id="重写onCreateOptionsMenu方法"><a href="#重写onCreateOptionsMenu方法" class="headerlink" title="重写onCreateOptionsMenu方法"></a><strong><1>重写onCreateOptionsMenu方法</1></strong></h3><p>在 activity 文件中，重写onCreateOptionsMenu()方法，在该方法中，实例化一个MenuInflater对象，并解析菜单资源文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        MenuInflater menuInflater = <span class="keyword">new</span> MenuInflater(<span class="keyword">this</span>);</span><br><span class="line">        menuInflater.inflate(R.menu.toolsmenu,menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="重写onOptionsItemSelected方法"><a href="#重写onOptionsItemSelected方法" class="headerlink" title="重写onOptionsItemSelected方法"></a><strong><2>重写onOptionsItemSelected方法</2></strong></h3><p>重写onOptionsItemSelected() 方法，分别对各个菜单项被选择时做出相应的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取自定义视图</span></span><br><span class="line">        DrawView drawView = (DrawView)findViewById(R.id.drawView1);</span><br><span class="line">        <span class="comment">//取消擦除效果</span></span><br><span class="line">        drawView.paint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//初始化画笔的宽度</span></span><br><span class="line">        drawView.paint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置画笔的颜色为红色</span></span><br><span class="line">            <span class="keyword">case</span> R.id.red:</span><br><span class="line">                drawView.paint.setColor(Color.RED);</span><br><span class="line">                item.setChecked(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//设置画笔的颜色为绿色</span></span><br><span class="line">            <span class="keyword">case</span> R.id.green:</span><br><span class="line">                drawView.paint.setColor(Color.GREEN);</span><br><span class="line">                item.setChecked(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//设置画笔的颜色为蓝色</span></span><br><span class="line">            <span class="keyword">case</span> R.id.blue:</span><br><span class="line">                drawView.paint.setColor(Color.BLUE);</span><br><span class="line">                item.setChecked(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//设置画笔的宽度为1</span></span><br><span class="line">            <span class="keyword">case</span> R.id.width_1:</span><br><span class="line">                drawView.paint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//设置画笔的宽度为5</span></span><br><span class="line">            <span class="keyword">case</span> R.id.width_2:</span><br><span class="line">                drawView.paint.setStrokeWidth(<span class="number">5</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//设置画笔的宽度为10</span></span><br><span class="line">            <span class="keyword">case</span> R.id.width_3:</span><br><span class="line">                drawView.paint.setStrokeWidth(<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//擦除绘画</span></span><br><span class="line">            <span class="keyword">case</span> R.id.clear:</span><br><span class="line">                drawView.clear();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//保存绘画</span></span><br><span class="line">            <span class="keyword">case</span> R.id.save:</span><br><span class="line">                drawView.save();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行，就会得到一个简易的涂鸦板，可以改变画笔颜色，画笔宽度，擦除，保存等。</p><p>真是越来越有意思了呢！</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> paint </tag>
            
            <tag> draw </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/06/07/hello-world/"/>
      <url>/2017/06/07/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 自定义 item 的 ListView</title>
      <link href="/2017/06/05/android-listView/"/>
      <url>/2017/06/05/android-listView/</url>
      <content type="html"><![CDATA[<p> 从 iOS 的 TableView 突然转到 Android 的 ListView， 说实话，很恶心。各种不方便，不要问我为什么学 Android，我也不想，唉，牢骚归牢骚，既然学了，就得学到点什么，不然既浪费时间，又什么都没得到,太亏了。记录一下学习的历程。</p><a id="more"></a><p>在使用 ListView 的时候，大部分我们都会自定义 item，iOS 也一样，会自定义 cell。不然使用系统为我们提供的几种格式是满足不了我们的各式各样的需求的。</p><p>废话到此为止。</p><h2 id="1-先在-xml-文件中布局："><a href="#1-先在-xml-文件中布局：" class="headerlink" title="1.先在 xml 文件中布局："></a><strong>1.先在 xml 文件中布局：</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_listView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-创建模型文件"><a href="#2-创建模型文件" class="headerlink" title="2.创建模型文件"></a><strong>2.创建模型文件</strong></h2><p>相当于 iOS 中的 model 文件，每写一个东西，就得去 iOS 中找对应的东西，这属于思维固化了。慢慢改正，不过这样能方便快速的理解这些东西。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageID;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter和getter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imageID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageID</span><span class="params">(<span class="keyword">int</span> imageID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imageID = imageID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比较而言，Android 的模型文件真的很麻烦，定义一个属性，就得写它的 getter 和 setter 方法。也许有其他的办法，只是我还不知道。</p><h2 id="3-创建Adapter"><a href="#3-创建Adapter" class="headerlink" title="3.创建Adapter"></a><strong>3.创建Adapter</strong></h2><p>这个适配器，在我的理解中就相当于 iOS 中的自定义 cell 了，比 iOS 方便的是，iOS 的那些数据源方法都在这里实现。一般的话，自定义的 adapter 会继承于 <code>BaseAdapter</code>。</p><h3 id="1-实现数据源方法"><a href="#1-实现数据源方法" class="headerlink" title="1.实现数据源方法"></a><strong>1.实现数据源方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//返回多少行数据</span></span><br><span class="line">       <span class="keyword">return</span> mList.size();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取每一行的数据</span></span><br><span class="line">       <span class="keyword">return</span> mList.get(position);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取行号</span></span><br><span class="line">       <span class="keyword">return</span> position;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UI 刷新的代码主要在这里实现</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建一个构造方法"><a href="#2-创建一个构造方法" class="headerlink" title="2.创建一个构造方法"></a><strong>2.创建一个构造方法</strong></h3><p>这里是举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TeacherAdapter</span><span class="params">(ArrayList&lt;Teacher&gt; mList, Context mContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mList = mList;</span><br><span class="line">        <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-给-item-布局"><a href="#4-给-item-布局" class="headerlink" title="4.给 item 布局"></a><strong>4.给 item 布局</strong></h2><p>创建一个 item 的 xml 文件，每一个 item 的布局都在这个文件中进行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">"@+id/item_imageView"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">"@+id/item_textView"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这里我给每个 item 上定义了两个控件，一个 TextView，一个 ImageView。是线性布局。</p><h2 id="5-给控件赋值"><a href="#5-给控件赋值" class="headerlink" title="5.给控件赋值"></a><strong>5.给控件赋值</strong></h2><p>接下来再回到 adapter 文件中的 getView 方法中，在这个方法中为控件赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UI 刷新的代码主要在这里实现</span></span><br><span class="line"><span class="comment">//获取老师的数据</span></span><br><span class="line">       <span class="keyword">final</span> Teacher teacher = mlist.get(position);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//根据layout文件创建布局</span></span><br><span class="line">       View oneTeacherView = LayoutInflater.from(mContext).inflate(R.layout.teacher_item,parent,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取ImageView和TextView</span></span><br><span class="line">       ImageView imageView = (ImageView) oneTeacherView.findViewById(R.id.item_imageView);</span><br><span class="line">       TextView textView = (TextView) oneTeacherView.findViewById(R.id.item_textView);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据数据分别为imageView和textView赋值       imageView.setImageResource(teacher.getImageID());</span></span><br><span class="line">       textView.setText(teacher.getName());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> oneTeacherView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-设置数据源"><a href="#6-设置数据源" class="headerlink" title="6.设置数据源"></a><strong>6.设置数据源</strong></h2><p>接下来回到 Activity 文件中，获取 listView 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为这里是本地数据，所以将 listView 设置为了局部变量，本地数据也不需要在开启线程去刷新UI</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;Teacher&gt; teacherList = <span class="keyword">new</span> ArrayList&lt;Teacher&gt;();</span><br><span class="line"></span><br><span class="line">Teacher teacher = <span class="keyword">new</span> Teacher()；</span><br><span class="line">teacher.setName(<span class="string">"jack"</span>);</span><br><span class="line">teacher.setImageID(R.mipmap.header_image);</span><br><span class="line"></span><br><span class="line">teacherList.add(teacher);</span><br><span class="line"></span><br><span class="line"><span class="comment">//我这里只添加了一条数据，如果像添加的话，添加进这个数组就行</span></span><br><span class="line">ListView listView = (ListView)findViewById(R.id.main_listView);</span><br><span class="line"></span><br><span class="line">TeacherAdapter adapter = <span class="keyword">new</span> TeacherAdapter(teacherList,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">listView.setAdapter(adapter);</span><br></pre></td></tr></table></figure><p>到这里，一个完整的自定义 item 的 ListView 算是完成了。但是在实际开发中，大部分的应用场景都是从网络端获取数据，然后给 ListView 赋值。这个等我学到网络的时候再来介绍一下。</p><p>如有不对之处，请多多指正！达者为师，谢谢！</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android-listView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 响应按钮点击事件的4种写法</title>
      <link href="/2017/05/10/android-onClick/"/>
      <url>/2017/05/10/android-onClick/</url>
      <content type="html"><![CDATA[<p>在android 开发中，按钮响应点击事件有四种写法。下面依次介绍。</p><a id="more"></a><h2 id="1-匿名内部类"><a href="#1-匿名内部类" class="headerlink" title="1. 匿名内部类"></a><strong>1. 匿名内部类</strong></h2><p>这种方式一般适用于自己写 demo 测试时使用，优点就是快速。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_register);</span><br><span class="line"></span><br><span class="line">        Button button = (Button)findViewById(R.id.btn);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               </span><br><span class="line">                  <span class="comment">//响应事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-自定义事件监听类"><a href="#2-自定义事件监听类" class="headerlink" title="2. 自定义事件监听类"></a><strong>2. 自定义事件监听类</strong></h2><p>这种方式和第一种差不多，唯一的区别就是将响应事件的代码放到一个自定义的监听类里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_register);  </span><br><span class="line">              </span><br><span class="line">        Button button = (Button)findViewById(R.id.btn);  </span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> MyListener());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//让自定义监听类去实现 View 的 OnClickListener 接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//响应事件</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-由-Activity-实现-OnClickListener-接口"><a href="#3-由-Activity-实现-OnClickListener-接口" class="headerlink" title="3. 由 Activity 实现 OnClickListener 接口"></a><strong>3. 由 Activity 实现 OnClickListener 接口</strong></h2><p>这种方式是在项目中应用最多的写法。因为这种写法可以减少代码量，尤其是在 Activity 上有多个点击事件的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_register);  </span><br><span class="line">        </span><br><span class="line">          </span><br><span class="line">    Button button = (Button)findViewById(R.id.btn);  </span><br><span class="line">        button.setOnClickListener(<span class="keyword">this</span>); </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//根据 id 来区分分别是哪个按钮的点击事件</span></span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;  </span><br><span class="line">            <span class="keyword">case</span> R.id.btn:  </span><br><span class="line">                <span class="comment">//响应事件  </span></span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-在布局文件中添加-onClick-属性"><a href="#4-在布局文件中添加-onClick-属性" class="headerlink" title="4. 在布局文件中添加 onClick 属性"></a><strong>4. 在布局文件中添加 onClick 属性</strong></h2><p>这种方式不用在 Activity 中声明组件对象就可以响应点击事件，虽然在看起来很轻便，但是在维护测试的时候，不容易找到 button 相对应的点击事件，所以不太推荐使用。</p><h3 id="首先在-XML-布局文件中添加-onClick-属性"><a href="#首先在-XML-布局文件中添加-onClick-属性" class="headerlink" title="首先在 XML 布局文件中添加 onClick 属性"></a><strong>首先在 XML 布局文件中添加 onClick 属性</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"btnClick"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/btn"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-Activity-中实现方法"><a href="#在-Activity-中实现方法" class="headerlink" title="在 Activity 中实现方法"></a><strong>在 Activity 中实现方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnClick</span><span class="params">(View v)</span></span>&#123;  </span><br><span class="line">    <span class="comment">//响应事件 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> onClick </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Native 集成到iOS原生项目</title>
      <link href="/2017/05/03/rn-integration-iosNative/"/>
      <url>/2017/05/03/rn-integration-iosNative/</url>
      <content type="html"><![CDATA[<p>如果你正准备从头开始制作一个新的应用，那么React Native会是个非常好的选择。但如果你只想给现有的原生应用中添加一两个视图或是业务流程，React Native也同样不在话下。只需简单几步，你就可以给原有应用加上新的基于React Native的特性、画面和视图等。</p><a id="more"></a><p><strong>把React Native组件植入到iOS应用中有如下几个主要步骤：</strong></p><ol><li>首先当然要了解你要植入的React Native组件。</li><li>创建一个Podfile，在其中以subspec的形式填写所有你要植入的React Native的组件。</li><li>创建js文件，编写React Native组件的js代码。</li><li>添加一个事件处理函数，用于创建一个RCTRootView。这个RCTRootView正是用来承载你的React Native组件的，而且它必须对应你在index.ios.js中使用AppRegistry注册的模块名字。</li><li>启动React Native的Packager服务，运行应用。</li><li>根据需要添加更多React Native的组件。</li><li><a href="http://reactnative.cn/docs/0.44/debugging.html" target="_blank" rel="noopener">调试</a>。</li><li>准备<a href="http://reactnative.cn/docs/0.44/running-on-device-ios.html" target="_blank" rel="noopener">部署发布</a> （比如可以利用react-native-xcode.sh脚本）。</li><li>发布应用，升职加薪，走向人生巅峰！😘</li></ol><h2 id="创建一个原生应用"><a href="#创建一个原生应用" class="headerlink" title="创建一个原生应用"></a><strong>创建一个原生应用</strong></h2><p>这个就不多说。</p><h2 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a><strong>添加依赖包</strong></h2><p><code>React Native</code>的植入过程同时需要<code>React</code>和<code>React Native</code>两个<code>node</code>依赖包。我们把具体的依赖包记录在<code>package.json</code>文件中。如果项目根目录中没有这个文件，那就自己创建一个。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a><strong>package.json</strong></h3><p>我这里的做法是在项目的根目录下创建一个专门存放<code>react native</code>相关的文件夹，就像这样：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-3f0a8009194f63bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RNComponent文件夹"></p><p>然后在这个文件夹下创建一个<code>package.json</code>文件，就像这样：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-cadd6341c8ddd797.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="package.json文件"></p><p>在<code>package.json</code>文件中的内容是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"NativeRN"</span>,</span><br><span class="line"><span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line"><span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line"><span class="string">"react"</span>: <span class="string">"16.0.0-alpha.6"</span>,</span><br><span class="line"><span class="string">"react-native"</span>: <span class="string">"0.44.0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释一下：</strong></p><ul><li><p><code>version</code>字段没有太大意义（除非你要把你的项目发布到npm仓库）。</p></li><li><p><code>scripts</code>中是用于启动<code>packager</code>服务的命令。</p></li><li><p><code>dependencies</code>中的<code>react</code>和<code>react-native</code>的版本取决于你的具体需求。一般来说我们推荐使用最新版本。你可以使用<code>npm info react</code>和<code>npm info react-native</code>来查看当前的最新版本。另外，<code>react-native</code>对<code>react</code>的版本有严格要求，高于或低于某个范围都不可以。</p></li></ul><p><strong>本文无法在这里列出所有<code>react native</code>和对应的<code>react</code>版本要求，只能提醒读者先尝试执行<code>npm install</code>，然后注意观察安装过程中的报错信息，例如require react@某.某.某版本, but none was installed，然后根据这样的提示，执行npm i -S react@某.某.某版本。</strong></p><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a><strong>安装依赖包</strong></h3><p>使用npm（node包管理器，Node package manager）来安装React和React Native模块。这些模块会被安装到项目根目录下的node_modules/目录中。 在包含有package.json文件的目录（一般也就是项目根目录,我这里因为创建了RNComponent文件夹，所以是在这个文件夹目录下执行这个命令）中运行下列命令来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>运行完成后会出现<code>node_modules</code>这样一个文件夹，这个文件夹下包含了RN的一些模块，就像这样：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-12fe957bf08f258a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行命令安装模块"></p><h2 id="React-Native框架"><a href="#React-Native框架" class="headerlink" title="React Native框架"></a><strong>React Native框架</strong></h2><p>React Native框架整体是作为node模块安装到项目中的。下一步我们需要在CocoaPods的Podfile中指定我们所需要使用的组件。</p><h3 id="Subspecs"><a href="#Subspecs" class="headerlink" title="Subspecs"></a><strong>Subspecs</strong></h3><p>在你开始把<code>React Native</code>植入到你的应用中之前，首先要决定具体整合的是<code>React Native</code>框架中的哪些部分。而这就是<code>subspec</code>要做的工作。在创建<code>Podfile</code>文件的时候，需要指定具体安装哪些<code>React Native</code>的依赖库。所指定的每一个库就称为一个<code>subspec</code>。</p><p>可用的<code>subspec</code>都列在<code>node_modules/react-native/React.podspec</code>中，基本都是按其功能命名的。一般来说你首先需要添加<code>Core</code>，这一<code>subspec</code>包含了必须的<code>AppRegistry</code>、<code>StyleSheet</code>、<code>View</code>以及其他的一些<code>React Native</code>核心库。如果你想使用<code>React Native</code>的<code>Text</code>库（即<code>&lt;Text&gt;</code>组件），那就需要添加<code>RCTText</code>的<code>subspec</code>。同理，<code>Image</code>需要加入<code>RCTImage</code>，等等。</p><h3 id="Podfile"><a href="#Podfile" class="headerlink" title="** Podfile*\\*"></a>** Podfile*\\*</h3><p>在<code>React</code>和<code>React Native</code>模块成功安装到<code>node_modules</code>目录之后，你就可以开始创建<code>Podfile</code>以便选择所需的组件安装到应用中。</p><p>创建podfile在这里不在多说，相信只要用过cocoapods的朋友都知道。</p><p>podfile创建完成之后，在文件里添加一下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># target的名字一般与你的项目名字相同</span><br><span class="line">target <span class="string">'NativeRN'</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  # 'node_modules'目录一般位于根目录中</span><br><span class="line">  # 但是如果你的结构不同，那你就要根据实际路径修改下面的`:path`</span><br><span class="line">  pod <span class="string">'React'</span>, :<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">'./RNComponent/node_modules/react-native'</span>, :<span class="function"><span class="params">subspecs</span> =&gt;</span> [</span><br><span class="line">    <span class="string">'Core'</span>,</span><br><span class="line">    <span class="string">'RCTText'</span>,</span><br><span class="line">    <span class="string">'RCTNetwork'</span>,</span><br><span class="line">    'RCTWebSocket', # 这个模块是用于调试功能的</span><br><span class="line">    # 在这里继续添加你所需要的模块</span><br><span class="line">  ]</span><br><span class="line">  # 如果你的RN版本 &gt;= 0.42.0，请加入下面这行</span><br><span class="line">  pod <span class="string">"Yoga"</span>, :<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">"./RNComponent/node_modules/react-native/ReactCommon/yoga"</span></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>然后执行下面的👇命令，开始安装React Native的pod包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod install</span><br></pre></td></tr></table></figure><h2 id="代码集成"><a href="#代码集成" class="headerlink" title="代码集成"></a><strong>代码集成</strong></h2><h3 id="index-ios-js"><a href="#index-ios-js" class="headerlink" title="index.ios.js"></a><strong>index.ios.js</strong></h3><p>首先创建一个空的index.ios.js文件。一般来说我们把它放置在项目根目录下。就像👇：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-8dc08f6aaa420e74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="index.ios.js"></p><p>index.ios.js是React Native应用在iOS上的入口文件。<strong>而且它是不可或缺的！</strong>它可以是个很简单的文件，简单到可以只包含一行require/import导入语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录执行以下命令创建文件：</span></span><br><span class="line">$ touch index.ios.js</span><br></pre></td></tr></table></figure><h3 id="添加你自己的React-Native代码"><a href="#添加你自己的React-Native代码" class="headerlink" title="添加你自己的React Native代码"></a><strong>添加你自己的React Native代码</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeRN</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">          Welcome to React Native!</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span></span><br><span class="line"><span class="regexp">          To get started, edit index.ios.js</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          Press Cmd+R to reload,&#123;<span class="string">'\n'</span>&#125;</span><br><span class="line">          Cmd+D or shake <span class="keyword">for</span> dev menu</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  welcome: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    margin: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    color: <span class="string">'#333333'</span>,</span><br><span class="line">    marginBottom: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'NativeRN'</span>, () =&gt; NativeRN);</span><br></pre></td></tr></table></figure><h3 id="集成到原生项目中"><a href="#集成到原生项目中" class="headerlink" title="集成到原生项目中"></a><strong>集成到原生项目中</strong></h3><p>我这里先创建了一个ViewController，👇这样：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-57083f070895282e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RNViewController"></p><p>然后导入<code>#import &lt;RCTRootView.h&gt;</code>头文件,👇这样：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> * strUrl = <span class="string">@"http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true"</span>;</span><br><span class="line">    <span class="built_in">NSURL</span> * jsCodeLocation = [<span class="built_in">NSURL</span> URLWithString:strUrl];</span><br><span class="line">    </span><br><span class="line">    RCTRootView * rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                         moduleName:<span class="string">@"NativeRN"</span></span><br><span class="line">                                                  initialProperties:<span class="literal">nil</span></span><br><span class="line">                                                      launchOptions:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">self</span>.view = rootView;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要在info.plist文件中配置一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;NSAppTransportSecurity&lt;<span class="regexp">/key&gt;</span></span><br><span class="line"><span class="regexp">  &lt;dict&gt;</span></span><br><span class="line"><span class="regexp">    &lt;key&gt;NSExceptionDomains&lt;/</span>key&gt;</span><br><span class="line">    &lt;dict&gt;</span><br><span class="line">      &lt;key&gt;localhost&lt;<span class="regexp">/key&gt;</span></span><br><span class="line"><span class="regexp">      &lt;dict&gt;</span></span><br><span class="line"><span class="regexp">       &lt;key&gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&lt;/</span>key&gt;</span><br><span class="line">       &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">      &lt;<span class="regexp">/dict&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>dict&gt;</span><br><span class="line">  &lt;<span class="regexp">/dict&gt;</span></span><br></pre></td></tr></table></figure><p>配置后的效果：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-df627970cb9285f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置info.plist"></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a><strong>运行项目</strong></h2><p>在运行项目前，先在react native文件夹目录下，启动开发服务器。也就是在本文中的RNComponent目录下，启动命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>运行项目，看到效果：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-6f3af1947e1b9f4d.gif?imageMogr2/auto-orient/strip" alt="效果图"></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>不思考，不读书</title>
      <link href="/2017/05/03/studying-thinking/"/>
      <url>/2017/05/03/studying-thinking/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493786655792&amp;di=f05339bf58c9f91345d8bffe016d8df4&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.zjknews.com%2Ffile%2F201703%2F27%2F58d7b03c64fa6d87f68bbdaf3cc2e80c.jpg%3FimageView2%2F2%2Fw%2F600" alt="读书"></p><p>越来越感觉脑子不够用了。最近在学习一些新的东西，也许是自己的基础不扎实，导致学起来很乱，没有侧重点，完完全全就是一团乱麻。常常是刚刚想出来一个解决办法，继续往下写的时候，突然发现之前的方法不太好，然后就推翻重来，如此循环往复，没有看到一点显著的成果，才让我心生焦虑。</p><a id="more"></a><p>最近还有一件事情使我非常苦恼，其实也算不上苦恼，归根结底的原因就是因为自己贪玩。是这样的，现在《王者荣耀》这款手游简直是火的不得了，我也未能免受其害。可游戏这东西，玩多了真的会上瘾，所以最近花在游戏上的时间有点多。一方面慨叹于光阴的易逝，而另一方面还在召唤师峡谷里忘情厮杀。之前卸载过几次，狠话也说了很多，可就是控制不住自己。思来想去，自己就是太爱玩了，也太没有自制力了。最近想到一个办法，就是用读书来转移玩游戏的注意力。暂时还不知道管不管用，以后除了工作，要尽可能的摆脱对手机的依赖，多去读书，多去思考，多出去走走。</p><p>之前看过一个节目，里面有人讲到“读书永不毕业”，我觉得说的挺对的。中国不也有句老话叫“活到老，学到老”吗？就我自己来讲，学习可以使我觉得我的大脑还可以思想，还在运转，再说大一点，就是还能感觉到自己活着。倘若让我每天重复的，机械的做一些事情，而没有时间去思考，我肯定会受不了。有时候仔细想想，万一真的有一天，自己的大脑停止思想了，真的是挺可怕的一件事。之所以长个脑子，不就是用来思考的吗？学习，思考，真的是一生都需要做的一件事。</p><p>年轻的大好光阴，不用来学习，很可惜，不是吗？</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493786793295&amp;di=20f4de82a6affac573be5e75e9e0d51a&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20160427%2Fa6850906863b46eb8cb519723b97fc21.jpg" alt="不思考，不读书"></p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书，思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React-Native Fetch网络请求</title>
      <link href="/2017/04/27/react-native-fetch/"/>
      <url>/2017/04/27/react-native-fetch/</url>
      <content type="html"><![CDATA[<p>在react-native开发中，使用Fetch进行网络请求。<a href="http://reactnative.cn/docs/0.43/network.html#content" target="_blank" rel="noopener">官方文档上的网络请求</a></p><a id="more"></a><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a><strong>基本使用方法</strong></h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a><strong>GET请求</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(@<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json()) </span><br><span class="line">  .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(responseJson);<span class="comment">//打印返回的数据</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);<span class="comment">//打印报的错</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>catch住fetch可能抛出的异常，否则出错时你可能看不到任何提示。</strong></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a><strong>POST请求</strong></h3><p>Fetch还有可选的第二个参数，可以用来定制HTTP请求一些参数。你可以指定header参数，或是指定使用POST方法，又或是提交数据等等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://mywebsite.com/endpoint/'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    firstParam: <span class="string">'yourValue'</span>,</span><br><span class="line">    secondParam: <span class="string">'yourOtherValue'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果你的服务器无法识别上面POST的数据格式，那么可以尝试传统的form格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://mywebsite.com/endpoint/'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="string">'key1=value1&amp;key2=value2'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/Request" target="_blank" rel="noopener">Fetch请求文档</a>来查看所有可用的参数。</p><h2 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a><strong>简单封装</strong></h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a><strong>GET</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  get请求</span></span><br><span class="line"><span class="comment">     *  url:请求地址</span></span><br><span class="line"><span class="comment">     *  params:参数</span></span><br><span class="line"><span class="comment">     *  callback:回调函数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">static</span> get(url,params,callback)&#123;</span><br><span class="line">        <span class="keyword">if</span> (params) &#123;</span><br><span class="line">            <span class="keyword">let</span> paramsArray = [];</span><br><span class="line">            <span class="comment">//拼接参数</span></span><br><span class="line">            <span class="built_in">Object</span>.keys(params).forEach(<span class="function"><span class="params">key</span> =&gt;</span> paramsArray.push(key + <span class="string">'='</span> + params[key]))</span><br><span class="line">            <span class="keyword">if</span> (url.search(<span class="regexp">/\?/</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                url += <span class="string">'?'</span> + paramsArray.join(<span class="string">'&amp;'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                url += <span class="string">'&amp;'</span> + paramsArray.join(<span class="string">'&amp;'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fetch请求</span></span><br><span class="line">        fetch(url,&#123;</span><br><span class="line">            method: <span class="string">'GET'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                callback(response)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                alert(error)</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a><strong>POST</strong></h3><p>post有两种形式：</p><ul><li><strong>第一种：’Content-Type’: ‘application/json’</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  post请求</span></span><br><span class="line"><span class="comment">     *  url:请求地址</span></span><br><span class="line"><span class="comment">     *  params:参数,这里的参数格式是：&#123;param1: 'value1',param2: 'value2'&#125;</span></span><br><span class="line"><span class="comment">     *  callback:回调函数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">static</span> postJSON(url,params,callback)&#123;</span><br><span class="line">        <span class="comment">//fetch请求</span></span><br><span class="line">        fetch(url,&#123;</span><br><span class="line">            method: <span class="string">'POST'</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">              <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            body:<span class="built_in">JSON</span>.stringify(params)</span><br><span class="line">        &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">            .then(<span class="function">(<span class="params">responseJSON</span>) =&gt;</span> &#123;</span><br><span class="line">                callback(responseJSON)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"error = "</span> + error)</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>第二种： form表单形式</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  post请求</span></span><br><span class="line"><span class="comment">     *  url:请求地址</span></span><br><span class="line"><span class="comment">     *  params:参数,这里的参数要用这种格式：'key1=value1&amp;key2=value2'</span></span><br><span class="line"><span class="comment">     *  callback:回调函数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">static</span> postForm(url,params,callback)&#123;</span><br><span class="line">        <span class="comment">//fetch请求</span></span><br><span class="line">        fetch(url,&#123;</span><br><span class="line">            method: <span class="string">'POST'</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            body: params</span><br><span class="line">        &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">            .then(<span class="function">(<span class="params">responseJSON</span>) =&gt;</span> &#123;</span><br><span class="line">                callback(responseJSON)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"error = "</span> + error)</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a><strong>调用</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//post请求</span></span><br><span class="line"><span class="keyword">let</span> params = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;;</span><br><span class="line">        NetRequest.postJSON(<span class="string">'http://www.baidu.com/'</span>,params,<span class="function"><span class="keyword">function</span> (<span class="params">set</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//下面的就是请求来的数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(set)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment">//get请求,以百度为例,没有参数,没有header</span></span><br><span class="line">       NetRequest.get(<span class="string">'https://www.baidu.com/'</span>,<span class="string">''</span>,<span class="function"><span class="keyword">function</span> (<span class="params">set</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//下面是请求下来的数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(set)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><strong>解释一下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将`JSON`数据转换成字符串</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(params)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据JSON化</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(responseJSON)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fetch </tag>
            
            <tag> rn网络请求 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 获取crash日志</title>
      <link href="/2017/04/21/getCrashBlog/"/>
      <url>/2017/04/21/getCrashBlog/</url>
      <content type="html"><![CDATA[<p>在项目上架到App Store以后，谁也不能保证没有一个错误，可能在测试期间连测试人员都没有发现的隐藏小bug在上线之后被用户发现了，这就无疑给用户造成了困扰。所以作为开发人员，要及时的收集这些crash日志信息，然后修复这些问题。</p><a id="more"></a><p>这里我用了一种方法，就是当应用在用户使用时发生崩溃现象，会获取到崩溃的日志，然后调起邮箱让用户通过邮件发送给我们。</p><p>具体代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - 获取异常日志</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)installUncaughtExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSSetUncaughtExceptionHandler</span>(&amp;UncaughtExceptionHandler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> UncaughtExceptionHandler(<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSArray</span> *arr = [exception callStackSymbols];</span><br><span class="line">    <span class="built_in">NSString</span> *reason = [exception reason];</span><br><span class="line">    <span class="built_in">NSString</span> *name = [exception name];</span><br><span class="line">    <span class="built_in">NSString</span> *currentVersion = [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:<span class="string">@"CFBundleVersion"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *urlStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"mailto://developer@qq.com?subject=Crash报告&amp;body=您的建议会让我们做的更好，感谢您的配合！&lt;br&gt;&lt;br&gt;&lt;br&gt;"</span><span class="string">"错误详情(%@):&lt;br&gt;%@&lt;br&gt;-----------------------&lt;br&gt;%@&lt;br&gt;---------------------&lt;br&gt;%@"</span>,currentVersion,name,reason,[arr componentsJoinedByString:<span class="string">@"&lt;br&gt;"</span>]];</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:[urlStr stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication]openURL:url];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>AppDelegate</code>里的</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取异常报告</span></span><br><span class="line">    [<span class="keyword">self</span> installUncaughtExceptionHandler];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法中调用就可以了。</p>]]></content>
      
      <categories>
          
          <category> iOS 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crash Blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ARC下的内存泄漏</title>
      <link href="/2017/04/18/ARCMemoryLeak/"/>
      <url>/2017/04/18/ARCMemoryLeak/</url>
      <content type="html"><![CDATA[<p>已习惯于arc帮我们管理内存的我们，写起代码来，比MRC似乎肆意妄为了许多，总有些有恃无恐的感觉，其实arc下面还是很容易引起内存溢出的。<br><a id="more"></a></p><p>ARC 是帮助我们做对象内存管理的一套机制，使得我们以前在 MRC 模式下管理内存工作量能在 ARC 模式下得到缓解。正如苹果官方文档上所描述的：<br>Automatic Reference Counting (ARC) is a compiler feature that provides automatic memory management of Objective-C objects.<br>可见 ARC 是编译时特性，它没有改变 Objective-C 引用计数式内存管理的本质，更不是 GC（垃圾回收）。<br>也就是说只要我们稍不注意，隐式的持有或复制对象就会造成内存泄露。</p><h1 id="NSNotificationcenter"><a href="#NSNotificationcenter" class="headerlink" title="NSNotificationcenter"></a><strong>NSNotificationcenter</strong></h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter]addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(method:) name:<span class="string">@"notiName"</span> object:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>这里添加观察者其实是不会造成内存泄漏的，但是，但是，但是……如果self被销毁，当在调用post消息的时候，就会报对象被释放的错误，导致闪退，所以在添加观察者的对象，一定要在它被销毁的时候从消息中心删除！</p><p>就是在注册通知的地方加上这个：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line"></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter]removeObserver:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a><strong>NSTimer</strong></h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(method:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure><p>上面的timer为了防止 target 被释放而导致的程序异常，timer 会持有 target， self 持有 timer，timer 在初始化时持有 self，造成循环引用。解决的方法就是使用 <code>invalidate</code> 方法销掉 timer。</p><h1 id="delegate属性的强引用"><a href="#delegate属性的强引用" class="headerlink" title="delegate属性的强引用"></a><strong>delegate属性的强引用</strong></h1><p>把<code>delegate</code>声明为<code>strong</code>属性容易导致内存溢出 。</p><p>解决办法是把<code>delegate</code>属性的<code>strong</code>改为<code>assign</code>或者<code>weak</code>即可。</p><blockquote><ul><li>当用<code>weak</code>或<code>assign</code>修饰的时候，指明该对象并不负责保持<code>delegate</code>这个对象，<code>delegate</code>这个对象的销毁由外部控制。</li></ul></blockquote><blockquote><ul><li>当用<code>strong</code>修饰的时候，该对象强引用<code>delegate</code>，外界不能销毁<code>delegate</code>对象，会导致循环引用(<code>Retain Cycles</code>)。</li></ul></blockquote><h1 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a><strong>WKWebView</strong></h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[_webView.configuration.userContentController addScriptMessageHandler:<span class="keyword">self</span> name:clickName];</span><br></pre></td></tr></table></figure><p>添加addScriptMessageHandler之后，必须在vc销毁前把它移除。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[_webView.configuration.userContentController removeScriptMessageHandlerForName:clickName];</span><br></pre></td></tr></table></figure><p>和<code>NSNotification</code> 很类似。</p><h1 id="Block"><a href="#Block" class="headerlink" title="Block"></a><strong>Block</strong></h1><p><img src="http://img.blog.csdn.net/20170418105339918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVGhyZWVfWmhhbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>上面图片中就是一典型案例，红色部分就是修改之前导致内存溢出的代码，我们来分析一下： </p><p>上面的success block应该是self持有，而在success中有持有了self，导致self和 block 的循环引用，造成内存泄露！ </p><p>说到底还是造成了循环引用导致了内存泄漏，所以我们要打破循环，释放对象，这里我们把self变成了弱引用，打破循环引用。</p><p><strong>以上几种情况可能通过instrument 是查看不出来的，至少是没有小红叉的。我们通过instruments查看所有VC的引用计数才找到那些VC是发生了内存泄露。</strong></p><p><a href="http://blog.csdn.net/zhuchuanwu2013/article/details/51284733" target="_blank" rel="noopener">参考他的</a></p>]]></content>
      
      <categories>
          
          <category> iOS 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARC内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>金山城市沙滩游</title>
      <link href="/2017/04/16/visitJinShanCityBeach/"/>
      <url>/2017/04/16/visitJinShanCityBeach/</url>
      <content type="html"><![CDATA[<p>一大早就从床上爬起来，已经很久都没有起的这么早了，洗漱完毕，准备出发。聪明的我已经于昨晚查好了路线，确认无误后，正式出发。<br><a id="more"></a></p><p>对于大海，早就向往之，之前不知道上海的什么地方可以看到，一直耽搁未成行。但现在万事俱备，又恰逢这三四月舒爽的季节，还犹豫什么呢？</p><p>对于我这样一个在中原长大的孩子，高山、大海都可以让我惊奇不已（说出来很尴尬，还是在去年才真正的爬了一次山）。虽然很累，但心愿已了。说真的，我是特别喜欢这种山山水水的自然风光，一方面慨叹于大自然的鬼斧神工，另一方面可以使自己放松身心，心旷神怡。带着对大海的期许，在车上睡着了。。。</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-44c3c8cb6db3edf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="坐上了公交车去海边"></p><p>金山这个地方距离我住的地方真的很远，从747换到了上石线，坐上没多久我就睡着了，中间醒了好几次，竟然还没有到，然后就无聊的玩手机了。不知道过了多久，终于到了。下车没走多久就看到了4号口，走近才发现是出口，只让出不让进（只好改道咯）！问了出口的保安，给指了指5号口的方向，大踏步的前进吧！到了之后，掏钱买票。。。等等，，，没带钱？？？翻遍了全身的口袋，找到了三块钱（两个硬币和一张纸币）。WTF!这下可怎么办，不过，经历过大风大浪的我，怎么可能让这点小事难倒。瞬间就想到了这是21世纪，接着在电光石火间就想到可以美团啊。哈哈哈，这点小事怎么可能难倒我。然而，售票的妹子（虽然以我的眼力一眼看不出她的年龄，姑且叫她大妹子吧）告诉我这个入口网上订的票不能进，要去3号口，QNMLGB。心里碎碎念了好久，这能怪谁呢？能怪我没带现金吗？当然不能，只能怪他们的设施不够现代化，接着走吧，顶着一轮明日，终于来到了。当然，拍个照先。</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-78afd1bb1de88185.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一个看样子可以从水上起飞的飞机，厉害了"></p><p>买票，进去，我看这次谁还敢拦我！</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-3098e55082fc894e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通行证，20大洋"></p><p>现在是非泳期，但是是周末，所以票价是20。来都来了，再贵也得进啊。马上就能看到大海了，好激动。。。</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-9f8ec23ad4e2e8c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="看不出来这是大海是不是？"></p><p>这是什么鬼啊？这叫大海吗？这样的大海是带不走我的哀愁的吧？</p><p>远处被一道像是大坝的东西给围住了，过来的浪一个个小的可怜，完全不是我想象中的样子。看到一块大石头，心想着，怎么着也得上去吟诗一首吧，跳上去刚刚站好，直抒胸臆的“啊”还没出口，背后响起了“帅哥，快下来，那里不让上噢”的声音，刚刚涌上来的灵感，汇成了一句“好的，马上下来”喷涌而出。</p><p>继续往前走，沙滩上的沙子是真的沙子，我没有脱鞋去感受，因为我怕扎了脚。</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-3946c6600eaebba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="又是围栏"></p><p>终于到了可以近距离接触到水的地方了，可还是被围栏围起来了，很煞风景有没有？没有比基尼美女（这个天气也不可能有，这才四月份）也就算了，就这点水还围起来，真是够了！沙滩上的一群大妈在热火朝天的聊着，时不时的还扭几下，难道是传说中的“沙滩舞蹈队”？正在我暗暗猜测她们的真正身份的时候，突然，三个大妈从人群中走了出来，背对着大海站好，她们对面还站着一位拍照的大妈，在拍照大妈的口令声中：“1”，“2”，“3”，三个大妈突然像少女般的跳了起来，而且还摆出了pose，全身闪起了青春的光芒，光芒四射，刺痛了我的眼睛。当然pose还未摆好，就已经从空中着陆了，毕竟跳起的高度有限。</p><p>再往前走，一股下水道污泥的味道扑面而来。只好调整方向，然后沙雕映入眼帘。</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-1653707b71091b84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="沙雕1"></p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-ba59eeb356c72d70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="沙雕2"></p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-cc426c17a96e948f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="应该是维护安全的炮楼"></p><p>再往前走，视线开阔了一些，能看到远处的海域，似有若无的小岛。迎面的海风吹来，真的有点大海的感觉了。还有乘坐快艇在水中驰骋的乘客。好了，没有优美的词再去赞美这个地方了，能想到的就这么多。😁大概用了不到一个小时，就把这里全转了个遍，而且还是在我故意放慢脚步的情况下。总的来说，这里满足不了对大海的憧憬，充其量就算是个亲子乐园吧。最后放上拍的看起来还不错的图用以以后怀念这里吧，反正绝对不会再来第二次了。</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-8f92d2a52b6f08d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这个角度看起来还不错"></p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-2861ca5258d9ef92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="疾驰的快艇和悠悠的帆船"></p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 本地推送（通知）</title>
      <link href="/2017/04/14/localNotification/"/>
      <url>/2017/04/14/localNotification/</url>
      <content type="html"><![CDATA[<p>以前一直迷惑，本地推送到底有什么用，后来仔细想了想，确实有用（废话，不然苹果爸爸干嘛开发这个？手动鄙视自己！）<br><a id="more"></a></p><p><strong>本地通知服务 主要处理基于时间行为的通知。比如定时通知用户该起床撒尿了。</strong></p><p>就是这么个用处！嗯，是这样吧？是的！</p><p>在iOS10苹果废弃了之前的<code>UILocalNotification</code>，而采用了新的<code>UserNotifications Framework</code>来推送通知。现在先说一下iOS10之前的本地推送流程！</p><h2 id="iOS-10之前"><a href="#iOS-10之前" class="headerlink" title="iOS 10之前"></a><strong>iOS 10之前</strong></h2><h3 id="注册通知"><a href="#注册通知" class="headerlink" title="注册通知"></a><strong>注册通知</strong></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice].systemVersion floatValue] &gt; <span class="number">8.0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">UIUserNotificationSettings</span> *settings = [<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:<span class="built_in">UIUserNotificationTypeAlert</span> | <span class="built_in">UIUserNotificationTypeBadge</span> | <span class="built_in">UIUserNotificationTypeSound</span> categories:<span class="literal">nil</span>];</span><br><span class="line">        [application registerUserNotificationSettings:settings];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送通知"><a href="#发送通知" class="headerlink" title="发送通知"></a><strong>发送通知</strong></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建一个本地通知</span></span><br><span class="line">    <span class="built_in">UILocalNotification</span> *localNote = [[<span class="built_in">UILocalNotification</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.1.设置通知发出的时间</span></span><br><span class="line">    localNote.fireDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.2.设置通知内容</span></span><br><span class="line">    localNote.alertBody = <span class="string">@"这是一个本地推送"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.3.设置锁屏时,字体下方显示的一个文字</span></span><br><span class="line">    localNote.alertAction = <span class="string">@"看我"</span>;</span><br><span class="line">    localNote.hasAction = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.4.设置启动图片(通过通知打开的)</span></span><br><span class="line">    localNote.alertLaunchImage = <span class="string">@"../Documents/1.jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.5.设置通过到来的声音</span></span><br><span class="line">    localNote.soundName = <span class="built_in">UILocalNotificationDefaultSoundName</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.6.设置应用图标左上角显示的数字</span></span><br><span class="line">    localNote.applicationIconBadgeNumber = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.7.设置一些额外的信息</span></span><br><span class="line">    localNote.userInfo = @&#123;<span class="string">@"hello"</span> : <span class="string">@"how are you"</span>, <span class="string">@"msg"</span> : <span class="string">@"success"</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.执行通知</span></span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:localNote];</span><br></pre></td></tr></table></figure><p>这里要说一点，就是iOS系统限制了注册本地推送的数量，最大的注册量为64条。</p><h3 id="接收推送"><a href="#接收推送" class="headerlink" title="接收推送"></a><strong>接收推送</strong></h3><ul><li>应用在前台或后台，未被杀死时。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序处于前台或后台时调用</span></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveLocalNotification:(<span class="built_in">UILocalNotification</span> *)notification&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"333这里被调用"</span>);</span><br><span class="line">    <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc]initWithTitle:<span class="string">@"Title"</span> message:<span class="string">@"程序在前台或后台，未被杀死，点击通知栏调用"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"cancel"</span> otherButtonTitles:<span class="string">@"ok"</span>, <span class="literal">nil</span>];</span><br><span class="line">    [alert show];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序已被杀死时</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (launchOptions[<span class="built_in">UIApplicationLaunchOptionsLocalNotificationKey</span>]) &#123;</span><br><span class="line">        <span class="comment">//添加处理代码</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"666这里被调用"</span>);</span><br><span class="line">        <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc]initWithTitle:<span class="string">@"Title"</span> message:<span class="string">@"程序已被杀死，点击通知栏调用"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"cancel"</span> otherButtonTitles:<span class="string">@"ok"</span>, <span class="literal">nil</span>];</span><br><span class="line">        [alert show];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iOS-10之后"><a href="#iOS-10之后" class="headerlink" title="iOS 10之后"></a><strong>iOS 10之后</strong></h2><p>先导入这个东西<code>#import &lt;UserNotifications/UserNotifications.h&gt;</code></p><h3 id="注册通知-1"><a href="#注册通知-1" class="headerlink" title="注册通知"></a><strong>注册通知</strong></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 UNUserNotificationCenter 来管理通知</span></span><br><span class="line">    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    <span class="comment">//监听回调事件</span></span><br><span class="line">    center.delegate = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//iOS 10 使用以下方法注册，才能得到授权</span></span><br><span class="line">    [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionSound + UNAuthorizationOptionBadge)</span><br><span class="line">                          completionHandler:^(<span class="built_in">BOOL</span> granted, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">                              <span class="comment">// Enable or disable features based on authorization.</span></span><br><span class="line">                          &#125;];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送通知-1"><a href="#发送通知-1" class="headerlink" title="发送通知"></a><strong>发送通知</strong></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 UNUserNotificationCenter 来管理通知</span></span><br><span class="line">    UNUserNotificationCenter* center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需创建一个包含待通知内容的 UNMutableNotificationContent 对象，注意不是 UNNotificationContent ,此对象为不可变对象。</span></span><br><span class="line">    UNMutableNotificationContent* content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    content.title = [<span class="built_in">NSString</span> localizedUserNotificationStringForKey:<span class="string">@"本地推送Title"</span> arguments:<span class="literal">nil</span>];</span><br><span class="line">    content.body = [<span class="built_in">NSString</span> localizedUserNotificationStringForKey:<span class="string">@"本地推送Body"</span>     arguments:<span class="literal">nil</span>];</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在 设定时间 后推送本地推送</span></span><br><span class="line">    UNTimeIntervalNotificationTrigger* trigger = [UNTimeIntervalNotificationTrigger</span><br><span class="line">                                                  triggerWithTimeInterval:<span class="number">5</span> repeats:<span class="literal">NO</span>];</span><br><span class="line">    </span><br><span class="line">    UNNotificationRequest* request = [UNNotificationRequest requestWithIdentifier:<span class="string">@"FiveSecond"</span></span><br><span class="line">                                                                          content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加推送成功后的处理！</span></span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><h3 id="通知处理"><a href="#通知处理" class="headerlink" title="通知处理"></a><strong>通知处理</strong></h3><p>实现<code>UNUserNotificationCenterDelegate</code>代理方法:</p><ul><li>第一个代理方法：</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(<span class="keyword">void</span> (^)(UNNotificationPresentationOptions))completionHandler&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理完成后条用 completionHandler ，用于指示在前台显示通知的形式</span></span><br><span class="line">    completionHandler(UNNotificationPresentationOptionSound);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法中的那句话就是，当应用在前台的时候，收到本地通知，是用什么方式来展现。系统给了三种形式：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, UNNotificationPresentationOptions) &#123;</span><br><span class="line">    UNNotificationPresentationOptionBadge   = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</span><br><span class="line">    UNNotificationPresentationOptionSound   = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>),</span><br><span class="line">    UNNotificationPresentationOptionAlert   = (<span class="number">1</span> &lt;&lt; <span class="number">2</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二个代理方法：</li></ul><p>这个方法是在后台或者程序被杀死的时候，点击通知栏调用的，在前台的时候不会被调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(<span class="keyword">void</span>(^)())completionHandler&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc]initWithTitle:<span class="string">@"Title"</span> message:<span class="string">@"message"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"cancel"</span> otherButtonTitles:<span class="string">@"ok"</span>, <span class="literal">nil</span>];</span><br><span class="line">    [alert show];</span><br><span class="line">    </span><br><span class="line">    completionHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS 推送 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 本地推送 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS UITableView的一些琐碎</title>
      <link href="/2017/04/13/handleUITableView/"/>
      <url>/2017/04/13/handleUITableView/</url>
      <content type="html"><![CDATA[<p>表格UITableView基本上开发中应用最常用的控件之一了，关于tableview你又了解多少呢，反正我是只知道一些常规的用法，现在把之前写过的项目中应用到的一些小细节总结一下。<br><a id="more"></a></p><h1 id="cell分割线"><a href="#cell分割线" class="headerlink" title="cell分割线"></a><strong>cell分割线</strong></h1><p>这个不知道是不是我自己的问题，第一次遇到要将cell分割线与屏幕边缘没有间距的需求时，试了好多方法！</p><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a><strong>第一种方法</strong></h2><p>下面的这个在Objective-C里写了没有什么效果，但在Swift中可以完美执行，我不知道是不是我一个人的问题。贴出来这个方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.separatorInset = <span class="built_in">UIEdgeInsetsZero</span>;</span><br></pre></td></tr></table></figure><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a><strong>第二种方法</strong></h2><p>这个方法是在论坛里看到的，试了试，可以的。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</span><br><span class="line"></span><br><span class="line">    cell.separatorInset = <span class="built_in">UIEdgeInsetsZero</span>;</span><br><span class="line">    cell.layoutMargins = <span class="built_in">UIEdgeInsetsZero</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tableView的这个代理方法是在cell将要出现在屏幕的时候调用。但是这种方法和第一种方法有个什么问题呢？就是不能将<code>tableView.separatorStyle</code>设置为<code>UITableViewCellSeparatorStyleNone</code>,这样就导致了如果cell的个数不足以充满屏幕的话，会在cell的底部看到空余的cell分割线，这对于我这个强迫症是不能忍的，当然了也有解决办法，就是添加一句：<code>tableView.tableFooterView = [UIView new];</code>就OK了。</p><h2 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a><strong>第三种方法</strong></h2><p>自从在oc中知道第一种方法不能用之后，基本上我都在用这种方法，就是在自定义的cell里重新画线。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> drawRect:rect];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, [<span class="built_in">UIColor</span> clearColor].CGColor);</span><br><span class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context, [<span class="built_in">UIColor</span> colorWithRed:<span class="number">225.0</span>/<span class="number">255.0</span> green:<span class="number">225.0</span>/<span class="number">255.0</span> blue:<span class="number">225.0</span>/<span class="number">255.0</span> alpha:<span class="number">1.0</span>].CGColor);</span><br><span class="line">    <span class="built_in">CGContextStrokeRect</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, SCREEN_WIDTH, <span class="number">0.5</span>));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context, [<span class="built_in">UIColor</span> colorWithRed:<span class="number">225.0</span>/<span class="number">255.0</span> green:<span class="number">225.0</span>/<span class="number">255.0</span> blue:<span class="number">225.0</span>/<span class="number">255.0</span> alpha:<span class="number">1.0</span>].CGColor);</span><br><span class="line">    <span class="built_in">CGContextStrokeRect</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, rect.size.height<span class="number">-0.5</span>, SCREEN_WIDTH, <span class="number">0.5</span>));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新绘制的话，可以设置分割线的颜色，长度，高度。</p><h1 id="卡片式cell"><a href="#卡片式cell" class="headerlink" title="卡片式cell"></a><strong>卡片式cell</strong></h1><p>就是下面这种效果：</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-d29da2b87b099b3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="卡片式cell"></p><p>实现这种效果我已知的有三种效果：</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a><strong>第一种</strong></h2><p>通过设置<code>cell</code>的<code>contentView</code>来间接实现，在<code>cell</code>的<code>contentView</code>的顶部或者底部留下一定的间距，这样就会有<code>cell</code>间就有间距的效果。但是这种方式在<code>cell</code>有点击效果的时候，会很明显的看出有分层，因为这时候<code>cell</code>是被点击的，<code>contentView</code>都会有系统点击的阴影效果。这种方式在<code>cell</code>左滑删除，置顶等操作的时候，左滑出的视图会高出一部分（左滑显示出的高度=（cell的高度-留下的间距高度）+ 留下的间距高度），很显然这种方式有致命缺陷。</p><p><strong>建议还是不要第一种方法</strong></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a><strong>第二种</strong></h2><p>通过分组的方式间接的实现，每组的Header可以当做是cell之间的间距，每组中只有一个cell：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView &#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125; </span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是呢，这还是会出现一个问题，因为系统默认分组的时候每组的Header会停留在tableview的顶部，这要怎么处理呢？网上也有一种解决办法:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (scrollView == <span class="keyword">self</span>.tableView) &#123; </span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> sectionHeaderHeight = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (scrollView.contentOffset.y &lt;= sectionHeaderHeight &amp;&amp; scrollView.contentOffset.y &gt;= <span class="number">0</span>) &#123; </span><br><span class="line"></span><br><span class="line">scrollView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-scrollView.contentOffset.y, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (scrollView.contentOffset.y &gt;= sectionHeaderHeight) &#123; </span><br><span class="line"></span><br><span class="line">scrollView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-sectionHeaderHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方式是通过scroll偏移量来监听和改变tableview的contentInset，因为只要UITableView在滚动就一直在运行，不是很好。</p><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a><strong>第三种</strong></h2><p>重写cell的setFrame方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line"></span><br><span class="line">    frame.origin.x = <span class="number">15</span>;</span><br><span class="line">    frame.size.width -= <span class="number">2</span> * frame.origin.x;</span><br><span class="line">    frame.size.height -= <span class="number">15</span>;</span><br><span class="line">    frame.origin.y += <span class="number">10</span>;</span><br><span class="line">    [<span class="keyword">super</span> setFrame:frame];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式看上去很优雅，其实也有缺点，就是不适合有编辑的情况，因为在编辑的时候会不停调用setFrame方法，导致错乱，此时建议使用上面的第二种方案。</p>]]></content>
      
      <categories>
          
          <category> iOS 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UItableView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 常用操作之文件操作</title>
      <link href="/2017/04/13/fileOperations/"/>
      <url>/2017/04/13/fileOperations/</url>
      <content type="html"><![CDATA[<p>在项目开发中，不可避免的会遇到将一些东西存到本地，或者在本地创建新的文件或文件夹，特地在此总结了一下。</p><a id="more"></a><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a><strong>文件操作</strong></h1><h2 id="获取Documents文件夹路径"><a href="#获取Documents文件夹路径" class="headerlink" title="获取Documents文件夹路径"></a><strong>获取Documents文件夹路径</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  获取Documents文件夹路径</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  @return 文件夹路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)getDocumentsFolderPath&#123;</span><br><span class="line"><span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line"><span class="keyword">return</span> [paths objectAtIndex:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取Documents文件路径"><a href="#获取Documents文件路径" class="headerlink" title="获取Documents文件路径"></a><strong>获取Documents文件路径</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  获取Documents文件路径</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  @param fileName 文件名称</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  @return 文件路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)getDocumentsFilePath:(<span class="built_in">NSString</span> *)fileName</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> [[<span class="keyword">self</span> getDocumentsFolderPath] stringByAppendingPathComponent:fileName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取一个目录所占的空间大小"><a href="#获取一个目录所占的空间大小" class="headerlink" title="获取一个目录所占的空间大小"></a><strong>获取一个目录所占的空间大小</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  获取一个目录所占的空间大小</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  @param filePath 文件目录路径</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  @return 目录空间大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="keyword">long</span> <span class="keyword">long</span>)fileSizeAtPath:(<span class="built_in">NSString</span>*) filePath&#123;</span><br><span class="line"><span class="built_in">NSFileManager</span>* manager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line"><span class="keyword">if</span> ([manager fileExistsAtPath:filePath])&#123;</span><br><span class="line"><span class="keyword">return</span> [[manager attributesOfItemAtPath:filePath error:<span class="literal">nil</span>] fileSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件是否存在"><a href="#文件是否存在" class="headerlink" title="文件是否存在"></a><strong>文件是否存在</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*文件是否存在*/</span>  </span><br><span class="line">+ (<span class="built_in">BOOL</span>)isFileExisted:(<span class="built_in">NSString</span> *)fileName&#123;  </span><br><span class="line"><span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];  </span><br><span class="line"><span class="keyword">if</span>(![fileManager fileExistsAtPath:[<span class="keyword">self</span> getFilePath:fileName]])&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建指定名字的文件"><a href="#创建指定名字的文件" class="headerlink" title="创建指定名字的文件"></a><strong>创建指定名字的文件</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*创建指定名字的文件*/</span>  </span><br><span class="line">+ (<span class="built_in">BOOL</span>)createFileAtPath:(<span class="built_in">NSString</span> *)fileName&#123;  </span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);  </span><br><span class="line"><span class="built_in">NSString</span> *path = [[array objectAtIndex:<span class="number">0</span>] stringByAppendingPathComponent:fileName];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"-----%@:"</span>, path);  </span><br><span class="line"><span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];  </span><br><span class="line"><span class="keyword">if</span>(![fileManager fileExistsAtPath:path])&#123;  </span><br><span class="line">[fileManager createFileAtPath:path contents:<span class="literal">nil</span> attributes:<span class="literal">nil</span>];  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建指定名字的文件夹"><a href="#创建指定名字的文件夹" class="headerlink" title="创建指定名字的文件夹"></a><strong>创建指定名字的文件夹</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*创建指定名字的文件夹*/</span>  </span><br><span class="line">+ (<span class="built_in">BOOL</span>)createDirectoryAtPath:(<span class="built_in">NSString</span> *)fileName&#123;  </span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);  </span><br><span class="line"><span class="built_in">NSString</span> *path = [[array objectAtIndex:<span class="number">0</span>] stringByAppendingPathComponent:fileName];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"-----%@:"</span>, path);  </span><br><span class="line"><span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];  </span><br><span class="line"><span class="keyword">if</span>(![fileManager fileExistsAtPath:path])&#123;  </span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;  </span><br><span class="line">[fileManager createDirectoryAtPath:path withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:&amp;error];  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)deleteFileAtPath:(<span class="built_in">NSString</span> *)fileName&#123;  </span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);  </span><br><span class="line"><span class="built_in">NSString</span> *path = [[array objectAtIndex:<span class="number">0</span>] stringByAppendingPathComponent:fileName];  </span><br><span class="line"><span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(![fileManager fileExistsAtPath:path])&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">[fileManager removeItemAtPath:path error:<span class="literal">nil</span>];  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NSUserDefaults"><a href="#NSUserDefaults" class="headerlink" title="NSUserDefaults"></a><strong>NSUserDefaults</strong></h1><p><strong>保存和取出</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">保存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param value &lt;#value description#&gt;</span></span><br><span class="line"><span class="comment">@param key &lt;#key description#&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+(<span class="keyword">void</span>)saveValue:(<span class="keyword">id</span>) value forKey:(<span class="built_in">NSString</span> *)key&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line">[userDefaults setObject:value forKey:key];</span><br><span class="line">[userDefaults synchronize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">取出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param key &lt;#key description#&gt;</span></span><br><span class="line"><span class="comment">@return &lt;#return value description#&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+(<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line"><span class="keyword">return</span> [userDefaults objectForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">根据key取出NSString的value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param key &lt;#key description#&gt;</span></span><br><span class="line"><span class="comment">@return &lt;#return value description#&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+(<span class="keyword">id</span>)StringForKey:(<span class="built_in">NSString</span> *)key&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line"><span class="keyword">return</span> [userDefaults stringForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">根据key取出Bool型的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param key &lt;#key description#&gt;</span></span><br><span class="line"><span class="comment">@return &lt;#return value description#&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+(<span class="built_in">BOOL</span>)boolValueForKey:(<span class="built_in">NSString</span> *)key&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line"><span class="keyword">return</span> [userDefaults boolForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">保存Bool型的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@param value value</span></span><br><span class="line"><span class="comment">@param key key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+(<span class="keyword">void</span>)saveBoolValue:(<span class="built_in">BOOL</span>)value forKey:(<span class="built_in">NSString</span> *)key&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line">[userDefaults setBool:value forKey:key];</span><br><span class="line">[userDefaults synchronize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">获取userDefaults存储的所有信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+(<span class="keyword">void</span>)printAllUserDefault&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line"><span class="built_in">NSDictionary</span> *dic = [userDefaults dictionaryRepresentation];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,dic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 本地存储 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swiftOptional</title>
      <link href="/2017/04/07/swiftOptional/"/>
      <url>/2017/04/07/swiftOptional/</url>
      <content type="html"><![CDATA[<p>学习<code>swift</code>的过程中不可避免的会遇到<code>？</code>或<code>！</code>这种东西，这就是今天要说的可选型（<code>Optional</code>)了。大家都知道，<code>swift</code>是苹果官方推出的一款较于<code>Objective-C</code>安全性较高的语言，而可选型就是<code>swift</code>最为突出的特性之一。</p><a id="more"></a><h1 id="Optional是什么？"><a href="#Optional是什么？" class="headerlink" title="Optional是什么？"></a><strong>Optional是什么？</strong></h1><p><code>Optional</code> 是 <code>Swift</code> 新加入的类型。可选型的意思简单理解是：有值得时候就有值，无值的时候就是 <code>nil</code> 。<code>Swift</code> 中的 <code>nil</code> 和其他语言中的 <code>nil</code> 还有些不一样，<code>nil</code> 自己本身就是一种类型，没有就是 <code>nil</code> ，是和其他类型严格区分开的。<br>可选型的定义很简单：类型 + ? 。比如  <code>String?</code>、<code>Int?</code>、<code>Float?</code> 等，这里需要注意的是 <code>String?</code> 和 <code>String</code> 是完全不同的两个类型，前者是 <code>String</code> 类型的可选型，后者是 <code>String</code> 类型，注意区分。举个例子，在 OC 中我们可以这样写:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *name = <span class="string">@"jack"</span>;</span><br><span class="line">name = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><p>而在swift中如果像下面这种写法是会报错的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种写法是会报错的，说的是 nil 是不可以分配给 String 类型的，这也说明在 swift 中 nil 是和其他类型严格区分的。</span></span><br><span class="line"><span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"jack"</span></span><br><span class="line">name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>改为可选型之后就可以了，像下面这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"name"</span></span><br><span class="line">name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>可选型，顾名思义就是可以选择，比如 <code>String?</code> 的意思就是可以在 <code>String</code> 和 <code>nil</code> 之间选择，可以是 <code>String</code> 也可以是 <code>nil</code> 。如果一个变量定义成 <code>String</code>，那么这个变量就会是 <code>String</code> 类型，而不可能是<code>nil</code>。</p><p>还有一点需要注意的是声明可选型必须是显示的声明也就是必须是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>而不能是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>这样，因为 Swift 在做类型判断的时候无法判断 name 到底是 String 类型的可选型还是其他类型的可选型，因此会导致编译错误。</p><blockquote><p>Tips: 当然枚举类型的写法还可以如</p></blockquote><blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> name: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="type">Optional</span>.<span class="type">Some</span>(<span class="string">"Loveway"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这样，只不过我们一般都用</p></blockquote><blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> name: <span class="type">String</span>? = <span class="literal">nil</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这样的简写。</p></blockquote><h1 id="Optional的解包"><a href="#Optional的解包" class="headerlink" title="Optional的解包"></a><strong>Optional的解包</strong></h1><p>可选型是不能够被直接使用的（因为 Swift 是类型安全的，可选型的值又可能会是 nil，如果不做处理可能导致程序 crash），如果我们想使用可选型的值，那么在这之前我们需要做的一项工作就是：解包（unwarp）！</p><ul><li><strong>1.强制解包</strong></li></ul><p>所谓的强制解包意思就是我知道这个类型是可选型，但是在我的程序执行到这里的时候我可以保证它是有值得，所以我要在这里使用它。具体表现形式就是在可选型后面加个 <code>!</code>，如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"jack"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My name is "</span> + name!)</span><br></pre></td></tr></table></figure><p>但是这样的解包是不安全，因为你不知道什么时候你的这个可选型就会变成 nil，如果我们代码非常多的话，一不小心为 nil了，可能会导致程序崩溃。这个时候我们会想到一种方法：判空！如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> name != <span class="literal">nil</span> &#123; </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"My name is "</span> + name!)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写似乎是没有什么问题了，但是需要注意的是，你在判断非 nil 的作用域内使用 name 的时候还必须把 ! 带上，这样代码比较多的时候还是比较麻烦。于是我们可以使用下面这种方式:</p><ul><li><strong>2.使用 <code>if let</code> 解包</strong></li></ul><p>如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"jack"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">"My name is "</span> + name)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种解包方式可以保证 name 是解包过的，不会再是 nil 这种情况，其实逻辑是和上面做非空判断一样的。当然你把  <code>let</code> 换成 <code>var</code> 也是可以的，效果是一样的，只不过我们一般要用的是解包后的值，而不会去改变它，所以平常使用中一般都是用  <code>if let</code> 。</p><p>同时  <code>if let</code> 可以同时一次性解包多个可选型，用  <code>,</code> 隔开，使语句简洁，如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span>? = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name, age = age &#123;</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">"My name is "</span> + name + <span class="string">"My age is"</span> + <span class="string">"\(age)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，既然这里使用的是 if ，那么同样我们可以如下这样用，来进行进一步的判断筛选:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span>? = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name, age = age <span class="keyword">where</span> age == <span class="number">18</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"My name is \(name), age is \(String(age))"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可选链式调用（Optional-Chaining）"><a href="#可选链式调用（Optional-Chaining）" class="headerlink" title="可选链式调用（Optional Chaining）"></a><strong>可选链式调用（Optional Chaining）</strong></h1><p>可选链式调用（Optional Chaining）是一种可以在当前值可能为 nil 的可选值上请求和调用属性、方法及下标的方法。如果可选值有值，那么调用就会成功，如果可选值是 nil ，那么调用将返回 nil。多个调用可以连接在一起形成一个调用链，如果其中任何一个节点为 nil ，整个调用链都会失败，即返回 nil 。</p><p>下面我们就来举个例子具体说明可选链，如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line">    <span class="built_in">print</span>(name.uppercaseString)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来解包 name ，如果有值就打印出 name 的大写，如果没有就输出 name is nil ，其实上面这段代码完全等同于:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name?.uppercaseString</span><br></pre></td></tr></table></figure><p>上面这句代码的意思就是如果可选型变量 name 有值，那么就对 name 进行解包，并得到 name 的uppercaseString 值，如果没有，那么这句代码就会返回一个 nil 。这样就符合 Swift 的类型安全，完全是没有问题的。但是如果你写成:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name!.uppercaseString</span><br></pre></td></tr></table></figure><p>也是可以的，不过不安全，因为如果 name 没有值，你进行强制解包，就会报错。</p><p>所以我们以后可能会用到类似于 person?.name?.uppercaseString 这样的一层层解包的，这种就是可选链。</p><h1 id="Nil-Coalescing-Operator（空合运算符）"><a href="#Nil-Coalescing-Operator（空合运算符）" class="headerlink" title="Nil Coalescing Operator（空合运算符）"></a><strong>Nil Coalescing Operator（空合运算符）</strong></h1><p>如上，如果我们想把解包后的值存起来的话，可以这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newName = name == <span class="literal">nil</span> ? <span class="string">"no name"</span> : name!</span><br></pre></td></tr></table></figure><p>上面代码的意思就是如果 name 为 nil ，newName 就是 “no name”，否则 newName 就是 name!（name的解包）。其实 Swift 为我们提供了更简洁的语法，如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newName2 = name ?? <span class="string">"no name"</span></span><br></pre></td></tr></table></figure><p>上面代码的意思就是 name 如果有值 newName2 的值就是 name! ,否则就是 no name 。这里需要注意的是 ??是空合运算符，这样写的可阅读性强，比较简洁。</p><p>当然关于 ?? 远不止这些，有兴趣的同学可以看 <a href="http://www.jianshu.com/p/3ede1ec31351" target="_blank" rel="noopener">聊聊swift语言中的“??”</a> 这篇文章。</p><h1 id="隐式可选型"><a href="#隐式可选型" class="headerlink" title="隐式可选型"></a><strong>隐式可选型</strong></h1><p>上面我们都知道了，创建一个显示可选型是: 类型 + <code>?</code>。这里创建隐式可选型的就是： 类型 + <code>!</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>! = <span class="string">"loveway"</span></span><br></pre></td></tr></table></figure><p>这里可能有的童鞋会疑惑，已经有了显示的可选型，为什么还需要有隐式的可选型。这里其实隐式的可选型也是有一定作用的。比如你有一个变量，声明为隐式的可选型（!），它的作用就是，当你这个类没有被初始化的时候他是没有值的，但是当你这个类初始化以后，你可以确保他是有值的，所以这里声明为隐式的可选型，而不是显示的。同样需要注意的是隐式的可选型也是可选型，如果你需要用它的值，你也是要进行判断的。如果不进行判断而直接使用，可能会造成不可预料的后果！<br>差不多可选型就到这里了，如果还有什么遗漏，欢迎大家指正！</p><p>转自<a href="http://www.jianshu.com/p/1c26b364e0e6" target="_blank" rel="noopener">重读 Swift 之一：Optional（可选型）</a></p>]]></content>
      
      <categories>
          
          <category> swift学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谈谈 Swift 中的 map 和 flatMap</title>
      <link href="/2017/04/06/swiftMapAndFlatMap/"/>
      <url>/2017/04/06/swiftMapAndFlatMap/</url>
      <content type="html"><![CDATA[<p><code>map</code> 和 <code>flatMap</code> 是 <code>Swift</code> 中两个常用的函数，它们体现了 <code>Swift</code> 中很多的特性。对于简单的使用来说，它们的接口并不复杂，但它们内部的机制还是非常值得研究的，能够帮助我们够好的理解 <code>Swift</code> 语言。</p><a id="more"></a><h1 id="map-简介"><a href="#map-简介" class="headerlink" title="map 简介"></a><strong>map 简介</strong></h1><p>首先，咱们说说 map 函数如何使用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> result = numbers.<span class="built_in">map</span> &#123; $<span class="number">0</span> + <span class="number">2</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment">// [3,4,5,6]</span></span><br></pre></td></tr></table></figure><p><code>map</code> 方法接受一个闭包作为参数， 然后它会遍历整个 <code>numbers</code> 数组，并对数组中每一个元素执行闭包中定义的操作。 相当于对数组中的所有元素做了一个映射。 比如咱们这个例子里面的闭包是讲所有元素都加 <code>2</code> 。 这样它产生的结果数据就是 <code>[3,4,5,6]</code>。</p><p>初步了解之后，我们来看一下 <code>map</code> 的定义：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(@noescape transform: <span class="params">(<span class="keyword">Self</span>.Generator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>]</span><br></pre></td></tr></table></figure><p>咱们抛开一些和关键逻辑无关的修饰符 <code>@noescape</code>,<code>throws</code> 这些，在整理一下就是这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(transform: <span class="params">(<span class="keyword">Self</span>.Generator.Element)</span></span></span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>]</span><br></pre></td></tr></table></figure><p><code>map</code> 函数接受一个闭包， 这个闭包的定义是这样的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">Self</span>.<span class="type">Generator</span>.<span class="type">Element</span>) -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure><p>它接受 <code>Self.Generator.Element</code> 类型的参数， 这个类型代表数组中当前元素的类型。 而这个闭包的返回值，是可以和传递进来的值不同的。 比如我们可以这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringResult = numbers.<span class="built_in">map</span> &#123; <span class="string">"No. \($0)"</span> &#125;</span><br><span class="line"><span class="comment">// ["No. 1", "No. 2", "No. 3", "No. 4"]</span></span><br></pre></td></tr></table></figure><p>这次我们在闭包装把传递进来的数字拼接到一个字符串中， 然后返回一个组数， 这个数组中包含的数据类型，就是我们拼接好的字符串。</p><p>这就是关于 <code>map</code> 的初步了解， 我们继续来看 <code>flatMap</code>。</p><h1 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a><strong>flatMap</strong></h1><p><code>map</code> 可以对一个集合类型的所有元素做一个映射操作。 那么 <code>flatMap</code> 呢？</p><p>让我们来看一个 <code>flatMap</code> 的例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = numbers.flatMap &#123; $<span class="number">0</span> + <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment">// [3,4,5,6]</span></span><br></pre></td></tr></table></figure><p>我们对同样的数组使用 <code>flatMap</code> 进行处理， 得到了同样的结果。 那 <code>flatMap</code> 和 <code>map</code> 到底有什么区别呢？</p><p>咱们再来看另一个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbersCompound = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="keyword">var</span> res = numbersCompound.<span class="built_in">map</span> &#123; $<span class="number">0</span>.<span class="built_in">map</span>&#123; $<span class="number">0</span> + <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="comment">// [[3, 4, 5], [6, 7, 8]]</span></span><br><span class="line"><span class="keyword">var</span> flatRes = numbersCompound.flatMap &#123; $<span class="number">0</span>.<span class="built_in">map</span>&#123; $<span class="number">0</span> + <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="comment">// [3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>这里就看出差别了。 对于二维数组， <code>map</code> 和 <code>flatMap</code> 的结果就不同了。 我们先来看第一个调用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = numbersCompound.<span class="built_in">map</span> &#123; $<span class="number">0</span>.<span class="built_in">map</span>&#123; $<span class="number">0</span> + <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="comment">// [[3, 4, 5], [6, 7, 8]]</span></span><br></pre></td></tr></table></figure><p><code>numbersCompound.map { ... }</code> 这个调用实际上是遍历了这里两个数组元素 <code>[1,2,3]</code> 和 <code>[4,5,6]</code>。 因为这两个元素依然是数组，所以我们可以对他们再次调用 <code>map</code> 函数：<code>$0.map{ $0 + 2 }</code>。 这个内部的调用最终将数组中所有的元素加 <code>2</code>。</p><p>再来看看 <code>flatMap</code> 的调用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flatRes = numbersCompound.flatMap &#123; $<span class="number">0</span>.<span class="built_in">map</span>&#123; $<span class="number">0</span> + <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="comment">// [3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p><code>flatMap</code> 依然会遍历数组的元素，并对这些元素执行闭包中定义的操作。 但唯一不同的是，它对最终的结果进行了所谓的 “降维” 操作。 本来原始数组是一个二维的， 但经过 <code>flatMap</code> 之后，它变成一维的了。</p><p><code>flatMap</code> 是如何做到的呢，它的原理是什么，为什么会存在这样一个函数呢？ 相信此时你脑海中肯定会浮现出类似的问题。</p><p>下面咱们再来看一下 <code>flatMap</code> 的定义, 还是抛去 <code>@noescape</code>, <code>rethrows</code> 这些无关逻辑的关键字：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;T&gt;<span class="params">(transform: <span class="params">(<span class="keyword">Self</span>.Generator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>?) -&gt; [<span class="type">T</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;S : SequenceType&gt;<span class="params">(transform: <span class="params">(<span class="keyword">Self</span>.Generator.Element)</span></span></span> -&gt; <span class="type">S</span>) -&gt; [<span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span>]</span><br></pre></td></tr></table></figure><p>和 <code>map</code> 不同， <code>flatMap</code> 有两个重载。 参照我们刚才的示例， 我们调用的其实是第二个重载：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;S : SequenceType&gt;<span class="params">(transform: <span class="params">(<span class="keyword">Self</span>.Generator.Element)</span></span></span> -&gt; <span class="type">S</span>) -&gt; [<span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span>]</span><br></pre></td></tr></table></figure><p><code>flatMap</code> 的闭包接受的是数组的元素，但返回的是一个 <code>SequenceType</code> 类型，也就是另外一个数组。 这从我们刚才这个调用中不难看出：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbersCompound.flatMap &#123; $<span class="number">0</span>.<span class="built_in">map</span>&#123; $<span class="number">0</span> + <span class="number">2</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>我们传入给 <code>flatMap</code> 一个闭包 <code>$0.map{ $0 + 2 }</code> , 这个闭包中，又对 <code>$0</code> 调用了 <code>map</code> 方法， 从 <code>map</code> 方法的定义中我们能够知道，它返回的还是一个集合类型，也就是 <code>SequenceType</code>。 所以我们这个 <code>flatMap</code> 的调用对应的就是第二个重载形式。</p><p>那么为什么 <code>flatMap</code> 调用后会对数组降维呢？ 我们可以从它的源码中窥探一二（<code>Swift</code> 不是开源了吗~）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;S : Sequence&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @noescape transform: <span class="params">($&#123;GElement&#125;)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">S</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">S</span>.$&#123;<span class="type">GElement</span>&#125;] &#123;</span><br><span class="line">    <span class="keyword">var</span> result: [<span class="type">S</span>.$&#123;<span class="type">GElement</span>&#125;] = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      result.append(contentsOf: <span class="keyword">try</span> transform(element))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是 <code>flatMap</code> 的完整源码了， 它的源码也很简单， 对遍历的每一个元素调用 <code>try transform(element)</code>。 <code>transform</code> 函数就是我们传递进来的闭包。</p><p>然后将闭包的返回值通过 <code>result.append(contentsOf:)</code> 函数添加到 <code>result</code> 数组中。</p><p>那我们再来看一下 <code>result.append(contentsOf:)</code> 都做了什么， 它的文档定义是这样：</p><blockquote><p>Append the elements of newElements to self.</p></blockquote><p>简单说就是将一个集合中的所有元素，添加到另一个集合。 还以我们刚才这个二维数组为例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbersCompound = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="keyword">var</span> flatRes = numbersCompound.flatMap &#123; $<span class="number">0</span>.<span class="built_in">map</span>&#123; $<span class="number">0</span> + <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="comment">// [3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p><code>flatMap</code> 首先会遍历这个数组的两个元素 <code>[1,2,3]</code> 和 <code>[4,5,6]</code>， 因为这两个元素依然是数组， 所以我们可以对他们再进行 <code>map</code> 操作： <code>$0.map{ $0 + 2 }</code>。</p><p>这样， 内部的 <code>$0.map{ $0 + 2 }</code> 调用返回值类型还是数组， 它会返回 <code>[3,4,5]</code> 和 <code>[6,7,8]</code>。</p><p>然后， <code>flatMap</code> 接收到内部闭包的这两个返回结果， 进而调用 <code>result.append(contentsOf:)</code> 将它们的数组中的内容添加到结果集中，而不是数组本身。</p><p>那么我们最终的调用结果理所当然就应该是 <code>[3, 4, 5, 6, 7, 8]</code> 了。</p><p>仔细想想是不是这样呢\~</p><h1 id="flatMap-的另一个重载"><a href="#flatMap-的另一个重载" class="headerlink" title="flatMap 的另一个重载"></a><strong>flatMap 的另一个重载</strong></h1><p>我们刚才分析了半天， 其实只分析到 <code>flatMap</code> 的一种重载情况， 那么另外一种重载又是怎么回事呢：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;T&gt;<span class="params">(transform: <span class="params">(<span class="keyword">Self</span>.Generator.Element)</span></span></span> -&gt; <span class="type">T</span>?) -&gt; [<span class="type">T</span>]</span><br></pre></td></tr></table></figure><p>从定义中我们看出， 它的闭包接收的是 <code>Self.Generator.Element</code> 类型， 返回的是一个 <code>T?</code> 。 我们都知道，在 <code>Swift</code> 中类型后面跟随一个 <code>?</code>， 代表的是 <code>Optional</code> 值。 也就是说这个重载中接收的闭包返回的是一个 <code>Optional</code> 值。 更进一步来说，就是闭包可以返回 <code>nil</code>。</p><p>我们来看一个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> optionalArray: [<span class="type">String</span>?] = [<span class="string">"AA"</span>, <span class="literal">nil</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>];</span><br><span class="line"><span class="keyword">var</span> optionalResult = optionalArray.flatMap&#123; $<span class="number">0</span> &#125;</span><br><span class="line"><span class="comment">// ["AA", "BB", "CC"]</span></span><br></pre></td></tr></table></figure><p>这样竟然没有报错， 并且 <code>flatMap</code> 的返回结果中， 成功的将原数组中的 <code>nil</code> 值过滤掉了。 再仔细观察，你会发现更多。 使用 <code>flatMap</code> 调用之后， 数组中的所有元素都被解包了， 如果同样使用 <code>print</code> 函数输出原始数组的话， 大概会得到这样的结果:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Optional</span>(<span class="string">"AA"</span>), <span class="literal">nil</span>, <span class="type">Optional</span>(<span class="string">"BB"</span>), <span class="type">Optional</span>(<span class="string">"CC"</span>)]</span><br></pre></td></tr></table></figure><p>而使用 <code>print</code> 函数输出 <code>flatMap</code> 的结果集时，会得到这样的输出：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>]</span><br></pre></td></tr></table></figure><p>也就是说原始数组的类型是 <code>[String?]</code> 而 <code>flatMap</code> 调用后变成了 <code>[String]</code>。 这也是 <code>flatMap</code> 和 <code>map</code> 的一个重大区别。 如果同样的数组，我们使用 <code>map</code> 来调用， 得到的是这样的输出：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Optional</span>(<span class="string">"AA"</span>), <span class="literal">nil</span>, <span class="type">Optional</span>(<span class="string">"BB"</span>), <span class="type">Optional</span>(<span class="string">"CC"</span>)]</span><br></pre></td></tr></table></figure><p>这就和原始数组一样了。 这两者的区别就是这样。 map 函数值对元素进行变换操作。 但不会对数组的结构造成影响。 而 flatMap 会影响数组的结构。再进一步分析之前，我们暂且这样理解。</p><p><code>flatMap</code> 的这种机制，而已帮助我们方便的对数据进行验证，比如我们有一组图片文件名， 我们可以使用 <code>flatMap</code> 将无效的图片过滤掉：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageNames = [<span class="string">"test.png"</span>, <span class="string">"aa.png"</span>, <span class="string">"icon.png"</span>];</span><br><span class="line">imageNames.flatMap&#123; <span class="type">UIImage</span>(named: $<span class="number">0</span>) &#125;</span><br></pre></td></tr></table></figure><p>那么 <code>flatMap</code> 是如何实现过滤掉 <code>nil</code> 值的呢？ 我们还是来看一下源码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @noescape transform: <span class="params">($&#123;GElement&#125;)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>?</span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> result: [<span class="type">T</span>] = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> newElement = <span class="keyword">try</span> transform(element) &#123;</span><br><span class="line">        result.append(newElement)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依然是遍历所有元素，并应用 <code>try transform(element)</code> 闭包的调用， 但关键一点是，这里面用到了 <code>if let</code> 语句， 对那些只有解包成功的元素，才会添加到结果集中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> newElement = <span class="keyword">try</span> transform(element) &#123;</span><br><span class="line">    result.append(newElement)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样， 就实现了我们刚才看到的自动去掉 <code>nil</code> 值的效果了。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a><strong>结尾</strong></h1><p>关于 <code>Swift</code> 中的 <code>map</code> 和 <code>flatMap</code>， 看完这篇内容是不会会对你有所启发呢。 当然， 关于这两个函数我们这里并没有完全讨论完。 它们背后还有着更多的思想。 关于本篇文章的代码，大家还可以来 <code>Github</code> 上面 <a href="https://github.com/swiftcafex/mapAndFlatmap" target="_blank" rel="noopener">参看.</a></p><p>转自：<a href="https://www.swiftcafe.io/2016/03/28/about-map/?utm\_source=tuicool&amp;utm\_medium=referral" target="_blank" rel="noopener">https://www.swiftcafe.io/2016/03/28/about-map/?utm\_source=tuicool&amp;utm\_medium=referral</a></p>]]></content>
      
      <categories>
          
          <category> swift学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> map </tag>
            
            <tag> flatMap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>雨夜</title>
      <link href="/2017/03/31/rainNight/"/>
      <url>/2017/03/31/rainNight/</url>
      <content type="html"><![CDATA[<p>这是一个夜，一个下雨的夜。<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2074437-6b28f7f3cf6cb6db.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="雨夜"></p><p>我喜欢此时此刻的气氛，一个人窝在被窝里，窗外淅淅沥沥的雨滴敲打着窗户上的玻璃，正应了那句话“大珠小珠落玉盘”。房间里很安静，安静的只能听到自己的呼吸声，窗外时不时的传来一声汽车呼啸而过的声音。这种环境，这种氛围，让我觉得很舒服，恰到好处。</p><p>一个人在这种环境下，思想会变得格外的清晰和明朗，会想明白很多一直想不明白的问题。于我自己而言，喜欢黑夜甚于白天。尤其是这样的一个静谧的夜。</p><p><img src="http://upload-images.jianshu.io/upload_images/2074437-245d5be38b96141c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="静谧的夜"></p><p>上海的生活节奏快的可怕，初来乍到之时，手忙脚乱，慌不择路。慢慢的习惯了这种生活，喜欢在一片喧嚣之中觅得一方清幽之所，独处，享受。</p><p>一个人生活，有好处，也有坏处。好处就是可以经常反思自己，可以依靠自己来约束自己。坏处就是缺少与人交流，没有交流，进步就会异常缓慢。就现在来说，我还挺满意自己如今的生活状态，虽说朝九晚五，但也是异常充实，知道每天需要做些什么来填补自己。年龄在一天天的增长，我要做的就是让经历，经验，学识都要与之增长。</p><p>本来说好了，这不是一篇鸡汤文，但写着写着，总想写一些话来安慰或鼓励自己一下。学而不思则罔，思而不学则殆。快节奏的生活中，会思考显得弥足珍贵。我们不要只顾风雨兼程，还要时不时的停下来，审视自己。以人为镜，正己。</p><p>夜，是思绪放飞的时刻。会想到一些人，会想到一些事。想昨天，想明天。想一切能想到的。思想的触角漫无边际，任其四通八达，通向未来。</p><p>窗外的雨还在淅淅沥沥的下着，夜已深。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>极光推送开发环境可以收到,生产环境收不到推送</title>
      <link href="/2017/03/30/jpush/"/>
      <url>/2017/03/30/jpush/</url>
      <content type="html"><![CDATA[<p>首先阐述一下我遇到的问题：</p><p>我们项目连通了极光推送，以前写过的项目也是这样，在开发环境下测试，好使了，但是打包ADHoc时候，就不好使了，<a id="more"></a>当时也没在意，因为网上好多人说，只要测试好使了，证书显示配置成功了（绿灯），那就没问题了。</p><p>　　so，上线，然后上线以后，发现推送功能完全不好使！这就尴尬了，赶紧下架。</p><p>　　因为我们项目使用的是别名推送，使用极光网站推送时候，我使用了广播，别名推送，regID推送，结果 都能收到（开发环境）；然后我在生产环境－－－－－＞再次发送－－－－－＞广播，别名，regID，结果，很显然，别名收不到，这就纠结了，开始查看问题吧。</p><p>　　经过两天的爬坑，终于找到了问题所在，也正在积极解决。在这里再次感谢极光官方两位大牛，如果没有你们的帮忙，我想我还会纠结好久。    <a href="https://community.jiguang.cn/users/Lris/activity" target="_blank" rel="noopener">Lris12</a>            <a href="https://community.jiguang.cn/users/helperhaps/activity" target="_blank" rel="noopener">Helperhaps</a> </p><p>　　好了，废话少说，阐述问题跟代码</p><hr><p>　　初次发现这个问题的时候，首先排查的就是证书配置，这里再次建议大家好好仔细的看看开发文档，因为很多错误都是细节处不注意造成的，<a href="https://docs.jiguang.cn/jpush/client/iOS/ios_sdk/" target="_blank" rel="noopener">附上开发文档地址</a>。因为这个项目是接手别人已经做得差不多的，我就负责收尾，所以，证书这方面我会优先查看，是否错误。</p><p>　　在developer.apple.com 中，我已经看到</p><p><img src="http://upload-images.jianshu.io/upload_images/3902605-0a2777d161ddf364.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="developer.apple.com"></p><p>　　很明显，开发环境的证书跟生产环境的证书，都已经配置完成，那么证书是没有问题的，下面我们看看极光官网的配置：</p><p><img src="http://upload-images.jianshu.io/upload_images/3902605-11a65f1d008826fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="极光官网的配置"></p><p>　　也是已验证，这就奇怪了，到这，我表示，可能是代码出错了，好吧，我们来看代码。</p><p><img src="http://upload-images.jianshu.io/upload_images/3902605-8d52a21aec08c89d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>　　别名设置，相信在官方文档中大家都明白怎么写。反复查看文档，我发现并没有任何问题这么写。经过跟  Lris12 大神的交流，觉得很可能是因为网络原因，在注册极光还没有返回成功的时候，就绑定别名，导致regID跟别名没有绑定成功。</p><p>　　解决方法：</p><p>　　添加5个监听，在监听到extern NSString * const kJPFNetworkDidLoginNotification; // 登录成功，之后再设置别名。</p><p>　　<a href="https://docs.jiguang.cn/jpush/client/iOS/ios_guide_new/#jpush-sdk1" target="_blank" rel="noopener">极光集成指南</a></p><p><img src="http://upload-images.jianshu.io/upload_images/3902605-9f2192a8e364ecc9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p><strong>Ps：这里强烈建议这么写，安全第一 安全第一！！！</strong></p><p>　　这里附上代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class="built_in">NSData</span> *)deviceToken</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSNotificationCenter</span> *defaultCenter = [<span class="built_in">NSNotificationCenter</span> defaultCenter];</span><br><span class="line"></span><br><span class="line">[defaultCenter addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(networkDidReceiveMessage:) name:kJPFNetworkDidLoginNotification object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">[JPUSHService registerDeviceToken:deviceToken];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//通知方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)networkDidReceiveMessage:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line"></span><br><span class="line">[JPUSHService setTags:<span class="literal">nil</span> aliasInbackground:[OpenUDID value]];</span><br><span class="line"></span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1.0</span>f * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">[JPUSHService setTags:<span class="literal">nil</span> alias:[OpenUDID value] fetchCompletionHandle:^(<span class="keyword">int</span> iResCode, <span class="built_in">NSSet</span> *iTags, <span class="built_in">NSString</span> *iAlias)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>//销毁通知：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:kJPFNetworkDidLoginNotification object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　然而，问题依旧没有解决，但是这个时候，我们登录极光官网推送。我在生产环境，再次发送，广播，别名，regID，结果，都收到了！！正当我高兴的时候，发现 api推送依旧收不到！！收不到！！绝望！！</p><p>　　继续排查！！！按照开发文档，设置xcode配置，嗯 ，依旧没用。</p><p>　　这里我重点说一下 ：iOS9 之后 卸载重装后会改变token，所以registrationID会改变，如果你没有用到idfa。如果你的项目使用的是regID推送，那么你要注意，每次更新app，新用户下载app，重新下载app等一系列状况下，regID改变的问题。还有如果注册成功后，会返回，设置成功，有callback为0。这个也要注意下。</p><p>　　好，回归正题。这时候时间已经过去一天半了， 最后我觉得，我所有的代码，配置，证书，环境，都没有问题！再去极光官网看看，到底咋回事。</p><p>　　好吗 这一看 终于发现了问题所在！</p><p><img src="http://upload-images.jianshu.io/upload_images/3902605-313a8945d475fa99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="极光官网"></p><p><img src="http://upload-images.jianshu.io/upload_images/3902605-1f8d59529c776d8d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="极光官网"></p><p>　　大家看没看到，这里写的是推送平台iOS-dev？卧槽！！后台给我推送的居然是开发环境！！果断找后台理论！！！</p><p>　　Lris大神告诉我：「发布版本后无法有效推送」 or 「生产环境下收不到消息」 按以下步骤排查问题： 客户端－－－－＞客户端是否打包证书－－－－＞检查当前环境是否正确－－－－－＞设备里面的手机应用有没有添加/配置这个tag/ 别名－－－＞服务端注意改变环境参数，option的apns_production的值（true：生产）（false开发）。根据客户端环境改变服务端推送环境。环境要一致才能收到推送。</p><p>　　然后我们后台给我发送了一段代码 堵住了我的嘴：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$platform = <span class="string">'android,ios'</span> ;</span><br><span class="line"></span><br><span class="line">$msg_content = json_encode(array(<span class="string">'n_builder_id'</span>=&gt;<span class="number">0</span>, <span class="string">'n_title'</span>=&gt;$n_title, <span class="string">'n_content'</span>=&gt;$n_content,<span class="string">'content-available'</span>=&gt;<span class="number">1</span>,<span class="string">'apns_production'</span>=&gt;<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> jpush($masterSecret,$appkeys);</span><br></pre></td></tr></table></figure><p>　　我标红的位置，人家已经设置了1，为什么还不好用？经过Helperhaps大神的解释，好吧，我懂了！我们后台使用的过期的V2 api。</p><p>　　特别提示：建议不要在客户端里写代码直接调用此 API。因为 Android apk 比较容易破解，别人很容易从客户端代码里找出来调用 JPush Remote API 所需要的保密信息，从而可以模拟到你的身份来发起恶意的推送。</p><p>　　建议的使用方式是：调用 JPush Remote API 的代码放在你自己的应用服务器上。你自己的应用服务器对自己的客户端提供接口来推送消息。具体请参考推聊的作法：示例与代码。</p><p>　　升级到 v3 Push API：建议开发者升级到 v3 版本。此版本会继续支持到 2015 年。至此，这个问题才算是解决（至少对前端来说）。第一次发这样的帖子感觉有点乱 嗯。。。</p><p>　　下次大家在推送上有问题的话。。先看开发文档走一遍流程，然后看看极光个人推送，广播能否收到，然后就可以考虑跟服务端干一仗了！！</p><p>　　最后祝大家 永无BUG！！！！！！！！！！！！！</p><p>　　转自：<a href="http://www.jianshu.com/p/0d382c4d98ff" target="_blank" rel="noopener">http://www.jianshu.com/p/0d382c4d98ff</a></p>]]></content>
      
      <categories>
          
          <category> iOS 推送 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jpush </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React-Native 奇葩报错</title>
      <link href="/2017/03/22/rnPortCrash/"/>
      <url>/2017/03/22/rnPortCrash/</url>
      <content type="html"><![CDATA[<p>刚写了一个react-native小demo，完美运行，心中窃喜，于是关闭项目。过了一会儿，想再一睹刚才如行云流水般运行的项目，于是，运行，结果……纳尼？出现了一片姨妈红有没有？心中一万头草泥马呼啸而过有没有？到底发生了什么？<br><a id="more"></a></p><p>NA！阿sir啊，我说了我没动过代码啦，出现下面这种错误不关我的事啊：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProjectName has not been registered. </span><br><span class="line">This is either due to a <span class="built_in">require</span>() error during initialization or failure to call AppRegistry.registerComponent.</span><br></pre></td></tr></table></figure></p><p>分析错误原因：</p><h2 id="1-第一种情况："><a href="#1-第一种情况：" class="headerlink" title="1.第一种情况："></a><strong>1.第一种情况：</strong></h2><p>程序入口处项目名称不一致。检查发现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppRegistry.registerComponent(<span class="string">'ProjectName'</span>, () =&gt; ProjectName);</span><br></pre></td></tr></table></figure><p>一模一样！为了担心怕自己的眼睛看到的不是真实的，特地粘贴复制了一遍！</p><p>第一种情况排除！</p><h2 id="2-第二种情况"><a href="#2-第二种情况" class="headerlink" title="2.第二种情况"></a><strong>2.第二种情况</strong></h2><p><strong>8081端口被占用</strong></p><p><code>检验方法：到项目根目录下---------&gt;&gt;&gt;打开终端---------&gt;&gt;&gt;输入命令行：react-native start</code></p><p>如果出现了<code>Packager can&#39;t listen on port 8081</code>,好的恭喜你，找到了症结所在，下面就是根据提示来就好了：</p><p><1>.lsof -i : 8081 //列出被占用的端口</1></p><p><2>.kill -9 &lt; PID &gt;  //找出与之对应的PID，杀死就ok了</2></p><p><3>.重新运行项目</3></p><p><4>.依旧完美</4></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 8081port </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React-Native 之index.ios.js解读</title>
      <link href="/2017/03/22/explainIndexiosjs/"/>
      <url>/2017/03/22/explainIndexiosjs/</url>
      <content type="html"><![CDATA[<p>撸代码之前还是要搞清楚作用比较好，不然洋洋洒洒的撸了个天昏地暗，却不知道为什么用这个姿势撸，不就尴尬了吗？要知其然，还要知其所以然，论掌握撸代码姿势的重要性！<br><a id="more"></a></p><hr><p>React.native是facebook开源的一套基于JavaScript的开源框架，<br>很方便用来开发移动设备的app。</p><h2 id="而且，方便及时更新app的UI与数据，也很方便部署。"><a href="#而且，方便及时更新app的UI与数据，也很方便部署。" class="headerlink" title="而且，方便及时更新app的UI与数据，也很方便部署。"></a>而且，方便及时更新app的UI与数据，也很方便部署。</h2><p>在react-native的ios项目中，界面搭建部分是一个js文件：index.ios.js。下面对这个文件进行一下解读，方便后续开发中明白各个部分的作用。</p><h2 id="1、引用React"><a href="#1、引用React" class="headerlink" title="1、引用React"></a><strong>1、引用React</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure><h2 id="2、控件的引入"><a href="#2、控件的引入" class="headerlink" title="2、控件的引入"></a><strong>2、控件的引入</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">AppRegistry,</span><br><span class="line">StyleSheet,</span><br><span class="line">Text,</span><br><span class="line">View,</span><br><span class="line">ListView,</span><br><span class="line">TouchableOpacity</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br></pre></td></tr></table></figure><h2 id="3、样式设置"><a href="#3、样式设置" class="headerlink" title="3、样式设置"></a><strong>3、样式设置</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//设置样式</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line"><span class="selector-tag">container</span>: &#123;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>,</span><br><span class="line">justifyContent: <span class="string">'center'</span>,</span><br><span class="line">alignItems: <span class="string">'center'</span>,</span><br><span class="line">backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="selector-tag">welcome</span>: &#123;</span><br><span class="line"><span class="attribute">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">textAlign: <span class="string">'center'</span>,</span><br><span class="line">margin: <span class="number">10</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="selector-tag">instructions</span>: &#123;</span><br><span class="line"><span class="attribute">textAlign</span>: <span class="string">'center'</span>,</span><br><span class="line">color: <span class="string">'#333333'</span>,</span><br><span class="line">marginBottom: <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>作用：定义了一段应用在 “Hello World” 文本上的样式。</p><p><strong>React Native 使用 CSS 来定义应用界面的样式。</strong></p><h2 id="4、创建React组件对应的类"><a href="#4、创建React组件对应的类" class="headerlink" title="4、创建React组件对应的类"></a><strong>4、创建React组件对应的类</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">export default class HelloWorld extends Component &#123;</span><br><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>&gt;</span></span><br><span class="line">Welcome to React Native!</span><br><span class="line"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.instructions&#125;</span>&gt;</span></span><br><span class="line">To get started, edit index.android.js</span><br><span class="line"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.instructions&#125;</span>&gt;</span></span><br><span class="line">Double tap R on your keyboard to reload,&#123;'\n'&#125;</span><br><span class="line">Shake or press menu button for dev menu</span><br><span class="line"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：描述将要创建的组件，包括各种行为和属性。</p><h2 id="5、解释一下"><a href="#5、解释一下" class="headerlink" title="5、解释一下"></a><strong>5、解释一下</strong></h2><ul><li>组件渲染的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：只有当组件被渲染时，必须实现render接口方法，因为，只有render方法，是用于输出内容组件内容的；其他接口方法，都是可选的。</p><ul><li>标签<view>定义视图</view></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：设置显示区域，相当于iOS中的UIView控件（Objective-c和Swift）</p><ul><li>标签<text>定义文本</text></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>&gt;</span></span><br><span class="line">Welcome to React Native!</span><br><span class="line"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：设置并显示字符串，相当于iOS的UILabel控件（Objective-c和Swift）。</p><ul><li>定义程序入口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppRegistry.registerComponent(<span class="string">'HelloWorld'</span>, () =&gt; HelloWorld);</span><br></pre></td></tr></table></figure><p>作用：用AppRegistry的registerComponent( )方法，定义了App的入口，并提供了根组件。</p><p>转自：<a href="http://blog.csdn.net/maoyingyong/article/details/46439951" target="_blank" rel="noopener">http://blog.csdn.net/maoyingyong/article/details/46439951</a></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> index.ios.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React-Native 之ListView</title>
      <link href="/2017/03/22/react-native-listView/"/>
      <url>/2017/03/22/react-native-listView/</url>
      <content type="html"><![CDATA[<p>最近在摸索<code>react-native</code>，虽然苹果爸爸已经在之前封杀了<code>JSPatch</code>，我还是抱着试一试的态度先学一个疗程，毕竟，知识嘛，多学点总是好的。<br><a id="more"></a></p><p>其实对于js我了解的不多，所以一些东西给不了相应的解释，还请见谅（ps：我的学习阶段都是从模仿开始的）。后面我会不断的学习基础知识，把相应的解释会添加上去的。见笑了！</p><p>接下来先学习一下如何创建一个<code>ListView</code>。</p><h2 id="1-设置样式"><a href="#1-设置样式" class="headerlink" title="1.设置样式"></a><strong>1.设置样式</strong></h2><p>上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置样式</span></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整个listView的样式设置</span></span><br><span class="line">outerViewStyle: &#123;</span><br><span class="line"><span class="comment">//占满窗口</span></span><br><span class="line">flex: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个自定义view的样式设置</span></span><br><span class="line">headerViewStyle: &#123;</span><br><span class="line">height: <span class="number">64</span>,</span><br><span class="line">backgroundColor: <span class="string">'orange'</span>,</span><br><span class="line">justifyContent: <span class="string">'center'</span>,</span><br><span class="line">alignItems: <span class="string">'center'</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//列表row的样式设置</span></span><br><span class="line">rowStyle: &#123;</span><br><span class="line"><span class="comment">//设置主轴的方向</span></span><br><span class="line">flexDirection: <span class="string">'row'</span>,</span><br><span class="line"><span class="comment">//侧轴方向居中</span></span><br><span class="line">alignItems: <span class="string">'center'</span>,</span><br><span class="line"></span><br><span class="line">padding: <span class="number">10</span>,</span><br><span class="line"><span class="comment">//单元格底部的线设置</span></span><br><span class="line">borderBottomColor: <span class="string">'#e8e8e8'</span>,</span><br><span class="line">borderBottomWidth: <span class="number">0.5</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//分区头部view的样式设置</span></span><br><span class="line">sectionHeaderViewStyle: &#123;</span><br><span class="line">backgroundColor: <span class="string">'#e8e8e8'</span>,</span><br><span class="line">justifyContent: <span class="string">'center'</span>,</span><br><span class="line">height: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上就是本listView能用到的一些设置。</p><h2 id="2-获取数据"><a href="#2-获取数据" class="headerlink" title="2.获取数据"></a><strong>2.获取数据</strong></h2><p>用到的数据是本地的json数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调取数据</span></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"><span class="keyword">this</span>.loadDataFromJson();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Car = <span class="built_in">require</span>(<span class="string">'./Car.json'</span>);</span><br><span class="line">loadDataFromJson()&#123;</span><br><span class="line"><span class="comment">//获取json数据</span></span><br><span class="line"><span class="keyword">var</span> jsonData = Car.data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一些变量</span></span><br><span class="line"><span class="keyword">var</span> dataBlob = &#123;&#125;,</span><br><span class="line">sectionIDs = [],</span><br><span class="line">rowIDs = [],</span><br><span class="line">cars = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; jsonData.length; i++) &#123;</span><br><span class="line"><span class="comment">//1.把区号放入sectionIDs数组中</span></span><br><span class="line">sectionIDs.push(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.把区中的内容放入dataBlob对象中</span></span><br><span class="line">dataBlob[i] = jsonData[i].title;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.取出该组中所有的车</span></span><br><span class="line">cars = jsonData[i].cars;</span><br><span class="line">rowIDs[i] = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有的车数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cars.length; j++) &#123;</span><br><span class="line"><span class="comment">//1.把行号放入rowIDs[i]中</span></span><br><span class="line">rowIDs[i].push(j);</span><br><span class="line"><span class="comment">//2.把每一行的内容放入dataBlob对象中</span></span><br><span class="line">dataBlob[i + <span class="string">':'</span> + j] = cars[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新状态</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">dataSource: <span class="keyword">this</span>.state.dataSource.cloneWithRowsAndSections(dataBlob,sectionIDs,rowIDs)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-初始化函数"><a href="#3-初始化函数" class="headerlink" title="3.初始化函数"></a><strong>3.初始化函数</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line">getInitialState()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置区数据</span></span><br><span class="line"><span class="keyword">var</span> getSectionData = <span class="function">(<span class="params">dataBlob,sectionID</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dataBlob[sectionID];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置行数据</span></span><br><span class="line"><span class="keyword">var</span> getRowData = <span class="function">(<span class="params">dataBlob,sectionID,rowID</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dataBlob[sectionID + <span class="string">':'</span> +rowID];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">dataSource : <span class="keyword">new</span> ListView.DataSource(&#123;</span><br><span class="line"></span><br><span class="line">getSectionData: getSectionData,<span class="comment">//获取区中的数据</span></span><br><span class="line">getRowData: getRowData,<span class="comment">//获取行中的数据</span></span><br><span class="line">rowHasChanged: <span class="function">(<span class="params">r1,r2</span>) =&gt;</span> r1 !== r2,</span><br><span class="line">sectionHeaderHasChanged: <span class="function">(<span class="params">s1,s2</span>) =&gt;</span> s1 !== s2</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">ListView</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br></pre></td></tr></table></figure><h2 id="4-配置数据"><a href="#4-配置数据" class="headerlink" title="4.配置数据"></a><strong>4.配置数据</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 每一行的数据</span><br><span class="line">renderRow(rowData)&#123;</span><br><span class="line">return(</span><br><span class="line"><span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">activeOpacity</span>=<span class="string">&#123;0.5&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.rowStyle&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;marginLeft:5&#125;&#125;</span>&gt;</span>&#123;rowData.name&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span><br><span class="line">);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">renderSectionHeader(sectionData,sectionID) &#123;</span><br><span class="line">return(</span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.sectionHeaderViewStyle&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;marginLeft:5,color:</span>'<span class="attr">red</span>'&#125;&#125;&gt;</span>&#123;sectionData&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-界面显示"><a href="#5-界面显示" class="headerlink" title="5.界面显示"></a><strong>5.界面显示</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = <span class="string">&#123;styles.outerViewStyle&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.headerViewStyle&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>'<span class="attr">white</span>',<span class="attr">fontSize:25</span>&#125;&#125;&gt;</span>车的品牌<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag"><span class="attr">dataSource</span>=<span class="string">&#123;this.state.dataSource&#125;</span></span></span><br><span class="line"><span class="tag"><span class="attr">renderRow</span>=<span class="string">&#123;this.renderRow&#125;</span></span></span><br><span class="line"><span class="tag"><span class="attr">renderSectionHeader</span>=<span class="string">&#123;this.renderSectionHeader&#125;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>上一个效果图：</p><p><img src="http://img.blog.csdn.net/20170322095734121?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVGhyZWVfWmhhbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这只是一个效果图"></p><p>由于本人也是刚刚窥探rn，所以很多地方都是不求甚解，所以很多地方没有给出相应的解释，还请见谅！这里给出源码，大家可以共同学习！</p><p><a href="https://github.com/ZJQian/RNStudyListView/tree/master" target="_blank" rel="noopener">怒戳我，得源码！</a></p>]]></content>
      
      <categories>
          
          <category> react-native学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> listView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>moya + RxSwift 进行网络请求</title>
      <link href="/2017/03/13/moya/"/>
      <url>/2017/03/13/moya/</url>
      <content type="html"><![CDATA[<p>如在OC中使用AFNetworking一般,Swift我们用Alamofire来做网络库.而Moya在Alamofire的基础上又封装了一层:<br><a id="more"></a></p><h2 id="1-关于moya"><a href="#1-关于moya" class="headerlink" title="1.关于moya"></a><strong>1.关于moya</strong></h2><p><img src="http://img.blog.csdn.net/20170313171002333?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVGhyZWVfWmhhbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="moya"></p><p>官方说<code>moya</code>有以下特性-_-:</p><ul><li>编译时检查正确的API端点访问.</li><li>使你定义不同端点枚举值对应相应的用途更加明晰.</li><li>提高测试地位从而使单元测试更加容易.</li></ul><h2 id="2-开始"><a href="#2-开始" class="headerlink" title="2.开始"></a><strong>2.开始</strong></h2><p> ### <strong>1.创建枚举API</strong></p><p>就像这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">APIManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> getNewsLatest<span class="comment">//获取最新消息</span></span><br><span class="line"><span class="keyword">case</span> getStartImage<span class="comment">// 启动界面图像获取</span></span><br><span class="line"><span class="keyword">case</span> getVersion(<span class="type">String</span>)<span class="comment">//软件版本查询</span></span><br><span class="line"><span class="keyword">case</span> getThemes<span class="comment">//主题日报列表查看</span></span><br><span class="line"><span class="keyword">case</span> getNewsDetail(<span class="type">Int</span>)<span class="comment">//获取新闻详情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ### <strong>2.实现<code>TargetType</code>协议</strong></p><p>就像这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">APIManager</span>: <span class="title">TargetType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The target's base `URL`.</span></span><br><span class="line"><span class="keyword">var</span> baseURL: <span class="type">URL</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">URL</span>.<span class="keyword">init</span>(string: <span class="string">"http://news-at.zhihu.com/api/"</span>)!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The path to be appended to `baseURL` to form the full `URL`.</span></span><br><span class="line"><span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> .getNewsLatest:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"4/news/latest"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> .getStartImage:<span class="comment">//start-image 后为图像分辨率，接受任意的 number*number 格式， number 为任意非负整数，返回值均相同。</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"4/start-image/1080*1776"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> .getVersion(<span class="keyword">let</span> version):<span class="comment">//URL 最后部分的数字代表所安装『知乎日报』的版本</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"4/version/ios/"</span> + version</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> .getThemes:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"4/themes"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> .getNewsDetail(<span class="keyword">let</span> id):</span><br><span class="line"><span class="keyword">return</span> <span class="string">"4/news/\(id)"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The HTTP method used in the request.</span></span><br><span class="line"><span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> .<span class="keyword">get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The parameters to be incoded in the request.</span></span><br><span class="line"><span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]? &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The method used for parameter encoding.</span></span><br><span class="line"><span class="keyword">var</span> parameterEncoding: <span class="type">ParameterEncoding</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">URLEncoding</span>.<span class="keyword">default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Provides stub data for use in testing.</span></span><br><span class="line"><span class="keyword">var</span> sampleData: <span class="type">Data</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The type of HTTP task to be performed.</span></span><br><span class="line"><span class="keyword">var</span> task: <span class="type">Task</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> .request</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Whether or not to perform Alamofire validation. Defaults to `false`.</span></span><br><span class="line"><span class="keyword">var</span> validate: <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里,可以设置请求的参数,例如url……method……para等.</p><p> ### <strong>3.使用</strong></p><p><code>Moya</code>的使用非常简单，通过<code>TargetType</code>协议定义好每个<code>target</code>之后，就可以直接使用<code>Moya</code>开始发送网络请求了。就像这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> provider = <span class="type">MoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</span><br><span class="line">provider.request(.getNewsLatest) &#123; result <span class="keyword">in</span></span><br><span class="line"><span class="comment">// do something with result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配合RxSwift"><a href="#3-配合RxSwift" class="headerlink" title="3.配合RxSwift"></a><strong>3.配合RxSwift</strong></h2><p><code>Moya</code>本身已经是一个使用起来非常方便，能够写出非常简洁优雅的代码的网络封装库，但是让<code>Moya</code>变得更加强大的原因之一还因为它对于<code>Functional Reactive Programming</code>的扩展，具体说就是对于<code>RxSwift</code>和<code>ReactiveCocoa</code>的扩展，通过与这两个库的结合，能让<code>Moya</code>变得更加强大。我选择<code>RxSwift</code>的原因有两个，一个是<code>RxSwift</code>的库相对来说比较轻量级，语法更新相对来说比较少，我之前用过<code>ReactiveCocoa</code>，一些大版本的更新需求重写很多代码，第二个更重要的原因是因为<code>RxSwift</code>背后有整个<code>ReactiveX</code>的支持，里面包括<code>Java</code>，<code>JS</code>，<code>.Net</code>, <code>Swift</code>，<code>Scala</code>，它们内部都用了<code>ReactiveX</code>的逻辑思想，这意味着你一旦学会了其中的一个，以后可以很快的上手<code>ReactiveX</code>中的其他语言。</p><p><code>Moya</code>提供了非常方面的<code>RxSwift</code>扩展：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> provider = <span class="type">RxMoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</span><br><span class="line">provider.request(.getNewsLatest)</span><br><span class="line">.filterSuccessfulStatusCodes()</span><br><span class="line">.mapJSON()</span><br><span class="line">.subscribe(onNext: &#123; (json) <span class="keyword">in</span></span><br><span class="line"><span class="comment">//do something with posts</span></span><br><span class="line"><span class="built_in">print</span>(json)</span><br><span class="line">&#125;)</span><br><span class="line">.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure><p><strong>解释一下:</strong></p><ul><li><p><code>RxMoyaProvider</code>是<code>MoyaProvider</code>的子类，是对<code>RxSwift</code>的扩展</p></li><li><p><code>filterSuccessfulStatusCodes()</code>是<code>Moya</code>为<code>RxSwift</code>提供的扩展方法，顾名思义，可以得到成功地网络请求，忽略其他的</p></li><li><p><code>mapJSON()</code>也是<code>Moya RxSwift</code>的扩展方法，可以把返回的数据解析成 <code>JSON</code> 格式</p></li><li><p><code>subscribe</code> 是一个<code>RxSwift</code>的方法，对经过一层一层处理的 <code>Observable</code> 订阅一个 <code>onNext</code> 的 <code>observer</code>，一旦得到 <code>JSON</code> 格式的数据，就会经行相应的处理</p></li><li><p><code>addDisposableTo(disposeBag)</code> 是 <code>RxSwift</code> 的一个自动内存处理机制，跟<code>ARC</code>有点类似，会自动清理不需要的对象。</p></li></ul><h2 id="4-配合HandyJSON"><a href="#4-配合HandyJSON" class="headerlink" title="4.配合HandyJSON"></a><strong>4.配合HandyJSON</strong></h2><p>在实际应用过程中网络请求往往紧密连接着数据层（<code>Model</code>），具体地说，在我们的这个例子中，一般我们需要建立一个类用来统一管理数据，然后把得到的 <code>JSON</code> 数据映射到数据层（<code>Model</code>）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MenuModel</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> others: [<span class="type">ThemeModel</span>]?</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThemeModel</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color: <span class="type">String</span>?</span><br><span class="line"><span class="keyword">var</span> thumbnail: <span class="type">String</span>?</span><br><span class="line"><span class="keyword">var</span> id: <span class="type">Int</span>?</span><br><span class="line"><span class="keyword">var</span> description: <span class="type">String</span>?</span><br><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建ViewModel类,创建具体请求方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> provider = <span class="type">RxMoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> dispose = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getThemes</span><span class="params">(completed: @escaping <span class="params">(<span class="number">_</span> menuModel: MenuModel)</span></span></span> -&gt; ())&#123;</span><br><span class="line"></span><br><span class="line">provider</span><br><span class="line">.request(.getThemes)</span><br><span class="line">.mapModel(<span class="type">MenuModel</span>.<span class="keyword">self</span>)</span><br><span class="line">.subscribe(onNext: &#123; (model) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">completed(model)</span><br><span class="line">&#125;, onError: &#123; (error) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">&#125;, onCompleted: <span class="literal">nil</span>, onDisposed: <span class="literal">nil</span>).addDisposableTo(dispose)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里解释一下:</strong><br>我这里是将请求的数据通过闭包传了出去,当然也可以不那么做.个人喜好问题..</p><p>这里是为 <code>RxSwift</code> 中的 <code>ObservableType</code>和 <code>Response</code>写一个简单的扩展方法 <code>mapModel</code>，利用我们写好的<code>Model</code> 类，一步就把<code>JSON</code>数据映射成 <code>model</code>。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> <span class="title">where</span> <span class="title">E</span> == <span class="title">Response</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapModel</span>&lt;T: HandyJSON&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> flatMap &#123; response -&gt; <span class="type">Observable</span>&lt;<span class="type">T</span>&gt; <span class="keyword">in</span></span><br><span class="line"><span class="keyword">return</span> <span class="type">Observable</span>.just(response.mapModel(<span class="type">T</span>.<span class="keyword">self</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapModel</span>&lt;T: HandyJSON&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="type">String</span>.<span class="keyword">init</span>(data: data, encoding: .utf8)</span><br><span class="line"><span class="keyword">return</span> <span class="type">JSONDeserializer</span>&lt;<span class="type">T</span>&gt;.deserializeFrom(json: jsonString)!</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-配合ObjectMapper"><a href="#5-配合ObjectMapper" class="headerlink" title="5.配合ObjectMapper"></a><strong>5.配合ObjectMapper</strong></h2><p>毕竟将json数据转换成model的库那么多 ….,所以……,用哪个很随意…..这里再介绍一下<code>ObjectMapper</code></p><p><strong>1.创建model类</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailModel</span>: <span class="title">Mappable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body = <span class="type">String</span>()</span><br><span class="line"><span class="keyword">var</span> image_source: <span class="type">String</span>?</span><br><span class="line"><span class="keyword">var</span> title = <span class="type">String</span>()</span><br><span class="line"><span class="keyword">var</span> image: <span class="type">String</span>?</span><br><span class="line"><span class="keyword">var</span> share_url = <span class="type">String</span>()</span><br><span class="line"><span class="keyword">var</span> js = <span class="type">String</span>()</span><br><span class="line"><span class="keyword">var</span> recommenders = [[<span class="type">String</span>: <span class="type">String</span>]]()</span><br><span class="line"><span class="keyword">var</span> ga_prefix = <span class="type">String</span>()</span><br><span class="line"><span class="keyword">var</span> section: <span class="type">DetailSectionModel</span>?</span><br><span class="line"><span class="keyword">var</span> type = <span class="type">Int</span>()</span><br><span class="line"><span class="keyword">var</span> id = <span class="type">Int</span>()</span><br><span class="line"><span class="keyword">var</span> css = [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="built_in">map</span>: Map)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">body &lt;- <span class="built_in">map</span>[<span class="string">"body"</span>]</span><br><span class="line">image_source &lt;- <span class="built_in">map</span>[<span class="string">"image_source"</span>]</span><br><span class="line">title &lt;- <span class="built_in">map</span>[<span class="string">"title"</span>]</span><br><span class="line">image &lt;- <span class="built_in">map</span>[<span class="string">"image"</span>]</span><br><span class="line">share_url &lt;- <span class="built_in">map</span>[<span class="string">"share_url"</span>]</span><br><span class="line">js &lt;- <span class="built_in">map</span>[<span class="string">"js"</span>]</span><br><span class="line">recommenders &lt;- <span class="built_in">map</span>[<span class="string">"recommenders"</span>]</span><br><span class="line">ga_prefix &lt;- <span class="built_in">map</span>[<span class="string">"ga_prefix"</span>]</span><br><span class="line">section &lt;- <span class="built_in">map</span>[<span class="string">"section"</span>]</span><br><span class="line">type &lt;- <span class="built_in">map</span>[<span class="string">"type"</span>]</span><br><span class="line">id &lt;- <span class="built_in">map</span>[<span class="string">"id"</span>]</span><br><span class="line">css &lt;- <span class="built_in">map</span>[<span class="string">"css"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(<span class="built_in">map</span>: <span class="type">Map</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>ObjectMapper</code> ，需要让自己的 <code>Model</code> 类使用 <code>Mappable</code> 协议，这个协议包括两个方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(<span class="built_in">map</span>: <span class="type">Map</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="built_in">map</span>: Map)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>在 <code>mapping</code> 方法中，用 <code>&lt;-</code> 操作符来处理和映射你的 <code>JSON</code>数据。</p><p>数据类建立好之后，我们还需要为 <code>RxSwift</code> 中的 <code>Observable</code> 写一个简单的扩展方法 <code>mapObject</code>，利用我们写好的<code>model</code> 类，一步就把<code>JSON</code> 数据映射成一个个 <code>model</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Mappable&gt;<span class="params">(type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.<span class="built_in">map</span> &#123; response <span class="keyword">in</span></span><br><span class="line"><span class="comment">//if response is a dictionary, then use ObjectMapper to map the dictionary</span></span><br><span class="line"><span class="comment">//if not throw an error</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> dict = response <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="type">RxSwiftMoyaError</span>.<span class="type">ParseJSONError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">Mapper</span>&lt;<span class="type">T</span>&gt;().<span class="built_in">map</span>(<span class="type">JSON</span>: dict)!</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapArray</span>&lt;T: Mappable&gt;<span class="params">(type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Observable</span>&lt;[<span class="type">T</span>]&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.<span class="built_in">map</span> &#123; response <span class="keyword">in</span></span><br><span class="line"><span class="comment">//if response is an array of dictionaries, then use ObjectMapper to map the dictionary</span></span><br><span class="line"><span class="comment">//if not, throw an error</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> array = response <span class="keyword">as</span>? [<span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="type">RxSwiftMoyaError</span>.<span class="type">ParseJSONError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> dicts = array <span class="keyword">as</span>? [[<span class="type">String</span>: <span class="type">Any</span>]] <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="type">RxSwiftMoyaError</span>.<span class="type">ParseJSONError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">Mapper</span>&lt;<span class="type">T</span>&gt;().mapArray(<span class="type">JSONArray</span>: dicts)!</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RxSwiftMoyaError</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">ParseJSONError</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">OtherError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">RxSwiftMoyaError</span>: <span class="title">Swift</span>.<span class="title">Error</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>mapObject</code> 方法处理单个对象，<code>mapArray</code> 方法处理对象数组。</p></li><li><p>如果传进来的数据 <code>response</code> 是一个 <code>dictionary</code>，那么就利用 <code>ObjectMapper</code> 的 <code>map</code>方法映射这些数据，这个方法会调用你之前在 <code>mapping</code>方法里面定义的逻辑。</p></li><li><p>如果 <code>response</code> 不是一个 <code>dictionary</code>， 那么就抛出一个错误。</p></li><li><p>在底部自定义了简单的<code>Error</code>，继承了<code>Swift</code> 的 <code>Error</code>类，在实际应用过程中可以根据需要提供自己想要的 <code>Error</code>。</p></li></ul><p>然后运行请求方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> provider = <span class="type">RxMoyaProvider</span>&lt;<span class="type">APIManager</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNewsDetail</span><span class="params">(id: Int)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">DetailModel</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> provider</span><br><span class="line">.request(.getNewsDetail(id))</span><br><span class="line">.filterSuccessfulStatusCodes()</span><br><span class="line">.mapJSON()</span><br><span class="line">.mapObject(type: <span class="type">DetailModel</span>.<span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有没有感觉很爽呢!————<a href="https://github.com/ZJQian/ZhiHuNewsSwift" target="_blank" rel="noopener">源码地址,共同学习!</a></p><p><strong>有不对之处,,,,还望各路大神不吝指正!</strong></p>]]></content>
      
      <categories>
          
          <category> swift学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> moya + RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxSwift的简单使用</title>
      <link href="/2017/03/13/RxSwift/"/>
      <url>/2017/03/13/RxSwift/</url>
      <content type="html"><![CDATA[<p><code>RxSwift</code>为<code>ReactiveX</code>（<code>Reactive Extensions</code>）旗下的<code>Swift</code>语言库，提供了Swift平台上进行响应式编程的解决方案。Rx的重要角色为<code>Observable</code>（被观察者）和<code>Observer</code>（观察者），<code>Observable</code>类似于<code>ReactiveCoco</code>a中的<code>Signal</code>，里面装有事件流，供<code>Observer</code>订阅。事件流<a id="more"></a>在Rx中与<code>ReactiveCocoa</code>一样具有三类：<code>Next</code>、<code>Error</code>、<code>Completed</code>，代表着继续事件、错误事件、完成事件。我们在使用<code>RxSwift</code>进行<code>iOS</code>开发时，通常会引入另外一个库：<code>RxCocoa</code>，这个库将<code>UIKit</code>以及<code>Foundation</code>框架中许多成员，如视图(<code>View</code>)、控制事件(<code>Control Event</code>)、键值观察（<code>KVO</code>）、通知（<code>Notification</code>）等等进行与<code>RxSwift</code>接入的扩展，将Rx与iOS API无缝连接。</p><h2 id="1-bindTo"><a href="#1-bindTo" class="headerlink" title="1. bindTo"></a><strong>1. bindTo</strong></h2><p><code>bindTo</code>为<code>ObservableType</code>协议的几个重载方法（<code>Observable</code>也会实现<code>ObservableType</code>协议）。顾名思义，它会将某个东东与一个可观察者进行绑定，也就是说，当这个可观察者的事件流中有事件“流过”（有事件元素发送），被绑定的这个东东就会被刺激到，进而进行相关的操作。</p><p>在这里，有一个用的比较多的是重载方法为<code>bindTo&lt;O : ObserverType where O.E == E&gt;(observer: O) -&gt; Disposable</code>，这个方法有一个参数，从方法泛型的声明中可以得知，参数的类型为一个观察者类型，且这个观察者能够接受到的事件流元素的类型要跟被观察者的一样(O.E == E)。这个方法意图就是将一个被观察者与一个指定的观察者进行绑定，被观察者事件流中发出的所有事件元素都会让观察者接收。<br>在MVVM架构模式中，此方法主要用于视图（View）层跟视图模型（ViewModel）层或视图层跟视图层的绑定，这里举个栗子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">textField.rx_text</span><br><span class="line">.bindTo(label.rx_text)</span><br><span class="line">.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure><p><code>其中，UITextField的rx_text属性为ControlProperty类型，实现了ControlPropertyType，所以不仅是观察者类型，还是被观察者类型，UILabel中的rx_text只是单纯的观察者类型。</code></p><p><code>bindTo</code>的另外一个用得比较多的重载方法为：<code>bindTo(variable: RxSwift.Variable&lt;Self.E&gt;) -&gt; Disposable</code>，这个方法将一个被观察者与一个<code>Variable</code>（变量）绑定在一起，这个变量的元素类型跟被观察者的事件元素类型一致。此方法作用就是把从被观察者事件流中发射出的事件元素存入变量中，在这里不做演示。<br>关于bindTo的其他重载方法在这里就不完全阐述了，剩下的主要是用于对函数的绑定。</p><h2 id="2-UIBindingObserver"><a href="#2-UIBindingObserver" class="headerlink" title="2.UIBindingObserver"></a><strong>2.UIBindingObserver</strong></h2><p>现在介绍的这个东东就跟上面说的被观察者类型的<code>bindTo</code>方法密切相关了。<br><code>UIBindingObserver</code>，名字就告诉了我们它是一个观察者，用于对UI的绑定，我这里通过一个例子来讲解它：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  MARK: - 绑定方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binding</span><span class="params">()</span></span> &#123;</span><br><span class="line">textField.rx_text</span><br><span class="line">.bindTo(label.rx_sayHelloObserver)</span><br><span class="line">.addDisposableTo(disposeBag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  MARK: - 视图控件扩展</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">UILabel</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> rx_sayHelloObserver: <span class="type">AnyObserver</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: <span class="keyword">self</span>, binding: &#123; (label, string) <span class="keyword">in</span></span><br><span class="line">label.text = <span class="string">"Hello \(string)"</span></span><br><span class="line">&#125;).asObserver()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我在视图控制器<code>ViewController</code>所在的<code>Swift</code>文件中创建了一个私有的<code>UILabel</code>扩展，并在扩展中定义了一个只读计算属性，属性的类型为<code>AnyObserver&lt;String&gt;</code>，为一个事件元素是<code>String</code>的观察者类型。当获取这个属性值的时候，就返回了与特定<code>UIBindingObserver</code>关联的观察者。<br>现在我们来看一下<code>UIBindingObserver</code>的构造方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>(<span class="type">UIElement</span>: <span class="type">UIElementType</span>, binding: (<span class="type">UIElementType</span>, <span class="type">Value</span>) -&gt; <span class="type">Void</span>)</span><br></pre></td></tr></table></figure><p>方法的第一个参数就是传入一个要被绑定的视图的实例，由于现在是在<code>UILabel</code>的扩展中，所以这里我传入了<code>self</code>，代表<code>UILabel</code>自己；构造方法的第二个参数为一个无返回值的闭包类型，闭包的参数其一就是被绑定了的视图，其二就是由绑定的被观察者中所发射出来的事件元素。通过这个闭包，我们能够将视图中的某些属性根据相应的事件元素而进行改变，如例子中<code>label.text = &quot;Hello \(string)&quot;</code>。当我们执行例子中的<code>binding</code>函数进行绑定后，<code>TextField</code>中的字符串每经过修改，<code>Label</code>中的文字总会实时更新，并在字符串前面加上<code>Hello</code>。</p><p>在<code>RxCocoa</code>框架中，某些地方也用到了<code>UIBindingObserver</code>，如<code>UILable</code>中的<code>rx_text</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> rx_text: <span class="type">AnyObserver</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: <span class="keyword">self</span>) &#123; label, text <span class="keyword">in</span></span><br><span class="line">label.text = text</span><br><span class="line">&#125;.asObserver()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Driver"><a href="#3-Driver" class="headerlink" title="3.Driver"></a><strong>3.Driver</strong></h2><p><code>Driver</code>从名字上可以理解为<code>驱动</code>（我自己会亲切地把它叫做”老司机”），在功能上它类似被观察者（<code>Observable</code>），而它本身也可以与被观察者相互转换（<code>Observable: asDriver, Driver: asObservable</code>），它驱动着一个观察者，当它的事件流中有事件涌出时，被它驱动着的观察者就能进行相应的操作。一般我们会将一个<code>Observable</code>被观察者转换成<code>Driver</code>后再进行驱动操作：</p><p>我们沿用上面例子中的<code>UILabel</code>私有扩展，并修改下<code>binding</code>方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binding</span><span class="params">()</span></span> &#123;</span><br><span class="line">textField.rx_text</span><br><span class="line">.asDriver()</span><br><span class="line">.drive(label.rx_sayHelloObserver)</span><br><span class="line">.addDisposableTo(disposeBag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，<code>Driver</code>的<code>drive</code>方法与<code>Observable</code>的方法<code>bindTo</code>用法非常相似，事实上，它们的作用也是一样，说白了就是被观察者与观察者的绑定。那为什么<code>RxSwift</code>的作者又搞出<code>Driver</code>这么个东西来呢？<br>其实，比较与Observable，Driver有以下的特性：</p><ol><li>它不会发射出错误(Error)事件</li><li>对它的观察订阅是发生在主线程(UI线程)的</li><li>自带shareReplayLatestWhileConnected</li></ol><p>下面就围绕着这三个特性一一研究下：</p><ul><li>当你将一个<code>Observable</code>转换成<code>Driver</code>时，用到的<code>asDriver</code>方法有下面几个重载：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">asDriver(onErrorJustReturn onErrorJustReturn: <span class="type">Self</span>.<span class="type">E</span>)</span><br><span class="line"></span><br><span class="line">asDriver(onErrorDriveWith onErrorDriveWith: <span class="type">RxCocoa</span>.<span class="type">Driver</span>&lt;<span class="type">Self</span>.<span class="type">E</span>&gt;)</span><br><span class="line"></span><br><span class="line">asDriver(onErrorRecover onErrorRecover: (error: <span class="type">ErrorType</span>) -&gt; <span class="type">RxCocoa</span>.<span class="type">Driver</span>&lt;<span class="type">Self</span>.<span class="type">E</span>&gt;)</span><br></pre></td></tr></table></figure><p>从这三个重载方法中可看出，当我们要将有可能会发出错误事件的<code>Observable</code>转换成<code>Driver</code>时，必须要先将所有可能发出的错误事件滤除掉，从而使得<code>Driver</code>不可能会发射出错误的事件。</p><ul><li>在<code>Observable</code>中假如你要进行限流，你要用到方法<code>throttle(dueTime: RxSwift.RxTimeInterval, scheduler: SchedulerType)</code>，方法的第一个参数是两个事件之间的间隔时间，第二个参数是一个线程的有关类，如我要在主线程中，我可以传入<code>MainScheduler.instance</code>。而在<code>Driver</code>中我们要限流，调用的是<code>throttle(dueTime: RxSwift.RxTimeInterval)</code>，只配置事件的间隔时间，而它默认会在主线程中进行。</li></ul><ul><li>一般我们在对<code>Observable</code>进行<code>map</code>操作后，我们会在后面加上<code>shareReplay(1)</code>或<code>shareReplayLatestWhileConnected</code>，以防止以后被观察者被多次订阅观察后，<code>map</code>中的语句会多次调用：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rx_textChange = textField.rx_text</span><br><span class="line">.<span class="built_in">map</span> &#123; <span class="keyword">return</span> <span class="string">"Good \($0)"</span> &#125;</span><br><span class="line">.shareReplay(<span class="number">1</span>)</span><br><span class="line">rx_textChange</span><br><span class="line">.subscribeNext &#123; <span class="built_in">print</span>(<span class="string">"1 -- \($0)"</span>) &#125;</span><br><span class="line">.addDisposableTo(disposeBag)</span><br><span class="line">rx_textChange</span><br><span class="line">.subscribeNext &#123; <span class="built_in">print</span>(<span class="string">"2 -- \($0)"</span>) &#125;</span><br><span class="line">.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure><p>在<code>Driver</code>中，框架已经默认帮我们加上了<code>shareReplayLatestWhileConnected</code>，所以我们也没必要再加上<code>&quot;replay&quot;</code>相关的语句了。</p><p>从这些特性可以看出，<code>Driver</code>是一个专门针对于<code>UI</code>的特定可观察者类。并不是说对<code>UI</code>进行相应绑定操作不能使用纯粹的<code>Observable</code>，但是，<code>Driver</code>已经帮我们省去了好多的操作，让我们对<code>UI</code>的绑定更加的高效便捷。所以，对<code>UI</code>视图的绑定操作，我们首选“老司机”<code>Driver</code>。</p><h2 id="4-DisposeBag"><a href="#4-DisposeBag" class="headerlink" title="4.DisposeBag"></a><strong>4.DisposeBag</strong></h2><p>当一个<code>Observable</code>（被观察者）被观察订阅后，就会产生一个<code>Disposable</code>实例，通过这个实例，我们就能进行资源的释放了。<br>对于<code>RxSwift中</code>资源的释放，也就是解除绑定、释放空间，有两种方法，分别是显式释放以及隐式释放：</p><ul><li><strong>显式释放</strong> 可以让我们在代码中直接调用释放方法进行资源的释放，如下面的实例：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dispose = textField.rx_text</span><br><span class="line">.bindTo(label.rx_sayHelloObserver)</span><br><span class="line">dispose.dispose()</span><br></pre></td></tr></table></figure><p>这个例子只是为了更明朗地说明显式释放方法而已，实际上并不会这样写。</p><ul><li><strong>隐式释放</strong> 则通过DisposeBag来进行，它类似于Objective-C ARC中的自动释放池机制，当我们创建了某个实例后，会被添加到所在线程的自动释放池中，而自动释放池会在一个RunLoop周期后进行池子的释放与重建；DisposeBag对于RxSwift就像自动释放池一样，我们把资源添加到DisposeBag中，让资源随着DisposeBag一起释放。如下实例：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binding</span><span class="params">()</span></span> &#123;</span><br><span class="line">textField.rx_text</span><br><span class="line">.bindTo(label.rx_sayHelloObserver)</span><br><span class="line">.addDisposableTo(<span class="keyword">self</span>.disposeBag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法<code>addDisposableTo</code>会对<code>DisposeBag</code>进行弱引用，所以这个<code>DisposeBag</code>要被实例引用着，一般可作为实例的成员变量，当实例被销毁了，成员<code>DisposeBag</code>会跟着销毁，从而使得<code>RxSwift</code>在此实例上绑定的资源得到释放。</p><p>对于<code>UITableViewCell</code>跟<code>UICollectionViewCell</code>来说，<code>DisposeBag</code>也能让cell在重用前释放掉之前被绑定的资源：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TanTableViewCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> disposeBag: <span class="type">DisposeBag</span>?</span><br><span class="line"><span class="keyword">var</span> viewModel: <span class="type">TanCellViewModel</span>? &#123;</span><br><span class="line"><span class="keyword">didSet</span> &#123;</span><br><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line">viewModel?.title</span><br><span class="line">.drive(<span class="keyword">self</span>.textLabel!.rx_text)</span><br><span class="line">.addDisposableTo(disposeBag)</span><br><span class="line"><span class="keyword">self</span>.disposeBag = disposeBag</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">super</span>.prepareForReuse()</span><br><span class="line"><span class="keyword">self</span>.disposeBag = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-DataSource"><a href="#5-DataSource" class="headerlink" title="5.DataSource"></a><strong>5.DataSource</strong></h2><p>这里主要讲解的是<code>RxCocoa</code>框架中带有的对于<code>UITableView</code>以及<code>UICollectionView</code>数据源的解决方案，在<code>GitHub</code>中也有一个开源小库<code>RxDataSource</code>，在这里我就不再研究了，有兴趣的朋友可以去看看：<a href="https://github.com/RxSwiftCommunity/RxDataSources" target="_blank" rel="noopener">GitHub RxDataSource</a>。<br>我这里用一个例子来展示下<code>RxCocoa</code>中的简单<code>UITableView</code>数据源：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TanViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [<span class="type">TanCellViewModel</span>(title: <span class="string">"One"</span>), <span class="type">TanCellViewModel</span>(title: <span class="string">"Two"</span>), <span class="type">TanCellViewModel</span>(title: <span class="string">"Three"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.tableView)</span><br><span class="line"><span class="keyword">self</span>.tableView.frame = <span class="keyword">self</span>.view.bounds</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.binging()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">binging</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="type">Observable</span>.just(<span class="keyword">self</span>.data)</span><br><span class="line">.asDriver(onErrorJustReturn: [])</span><br><span class="line">.drive(<span class="keyword">self</span>.tableView.rx_itemsWithCellIdentifier(<span class="type">TanTableViewCell</span>.<span class="type">CELL_IDENTIFIER</span>, cellType: <span class="type">TanTableViewCell</span>.<span class="keyword">self</span>)) &#123; (<span class="number">_</span>, viewModel, cell) <span class="keyword">in</span></span><br><span class="line">cell.viewModel = viewModel</span><br><span class="line">&#125;</span><br><span class="line">.addDisposableTo(<span class="keyword">self</span>.disposeBag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MARK: - Lazy</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span> = &#123;</span><br><span class="line"><span class="keyword">let</span> tableView = <span class="type">UITableView</span>(frame: <span class="type">CGRectZero</span>, style: .<span class="type">Plain</span>)</span><br><span class="line">tableView.registerClass(<span class="type">TanTableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="type">TanTableViewCell</span>.<span class="type">CELL_IDENTIFIER</span>)</span><br><span class="line"><span class="keyword">return</span> tableView</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们能够将数据封装在<code>Observable</code>中，然后把<code>Observable</code>绑定到<code>UITableView</code>中，通过<code>UITableView</code>的方法<code>rx_itemsWithCellIdentifier</code>，我们就能够进行数据跟Cell的一一对应配置。<br>到此，<code>UITableView</code>的数据源就设置好了。<code>UICollectionView</code>的数据源设置跟<code>UITableView</code>差不多，在这里就不再作例子了。</p><h2 id="6-项目实战"><a href="#6-项目实战" class="headerlink" title="6.项目实战"></a><strong>6.项目实战</strong></h2><p>下面就是重头戏了，我将通过折腾出一个小项目来演示<code>RxSwift</code>的使用，包括基础以及进阶的内容，首先来设定下这个项目：<br>说简单点，就是做一个登录界面（万能Demo），输入用户号码跟密码，点击登录按钮，即可登录获取数据。<br>说复杂点，我们要完成下面的要求：</p><ol><li>用户号码输入框要判断用户输入的是否全是数字，若格式不正确，提示用户格式错误。</li><li>号码输入框输入的数字最少要有11位，密码输入框输入的字符串长度最少要有6位。</li><li>要满足上面的两条要求，登录按钮才可以点击。</li><li>登录按钮点击后进行登录，界面显示正在转动的等待视图，当接收到后台数据时，等待视图消失。</li><li>解析后台返回的数据，并把数据呈现到界面中。</li></ol><p>在这个项目中，我还是使用熟悉的MVVM架构模式。在开干之前我首先要说几点：</p><ul><li><p><code>RxSwift</code>中的<code>ViewModel</code>是没有什么明确的状态的，它的输出由输入决定，可以这么说，我们要使用<code>RxSwift</code>将<code>ViewModel</code>中的外界输入（UI触发、外界事件）转换成输出，再由这些输出去驱动UI界面，并且，<code>ViewModel</code>做的是转换，我们不能够在其中对某个<code>Observable</code>进行订阅操作，所以，在<code>ViewModel</code>中我们是看不到<code>addDisposableTo</code>的。</p></li><li><p>我对比了一下由<code>ReactiveCocoa</code>与<code>RxSwift</code>实现的<code>ViewModel</code>，发现使用<code>ReactiveCocoa</code>实现的<code>ViewModel</code>中会有比较多的明确状态变量，比如说现在实现的是登录的界面，在<code>ReactiveCocoa</code>的<code>ViewModel</code>中我们会看到有<code>&quot;userName&quot;</code>、<code>&quot;passWord</code>“等等之类的状态变量，它是由<code>ReactiveCocoa</code>将其与UI视图属性相绑定的：<code>RAC(self.viewModel, userName) = userNameTextField.rac_textSignal</code>;，而在<code>RxSwift</code>实现的<code>ViewModel</code>，就不会看到这些状态变量了，有的是驱动外界UI的输出<code>Driver</code>，个人认为<code>RxSwift</code>实现<code>ViewModel</code>的宗旨是将外界视图的输入经过转变产生输出，在让输出去驱动回UI视图，所以我在构建<code>ViewModel</code>类的时候，会在它的构造方法中开设一个接收输入的参数，其次就在后面的控制器绑定中将<code>ViewModel</code>的输出进行订阅，驱动视图层。</p></li><li><p>这个项目我使用的第三方库有<code>RxSwift</code>、<code>RxCocoa</code>、<code>Moya</code>、<code>Argo</code>、<code>Curry</code>，前面两个在上面有说到；<code>Moya</code>是一款<code>Swift</code>语言的网络请求框架，它是另一款网络请求框架<code>Alamofire</code>的再度封装，它有基于<code>RxSwift</code>的扩展，能与<code>RxSwift</code>无缝对接；<code>Argo</code>是一款小巧的<code>JSON</code>解析库，函数柯里化(Currying)库<code>Curry</code>配合着它一起使用，而且，<code>Argo</code>的解析语法非常新颖奇特，用着感觉非常过瘾！</p></li></ul><h3 id="界面"><a href="#界面" class="headerlink" title=".界面"></a><strong><1>.界面</1></strong></h3><p>在<code>Storyboard</code>中布局好登录界面，分别有用户电话号码的输入框、用户密码输入框、等待视图（菊花）、提示视图（用于提醒输入的错误，以及登录的状态）、登录按钮：</p><p><img src="http://upload-images.jianshu.io/upload_images/1484579-61761f1db78fe2b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"></p><h3 id="Entity-实体"><a href="#Entity-实体" class="headerlink" title=".Entity 实体"></a><strong><2>.Entity 实体</2></strong></h3><p>下面进行实体类(Entity)的构建：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> RxSwift</span><br><span class="line"><span class="keyword">import</span> RxCocoa</span><br><span class="line"><span class="keyword">import</span> Argo</span><br><span class="line"><span class="keyword">import</span> Moya</span><br><span class="line"><span class="keyword">import</span> Curry</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MARK: - User</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> userToken: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">User</span>: <span class="title">Decodable</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">decode</span><span class="params">(json: JSON)</span></span> -&gt; <span class="type">Decoded</span>&lt;<span class="type">User</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> curry(<span class="keyword">self</span>.<span class="keyword">init</span>)</span><br><span class="line">&lt;^&gt; json &lt;| <span class="string">"name"</span></span><br><span class="line">&lt;*&gt; json &lt;| <span class="string">"user_token"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MARK: - ResponseResult</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ResponseResult</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> succeed(user: <span class="type">User</span>)</span><br><span class="line"><span class="keyword">case</span> faild(message: <span class="type">String</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user: <span class="type">User</span>? &#123;</span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .succeed(user):</span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line"><span class="keyword">case</span> .faild:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ResponseResult</span>: <span class="title">Decodable</span> </span>&#123;</span><br><span class="line"><span class="keyword">init</span>(statusCode: <span class="type">Int</span>, message: <span class="type">String</span>, user: <span class="type">User</span>?) &#123;</span><br><span class="line"><span class="keyword">if</span> statusCode == <span class="number">200</span> &amp;&amp; user != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">self</span> = .succeed(user: user!)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">self</span> = .faild(message: message)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">decode</span><span class="params">(json: JSON)</span></span> -&gt; <span class="type">Decoded</span>&lt;<span class="type">ResponseResult</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> curry(<span class="keyword">self</span>.<span class="keyword">init</span>)</span><br><span class="line">&lt;^&gt; json &lt;| <span class="string">"status_code"</span></span><br><span class="line">&lt;*&gt; json &lt;| <span class="string">"message"</span></span><br><span class="line">&lt;*&gt; json &lt;|? <span class="string">"user"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MARK: - ValidateResult</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ValidateResult</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> succeed</span><br><span class="line"><span class="keyword">case</span> faild(message: <span class="type">String</span>)</span><br><span class="line"><span class="keyword">case</span> empty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ^-^ &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> ^-^ <span class="params">(lhs: ValidateResult, rhs: ValidateResult)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (lhs, rhs) &#123;</span><br><span class="line"><span class="keyword">case</span>  (.succeed, .succeed):</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MARK: - RequestTarget</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RequestTarget</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> login(telNum: <span class="type">String</span>, password: <span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">RequestTarget</span>: <span class="title">TargetType</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> baseURL: <span class="type">NSURL</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">NSURL</span>(string: <span class="string">""</span>)!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/login"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</span><br><span class="line"><span class="keyword">return</span> .<span class="type">POST</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">AnyObject</span>]? &#123;</span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .login(telNum, password):</span><br><span class="line"><span class="keyword">return</span> [<span class="string">"tel_num"</span>: telNum, <span class="string">"password"</span>: password]</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sampleData: <span class="type">NSData</span> &#123;</span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"status_code\":200, \"message\":\"登录成功\", \"user\":&#123;\"name\":\"Tangent\",\"user_token\":\"abcdefg123456\"&#125;&#125;"</span></span><br><span class="line"><span class="keyword">return</span> jsonString.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)!</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>User</strong> 用户类，登录成功后，后台会返回用户的个人信息，包括用户名称以及用户的登录令牌。</p></li><li><p><strong>ResponseResult</strong><br>网络请求返回类，枚举类型，成功的话它的关联值是一个用户类型，失败的话它就会有信息字符串关联。它的构造中靠的是状态码来完成，若后台返回的状态码为<code>200</code>，表示登录成功，返回用户，若为其他，表明登录失败，并返回错误信息。这里的<code>decode</code>方法为<code>Argo</code>解析所需实现的。</p></li><li><p><strong>ValidateResult</strong> 验证类，如验证电话号码是否格式正确，号码或密码的长度是否达到要求等等，失败的时候会有错误信息相关联。</p></li><li><p><strong>RequestTarget</strong> 请求目标，为<code>Moya</code>框架定制的网络请求类。</p></li></ul><h3 id="ViewModelServer-服务"><a href="#ViewModelServer-服务" class="headerlink" title=".ViewModelServer 服务"></a><strong><3>.ViewModelServer 服务</3></strong></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> RxCocoa</span><br><span class="line"><span class="keyword">import</span> RxSwift</span><br><span class="line"><span class="keyword">import</span> Moya</span><br><span class="line"><span class="keyword">import</span> Argo</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MARK: - ValidateServer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidateServer</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">let</span> instance = <span class="type">ValidateServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">shareInstance</span>() -&gt; <span class="title">ValidateServer</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> minTelNumCount = <span class="number">11</span></span><br><span class="line"><span class="keyword">let</span> minPasswordCount = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validateTelNum</span><span class="params">(telNum: String)</span></span> -&gt; <span class="type">ValidateResult</span> &#123;</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = <span class="type">Int</span>(telNum) <span class="keyword">else</span> &#123; <span class="keyword">return</span> .faild(message: <span class="string">"号码格式错误"</span>) &#125;</span><br><span class="line"><span class="keyword">return</span> telNum.characters.<span class="built_in">count</span> &gt;= <span class="keyword">self</span>.minTelNumCount ? .succeed : .faild(message: <span class="string">"号码长度不足"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validatePassword</span><span class="params">(password: String)</span></span> -&gt; <span class="type">ValidateResult</span> &#123;</span><br><span class="line"><span class="keyword">return</span> password.characters.<span class="built_in">count</span> &gt;= <span class="keyword">self</span>.minPasswordCount ? .succeed : .faild(message: <span class="string">"密码长度不足"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MARK: - NetworkServer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkServer</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">let</span> instance = <span class="type">NetworkServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">shareInstace</span>() -&gt; <span class="title">NetworkServer</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Lazy</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> provider: <span class="type">RxMoyaProvider</span> = &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">RxMoyaProvider</span>&lt;<span class="type">RequestTarget</span>&gt;(stubClosure: <span class="type">MoyaProvider</span>.<span class="type">ImmediatelyStub</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginWork</span><span class="params">(telNum: String, password: String)</span></span> -&gt; <span class="type">Driver</span>&lt;<span class="type">ResponseResult</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.provider.request(.login(telNum: telNum, password: password))</span><br><span class="line">.mapJSON()</span><br><span class="line">.<span class="built_in">map</span> &#123; jsonObject -&gt; <span class="type">ResponseResult</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">let</span> decodeResult: <span class="type">Decoded</span>&lt;<span class="type">ResponseResult</span>&gt; = decode(jsonObject)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">try</span> decodeResult.dematerialize()</span><br><span class="line">&#125;</span><br><span class="line">.asDriver(onErrorJustReturn: .faild(message: <span class="string">"网络或数据解析错误！"</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里有两个服务类，第一个为验证服务类，用于验证用户号码格式以及号码或密码的长度是否达到要求，第二个为网络请求类，用于向后台请求登录，这里要注意的是，<code>RxMoyaProvider</code>一定要被类引用，否则若把它设置为局部变量，请求就不能完成。在构建<code>RxMoyaProvider</code>的时候，我在构造方法中传入了<code>MoyaProvider.ImmediatelyStub</code>这个<code>stubClosure</code>参数，为的是测试，这样子系统就不会请求网络，而是直接通过获取<code>Target</code>的<code>sampleData</code>属性。</p><h3 id="ViewModel-视图模型"><a href="#ViewModel-视图模型" class="headerlink" title=".ViewModel 视图模型"></a><strong><4>.ViewModel 视图模型</4></strong></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> RxSwift</span><br><span class="line"><span class="keyword">import</span> RxCocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"><span class="comment">//  MARK: - Output</span></span><br><span class="line"><span class="keyword">let</span> juhuaShow: <span class="type">Driver</span>&lt;<span class="type">Bool</span>&gt;</span><br><span class="line"><span class="keyword">let</span> loginEnable: <span class="type">Driver</span>&lt;<span class="type">Bool</span>&gt;</span><br><span class="line"><span class="keyword">let</span> tipString: <span class="type">Driver</span>&lt;<span class="type">String</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>(input: (telNum: <span class="type">Driver</span>&lt;<span class="type">String</span>&gt;, password: <span class="type">Driver</span>&lt;<span class="type">String</span>&gt;, loginTap: <span class="type">Driver</span>&lt;<span class="type">Void</span>&gt;),</span><br><span class="line">dependency: (validateServer: <span class="type">ValidateServer</span>, networkServer: <span class="type">NetworkServer</span>)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> telNumValidate = input.telNum</span><br><span class="line">.distinctUntilChanged()</span><br><span class="line">.<span class="built_in">map</span> &#123; <span class="keyword">return</span> dependency.validateServer.validateTelNum($<span class="number">0</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> passwordValidate = input.password</span><br><span class="line">.distinctUntilChanged()</span><br><span class="line">.<span class="built_in">map</span> &#123; <span class="keyword">return</span> dependency.validateServer.validatePassword($<span class="number">0</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validateString = [telNumValidate, passwordValidate]</span><br><span class="line">.combineLatest &#123; result -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">var</span> validateString = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> .faild(message) = result[<span class="number">0</span>] &#123;</span><br><span class="line">validateString = <span class="string">"\(message)"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> .faild(message) = result[<span class="number">1</span>] &#123;</span><br><span class="line">validateString = <span class="string">"\(validateString) \(message)"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> validateString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> telNumAndPassWord = <span class="type">Driver</span>.combineLatest(input.telNum, input.password) &#123; ($<span class="number">0</span>, $<span class="number">1</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loginString = input.loginTap.withLatestFrom(telNumAndPassWord)</span><br><span class="line">.flatMapLatest &#123;</span><br><span class="line"><span class="keyword">return</span> dependency.networkServer.loginWork($<span class="number">0.0</span>, password: $<span class="number">0.1</span>)</span><br><span class="line">&#125;</span><br><span class="line">.<span class="built_in">map</span> &#123; result -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">switch</span> result &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .faild(message):</span><br><span class="line"><span class="keyword">return</span> <span class="string">"登录失败 \(message)"</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .succeed(user):</span><br><span class="line"><span class="keyword">return</span> <span class="string">"登录成功，用户名:\(user.name)，标识符:\(user.userToken)"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.loginEnable = [telNumValidate, passwordValidate]</span><br><span class="line">.combineLatest &#123; result -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">return</span> result[<span class="number">0</span>] ^-^ result[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.juhuaShow = <span class="type">Driver</span>.of(loginString.<span class="built_in">map</span>&#123;<span class="number">_</span> <span class="keyword">in</span> <span class="literal">false</span>&#125;, input.loginTap.<span class="built_in">map</span>&#123;<span class="number">_</span> <span class="keyword">in</span> <span class="literal">true</span>&#125;)</span><br><span class="line">.merge()</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.tipString = <span class="type">Driver</span>.of(validateString, loginString)</span><br><span class="line">.merge()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ViewModel</code>相对来说比较难搞，毕竟我们要处理好每一个输入输出的关系，灵活进行转变。在这里，没有显式的状态变量，只有对外的输出以及构造时对内的输入，思想就是将输入流进行加工转变成输出流，数据在传输中能够单向传递。</p><h3 id="ViewController-视图控制器"><a href="#ViewController-视图控制器" class="headerlink" title=".ViewController 视图控制器"></a><strong><5>.ViewController 视图控制器</5></strong></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> RxSwift</span><br><span class="line"><span class="keyword">import</span> RxCocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> telNumTF: <span class="type">UITextField</span>!</span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> passWordTF: <span class="type">UITextField</span>!</span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> juhuaView: <span class="type">UIActivityIndicatorView</span>!</span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginBtn: <span class="type">UIButton</span>!</span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> tipLb: <span class="type">UILabel</span>!</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> viewModel: <span class="type">ViewModel</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"><span class="keyword">self</span>.viewModel = <span class="type">ViewModel</span>(input: (</span><br><span class="line"><span class="keyword">self</span>.telNumTF.rx_text.asDriver(),</span><br><span class="line"><span class="keyword">self</span>.passWordTF.rx_text.asDriver(),</span><br><span class="line"><span class="keyword">self</span>.loginBtn.rx_tap.asDriver()),</span><br><span class="line">dependency: (</span><br><span class="line"><span class="type">ValidateServer</span>.shareInstance(),</span><br><span class="line"><span class="type">NetworkServer</span>.shareInstace())</span><br><span class="line">)</span><br><span class="line"><span class="comment">//  Binding</span></span><br><span class="line"><span class="keyword">self</span>.viewModel!.juhuaShow</span><br><span class="line">.drive(<span class="keyword">self</span>.juhuaView.rx_animating)</span><br><span class="line">.addDisposableTo(<span class="keyword">self</span>.disposeBag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.viewModel!.loginEnable</span><br><span class="line">.drive(<span class="keyword">self</span>.loginBtn.rx_loginEnable)</span><br><span class="line">.addDisposableTo(<span class="keyword">self</span>.disposeBag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.viewModel!.tipString</span><br><span class="line">.drive(<span class="keyword">self</span>.tipLb.rx_text)</span><br><span class="line">.addDisposableTo(<span class="keyword">self</span>.disposeBag)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> rx_loginEnable: <span class="type">AnyObserver</span>&lt;<span class="type">Bool</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: <span class="keyword">self</span>, binding: &#123; (button, bool) <span class="keyword">in</span></span><br><span class="line"><span class="keyword">self</span>.enabled = bool</span><br><span class="line"><span class="keyword">if</span> bool &#123;</span><br><span class="line">button.backgroundColor = <span class="type">UIColor</span>.greenColor()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">button.backgroundColor = <span class="type">UIColor</span>.redColor()</span><br><span class="line">&#125;</span><br><span class="line">&#125;).asObserver()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们构建好<code>ViewModel</code>，将输入以及视图模型依赖的服务传入<code>ViewModel</code>构造方法中，并在下面把<code>ViewModel</code>的输入去驱动UI视图。</p><p><a href="https://github.com/TangentW/RxLoginTest" target="_blank" rel="noopener">源码地址</a></p>]]></content>
      
      <categories>
          
          <category> swift学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift 之循环语句和闭包</title>
      <link href="/2017/03/08/swift-closure/"/>
      <url>/2017/03/08/swift-closure/</url>
      <content type="html"><![CDATA[<p>swift简介: 苹果于2014年WWDC（苹果开发者大会）发布的新开发语言，可与Objective-C共同运行于Mac OS和iOS平台，用于搭建基于苹果平台的应用程序。2015年12月4日，苹果公司宣布其Swift编程语言现在开放源代码。<br><a id="more"></a></p><h2 id="1-流程控制"><a href="#1-流程控制" class="headerlink" title="1.流程控制"></a>1.流程控制</h2><p>swift使用三种语句控制流程：<code>for-in</code>、<code>for</code>、<code>switch-case</code>、<code>while</code>和<code>repeat-while</code>，且判断条件的括号可以省略</p><ul><li><code>for-in</code> 循环</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">"Jack"</span>, <span class="string">"Rose"</span>, <span class="string">"Mike"</span>, <span class="string">"Puppy"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names &#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, \(name)!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不需要使用到迭代的值，使用下划线`_`忽略该值</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><ul><li><code>if</code> 语句</li></ul><p>原来在oc中,if后的条件语句可以是这样:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设judge是一个<span class="built_in">BOOL</span>型或<span class="built_in">NSString</span>或<span class="built_in">NSArray</span>或<span class="built_in">NSDictionary</span>等类型</span><br><span class="line"><span class="keyword">if</span> (judge)&#123;</span><br><span class="line"><span class="comment">//write code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在swift中,if后的条件返回值必须是Bool型,在写成上面的那种情形就会报错….  所以在swift中这样写:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> judge == <span class="literal">true</span> &#123;</span><br><span class="line"><span class="comment">//write code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Swift2.0以后，不支持<code>do-while</code>语句，使用<code>repeat-whil</code>e代替，用法与<code>do-while</code>一样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span> &#123;  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"repeat while : \(j)"</span>)  </span><br><span class="line">j++  </span><br><span class="line">&#125; <span class="keyword">while</span> j &lt; <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li><code>guard-else</code> 保镖模式</li></ul><p>在执行操作前，进行检查，如果不符合，则拦截，使用方式与if有些类似，如果与let结合使用，可以对可选类型解包，先看看普通的<code>if-else</code>模式:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(i: Int?)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> i = i <span class="keyword">where</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 符合条件的处理</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不符合条件的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的处理把条件放在了条件判断内部，使用guard与之相反，把正确的情况放在最外部，而异常情况放在条件判断内部:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(i: Int?)</span></span> &#123;</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> i = i <span class="keyword">where</span> i &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 在这里拦截，处理不符合条件的情况</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 符合条件的处理，这个时候已经对i进行了拆包，i是非可选类型，可以直接使用</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保镖模式可以避免代码中过多的流程判断代码导致过多的代码块嵌套，增强可读性!!!</p><p><strong>保镖模式<code>guard-else</code>内的代码块必须包含<code>break</code>, <code>return</code>等跳出代码块的关键字</strong></p><ul><li><code>switch-case</code></li></ul><p>swift中的<code>switch</code>语句最明显的区别于oc的地方在于,不需要break</p><h2 id="2-函数-方法"><a href="#2-函数-方法" class="headerlink" title="2. 函数(方法)"></a>2. 函数(方法)</h2><h3 id="1-基本形式"><a href="#1-基本形式" class="headerlink" title="1.基本形式"></a>1.基本形式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">///单个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span>  函数名称<span class="params">(参数<span class="number">1</span>: 参数<span class="number">1</span>类型, 参数<span class="number">2</span>: 参数<span class="number">2</span>类型)</span></span> -&gt; 返回值 &#123;</span><br><span class="line"><span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///多个返回值(元组)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span>  函数名称<span class="params">(参数<span class="number">1</span>: 参数<span class="number">1</span>类型, 参数<span class="number">2</span>: 参数<span class="number">2</span>类型)</span></span> -&gt; (x: <span class="type">String</span>, y: <span class="type">Int</span>) &#123;</span><br><span class="line"><span class="comment">//函数体</span></span><br><span class="line"><span class="keyword">return</span> (<span class="string">"abc"</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span>  函数名 </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种相当于oc中的加号方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> 函数名(参数: 参数类型) -&gt; 返回值类型 </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2.闭包"></a>2.闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///闭包函数声明形式:</span></span><br><span class="line">&#123; (parameters) -&gt; returnType <span class="keyword">in</span></span><br><span class="line">statements      <span class="comment">// 可以有多行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数变量</span></span><br><span class="line"><span class="keyword">var</span> addfunc: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包的写法</span></span><br><span class="line"><span class="comment">// 1. 完整写法</span></span><br><span class="line">addfunc = &#123;(a: <span class="type">Int</span>, b: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) <span class="keyword">in</span></span><br><span class="line"><span class="comment">//var c = a + 1       //函数体可以有多条语句，如果在同一行，需要用分号隔开，函数体不需要大括号</span></span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 前面的addfunc变量可以推断出后面函数的参数类型和返回值类型，故可以省略</span></span><br><span class="line">addfunc = &#123;(a, b) <span class="keyword">in</span> <span class="keyword">return</span> a + b&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 参数列表括号可以省去，函数只有一条语句时，return可以省略</span></span><br><span class="line">addfunc = &#123;a, b <span class="keyword">in</span> a + b&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 参数和in可以省去，通过$和索引取得参数</span></span><br><span class="line">addfunc = &#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符需要的参数与函数参数一致，可以省去参数，并使用括号括起来，作为参数时，可不用括号</span></span><br><span class="line">addfunc = (+)</span><br></pre></td></tr></table></figure><h3 id="3-Trailing-尾行-闭包"><a href="#3-Trailing-尾行-闭包" class="headerlink" title="3.Trailing(尾行)闭包"></a>3.Trailing(尾行)闭包</h3><p>如果函数作为另一个函数的参数，并且是最后一个参数时，可以通过<code>Trainling</code>闭包来增强函数的可读性</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunctionThatTakesAClosure</span><span class="params">(a: Int, closure: <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line"><span class="comment">// 函数体部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 一般形式</span></span><br><span class="line">someFunctionThatTakesAClosure(<span class="number">10</span>, closure: &#123;</span><br><span class="line"><span class="comment">// 闭包主体部分</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Trainling闭包的方式</span></span><br><span class="line">someFunctionThatTakesAClosure(<span class="number">10</span>) &#123;</span><br><span class="line"><span class="comment">// 闭包主体部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 如果没有其他参数时，可以省略括号</span></span><br><span class="line">someFunctionThatTakesAClosure &#123;</span><br><span class="line"><span class="comment">// 闭包主体部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Escaping（逃逸）闭包"><a href="#4-Escaping（逃逸）闭包" class="headerlink" title="4.Escaping（逃逸）闭包"></a>4.Escaping（逃逸）闭包</h3><p>如果一个闭包/函数作为参数传给另外一个函数，但这个闭包在传入函数返回之后才会执行，就称该闭包在函数中”逃逸”，需要在函数参数添加<code>@escaping</code>声明，来声明该闭包/函数允许从函数中”逃逸”，如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> completionHandlers: [() -&gt; <span class="type">Void</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入的闭包/函数并没有在函数内执行，需要在函数类型钱添加@escaping声明</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunctionWithEscapingClosure</span><span class="params">(completionHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">completionHandlers.append(completionHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>逃逸闭包只是一个声明，以增强函数的意图</strong></p><h3 id="5-自动闭包"><a href="#5-自动闭包" class="headerlink" title="5.自动闭包"></a>5.自动闭包</h3><p>对于没有参数的闭包，swift提供了一种简写的方式，直接写函数体，不需要函数形式（返回值和参数列表），如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个自动闭包（无参数，可以有返回值，返回值类型swift可以自动识别）</span></span><br><span class="line"><span class="keyword">let</span> sayHello = &#123; <span class="built_in">print</span>(<span class="string">"hello world"</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用闭包函数</span></span><br><span class="line">sayHello()</span><br></pre></td></tr></table></figure><p><strong>自动闭包只是闭包的一种简写方式</strong></p><p>如果一个函数接受一个不带参数的闭包:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logIfTrue</span><span class="params">(predicate: <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> predicate() &#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"True"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logIfTrue(predicate: &#123; <span class="keyword">return</span> <span class="number">1</span> &lt; <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简化return</span></span><br><span class="line">logIfTrue(predicate: &#123; <span class="number">1</span> &lt; <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure><p>上面代码看起来可读性不是很好，swift引入了一个关键字<code>@autoclosure</code>，简化自动闭包的大括号，在闭包类型前面添加该关键字声明:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logIfTrue</span><span class="params">(predicate: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> predicate() &#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"True"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">logIfTrue(predicate:<span class="number">1</span> &lt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>@autoclosure 关键字是为了简化闭包的写法，增强可读性，这里的例子比较简单，可以参考：<a href="http://swifter.tips/autoclosure/" target="_blank" rel="noopener">了解更多点击这里</a></p>]]></content>
      
      <categories>
          
          <category> swift学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> closure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS之WiFi相关功能总结</title>
      <link href="/2017/03/08/WiFi/"/>
      <url>/2017/03/08/WiFi/</url>
      <content type="html"><![CDATA[<p>iOS 开发中难免会遇到很多与网络方面的判断，这里做个汇总，大多可能是与WiFi相关的。<br><a id="more"></a></p><h2 id="1-Ping域名、Ping某IP"><a href="#1-Ping域名、Ping某IP" class="headerlink" title="1.Ping域名、Ping某IP"></a>1.Ping域名、Ping某IP</h2><p>有时候可能会遇到ping 某个域名或者ip通不通，再做下一步操作。这里的ping与传统的做get或者post请求还是有很大区别的。比如我们连接了某个WiFi，测试ping <a href="http://www.baidu.com，如果能ping" target="_blank" rel="noopener">www.baidu.com，如果能ping</a> 通，基本可以断定可以上网了，但是如果我们做了一个get 请求（url 是<a href="http://www.baidu.com）,路由器可能重定向这个WiFi内的某网页了，依然没有错误返回，就会误认为可以正常上网。" target="_blank" rel="noopener">www.baidu.com）,路由器可能重定向这个WiFi内的某网页了，依然没有错误返回，就会误认为可以正常上网。</a></p><p>这里有关于ping命令的详细解释：<a href="http://baike.baidu.com/item/ping/6235?fr=aladdin" target="_blank" rel="noopener">百度百科ping</a></p><p>iOS中想要ping域名或者ip，苹果提供了一个官方例子:<a href="https://developer.apple.com/library/content/samplecode/SimplePing/Introduction/Intro.html#//apple_ref/doc/uid/DTS10000716-Intro-DontLinkElementID_2" target="_blank" rel="noopener">SimplePing</a></p><p>在例子中，有一个苹果已经封装过的类【SimplePing.h】和【SimplePing.m】</p><p>使用起来也相当的简单：</p><h3 id="a-首先创建一个Ping对象："><a href="#a-首先创建一个Ping对象：" class="headerlink" title="a.首先创建一个Ping对象："></a>a.首先创建一个Ping对象：</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SimplePing *pinger = [[SimplePing alloc] initWithHostName:<span class="keyword">self</span>.hostName];</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.pinger = pinger;</span><br><span class="line"></span><br><span class="line">pinger.delegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">pinger.addressStyle = SimplePingAddressStyleICMPv4;</span><br><span class="line"></span><br><span class="line">[pinger start];</span><br></pre></td></tr></table></figure><h3 id="b-然后在start成功的代理方法中，发送数据报文："><a href="#b-然后在start成功的代理方法中，发送数据报文：" class="headerlink" title="b.然后在start成功的代理方法中，发送数据报文："></a>b.然后在start成功的代理方法中，发送数据报文：</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  start成功，也就是准备工作做完后的回调</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)simplePing:(SimplePing *)pinger didStartWithAddress:(<span class="built_in">NSData</span> *)address&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送测试报文数据</span></span><br><span class="line">[<span class="keyword">self</span>.pinger sendPingWithData:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)simplePing:(SimplePing *)pinger didFailWithError:(<span class="built_in">NSError</span> *)error&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"didFailWithError"</span>);</span><br><span class="line">[<span class="keyword">self</span>.pinger stop];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-其他几个代理方法也非常简单，就简单记录一下"><a href="#c-其他几个代理方法也非常简单，就简单记录一下" class="headerlink" title="c.其他几个代理方法也非常简单，就简单记录一下:"></a>c.其他几个代理方法也非常简单，就简单记录一下:</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送测试报文成功的回调方法</span></span><br><span class="line">- (<span class="keyword">void</span>)simplePing:(SimplePing *)pinger didSendPacket:(<span class="built_in">NSData</span> *)packet sequenceNumber:(uint16_t)sequenceNumber&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"#%u sent"</span>, sequenceNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送测试报文失败的回调方法</span></span><br><span class="line">- (<span class="keyword">void</span>)simplePing:(SimplePing *)pinger didFailToSendPacket:(<span class="built_in">NSData</span> *)packet sequenceNumber:(uint16_t)sequenceNumber error:(<span class="built_in">NSError</span> *)error&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"#%u send failed: %@"</span>, sequenceNumber, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到ping的地址所返回的数据报文回调方法</span></span><br><span class="line">- (<span class="keyword">void</span>)simplePing:(SimplePing *)pinger didReceivePingResponsePacket:(<span class="built_in">NSData</span> *)packet sequenceNumber:(uint16_t)sequenceNumber&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"#%u received, size=%zu"</span>, sequenceNumber, packet.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)simplePing:(SimplePing *)pinger didReceiveUnexpectedPacket:(<span class="built_in">NSData</span> *)packet&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"#%s"</span>,__func__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点："><a href="#注意点：" class="headerlink" title="*********注意点："></a>*********注意点：</h3><p>iOS 中 ping失败后（即发送测试报文成功后，一直没后收到响应的报文）,不会有任何回调方法告知我们。而一般ping 一次的结果也不太准确，ping 花费的时间也非常短，所以我们一般会ping多次，发送一次ping 测试报文0.5s后检测一下这一次ping是否已经收到响应。0.5s后检测时，如果已经收到响应，则可以ping 通；如果没有收到响应，则视为超时。</p><p>做法也有很多种，可以用NSTimer或者 {- (void)performSelector: withObject:afterDelay:}</p><p>这里有一个别人写的工程：<a href="https://github.com/lovesunstar/STPingTest" target="_blank" rel="noopener">https://github.com/lovesunstar/STPingTest</a></p><p><img src="http://img.blog.csdn.net/20160715105505704?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="PingTest效果图"></p><p><img src="http://img.blog.csdn.net/20160715105532157?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="终端ping效果图"></p><h2 id="2-获取WiFi信息"><a href="#2-获取WiFi信息" class="headerlink" title="2.获取WiFi信息"></a>2.获取WiFi信息</h2><p>以前物联网刚火的时候，出现过很多一体式无线路由，所以App里难免会遇到要判断当前所连接的WiFi，以及获取WiFi信息的功能。</p><p>需要导入import SystemConfiguration.CaptiveNetwork</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取WiFi 信息，返回的字典中包含了WiFi的名称、路由器的Mac地址、还有一个Data(转换成字符串打印出来是wifi名称)</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)fetchSSIDInfo &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *ifs = (__bridge_transfer <span class="built_in">NSArray</span> *)<span class="built_in">CNCopySupportedInterfaces</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *info = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *ifnam <span class="keyword">in</span> ifs) &#123;</span><br><span class="line"></span><br><span class="line">info = (__bridge_transfer <span class="built_in">NSDictionary</span> *)<span class="built_in">CNCopyCurrentNetworkInfo</span>((__bridge <span class="built_in">CFStringRef</span>)ifnam);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (info &amp;&amp; [info count]) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印出来的结果：</span></span><br><span class="line"></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">28</span>:<span class="number">51.674</span> SimplePing[<span class="number">18883</span>:<span class="number">6790207</span>] WIFI_INFO:&#123;</span><br><span class="line"></span><br><span class="line">BSSID = <span class="string">"a4:2b:8c:c:7f:bd"</span>;</span><br><span class="line"></span><br><span class="line">SSID = bdmy06;</span><br><span class="line"></span><br><span class="line">SSIDDATA = ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-获取WiFi名称"><a href="#3-获取WiFi名称" class="headerlink" title="3.获取WiFi名称"></a>3.获取WiFi名称</h2><p>有了上一步，获取WiFi名称就非常简单了。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *WiFiName = info[<span class="string">@"SSID"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结果：</span></span><br><span class="line"></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">35</span>:<span class="number">13.059</span> SimplePing[<span class="number">18887</span>:<span class="number">6791418</span>] bdmy06</span><br></pre></td></tr></table></figure><p>完整的：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)fetchWiFiName &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *ifs = (__bridge_transfer <span class="built_in">NSArray</span> *)<span class="built_in">CNCopySupportedInterfaces</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *WiFiName = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *ifnam <span class="keyword">in</span> ifs) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *info = (__bridge_transfer <span class="built_in">NSDictionary</span> *)<span class="built_in">CNCopyCurrentNetworkInfo</span>((__bridge <span class="built_in">CFStringRef</span>)ifnam);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (info &amp;&amp; [info count]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里其实对应的有三个key:kCNNetworkInfoKeySSID、kCNNetworkInfoKeyBSSID、kCNNetworkInfoKeySSIDData，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不过它们都是CFStringRef类型的</span></span><br><span class="line"></span><br><span class="line">WiFiName = [info objectForKey:(__bridge <span class="built_in">NSString</span> *)kCNNetworkInfoKeySSID];</span><br><span class="line"></span><br><span class="line"><span class="comment">//            WiFiName = [info objectForKey:@"SSID"];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> WiFiName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-获取当前所连接WiFi的网关地址"><a href="#4-获取当前所连接WiFi的网关地址" class="headerlink" title="4.获取当前所连接WiFi的网关地址"></a>4.获取当前所连接WiFi的网关地址</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)getGatewayIpForCurrentWiFi &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *address = <span class="string">@"error"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ifaddrs *interfaces = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ifaddrs *temp_addr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> success = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve the current interfaces - returns 0 on success</span></span><br><span class="line"></span><br><span class="line">success = getifaddrs(&amp;interfaces);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (success == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Loop through linked list of interfaces</span></span><br><span class="line"></span><br><span class="line">temp_addr = interfaces;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(temp_addr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int i=255;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while((i--)&gt;0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if interface is en0 which is the wifi connection on the iPhone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>([[<span class="built_in">NSString</span> stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:<span class="string">@"en0"</span>])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get NSString from C String //ifa_addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ifa-&gt;ifa_dstaddr is the broadcast address, which explains the "255's"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                    address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr-&gt;ifa_dstaddr)-&gt;sin_addr)];</span></span><br><span class="line"></span><br><span class="line">address = [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//routerIP----192.168.1.255 广播地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"broadcast address--%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_dstaddr)-&gt;sin_addr)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--192.168.1.106 本机地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"local device ip--%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--255.255.255.0 子网掩码地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"netmask--%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_netmask)-&gt;sin_addr)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--en0 端口地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"interface--%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:temp_addr-&gt;ifa_name]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp_addr = temp_addr-&gt;ifa_next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Free memory</span></span><br><span class="line"></span><br><span class="line">freeifaddrs(interfaces);</span><br><span class="line"></span><br><span class="line">in_addr_t i = inet_addr([address cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]);</span><br><span class="line"></span><br><span class="line">in_addr_t* x = &amp;i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *s = getdefaultgateway(x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *ip=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d.%d.%d.%d"</span>,s[<span class="number">0</span>],s[<span class="number">1</span>],s[<span class="number">2</span>],s[<span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line">free(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ip;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-获取本机在WiFi环境下的IP地址"><a href="#5-获取本机在WiFi环境下的IP地址" class="headerlink" title="5.获取本机在WiFi环境下的IP地址"></a>5.获取本机在WiFi环境下的IP地址</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)getLocalIPAddressForCurrentWiFi</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *address = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ifaddrs *interfaces = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ifaddrs *temp_addr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> success = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve the current interfaces - returns 0 on success</span></span><br><span class="line"></span><br><span class="line">success = getifaddrs(&amp;interfaces);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (success == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Loop through linked list of interfaces</span></span><br><span class="line"></span><br><span class="line">temp_addr = interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(temp_addr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if interface is en0 which is the wifi connection on the iPhone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>([[<span class="built_in">NSString</span> stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:<span class="string">@"en0"</span>]) &#123;</span><br><span class="line"></span><br><span class="line">address = [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp_addr = temp_addr-&gt;ifa_next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">freeifaddrs(interfaces);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-获取广播地址、子网掩码、端口等"><a href="#6-获取广播地址、子网掩码、端口等" class="headerlink" title="6.获取广播地址、子网掩码、端口等"></a>6.获取广播地址、子网掩码、端口等</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSMutableDictionary</span> *)getLocalInfoForCurrentWiFi &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ifaddrs *interfaces = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ifaddrs *temp_addr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> success = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve the current interfaces - returns 0 on success</span></span><br><span class="line"></span><br><span class="line">success = getifaddrs(&amp;interfaces);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (success == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Loop through linked list of interfaces</span></span><br><span class="line"></span><br><span class="line">temp_addr = interfaces;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(temp_addr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if interface is en0 which is the wifi connection on the iPhone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>([[<span class="built_in">NSString</span> stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:<span class="string">@"en0"</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----192.168.1.255 广播地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *broadcast = [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_dstaddr)-&gt;sin_addr)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (broadcast) &#123;</span><br><span class="line"></span><br><span class="line">[dict setObject:broadcast forKey:<span class="string">@"broadcast"</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"broadcast address--%@"</span>,broadcast);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--192.168.1.106 本机地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *localIp = [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (localIp) &#123;</span><br><span class="line"></span><br><span class="line">[dict setObject:localIp forKey:<span class="string">@"localIp"</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"local device ip--%@"</span>,localIp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--255.255.255.0 子网掩码地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *netmask = [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_netmask)-&gt;sin_addr)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (netmask) &#123;</span><br><span class="line"></span><br><span class="line">[dict setObject:netmask forKey:<span class="string">@"netmask"</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"netmask--%@"</span>,netmask);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--en0 端口地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *interface = [<span class="built_in">NSString</span> stringWithUTF8String:temp_addr-&gt;ifa_name];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (interface) &#123;</span><br><span class="line"></span><br><span class="line">[dict setObject:interface forKey:<span class="string">@"interface"</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"interface--%@"</span>,interface);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dict;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp_addr = temp_addr-&gt;ifa_next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Free memory</span></span><br><span class="line"></span><br><span class="line">freeifaddrs(interfaces);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dict;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>打印结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">59</span>:<span class="number">09.257</span> SimplePing[<span class="number">19141</span>:<span class="number">6830567</span>] wifi:&#123;</span><br><span class="line"></span><br><span class="line">broadcast = <span class="string">"192.168.1.255"</span>;</span><br><span class="line"></span><br><span class="line">interface = en0;</span><br><span class="line"></span><br><span class="line">localIp = <span class="string">"192.168.1.7"</span>;</span><br><span class="line"></span><br><span class="line">netmask = <span class="string">"255.255.255.0"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS 网络相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WiFi </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
