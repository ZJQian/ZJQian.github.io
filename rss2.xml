<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ZJQian&#39;s Blogs</title>
    <link>https://zjqian.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>stay hungry, stay foolish</description>
    <pubDate>Fri, 25 Jan 2019 02:21:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>FlexLib 之热门预览</title>
      <link>https://zjqian.top/2019/01/25/FlexLib%E4%B9%8B%E7%83%AD%E9%97%A8%E9%A2%84%E8%A7%88/</link>
      <guid>https://zjqian.top/2019/01/25/FlexLib%E4%B9%8B%E7%83%AD%E9%97%A8%E9%A2%84%E8%A7%88/</guid>
      <pubDate>Fri, 25 Jan 2019 02:00:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;设置环境&quot;&gt;&lt;a href=&quot;#设置环境&quot; class=&quot;headerlink&quot; title=&quot;设置环境&quot;&gt;&lt;/a&gt;设置环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在应用启动时调用FlexRestorePreviewSetting。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="设置环境"><a href="#设置环境" class="headerlink" title="设置环境"></a>设置环境</h2><ul><li><p>在应用启动时调用FlexRestorePreviewSetting。</p><a id="more"></a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- （BOOL）应用程序：（UIApplication *）应用程序didFinishLaunchingWithOptions :( NSDictionary *）launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    FlexRestorePreviewSetting（）;</span><br><span class="line">    </span><br><span class="line">    //任何其他启动... </span><br><span class="line">    返回 YES ;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此功能对产品版本无效。</p><ul><li>在Mac上启动HTTP Server。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start</span><br></pre></td></tr></table></figure><p>在终端cd到您的项目目录，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8000               ＃ <span class="keyword">for</span> python 2.x   </span><br><span class="line">python -m http.server 8000                    ＃ <span class="keyword">for</span> python 3.x</span><br></pre></td></tr></table></figure><ul><li>设置预览基本网址</li></ul><p>打开预览设置页面，您可以使用以下方法之一：</p><ol><li>出现<code>FlexBaseVC</code>的任何子类时按<code>Command + D</code>. 这是最简单的方法，但仅在DEBUG模式下可用。</li><li>在您的应用中调用<code>FlexSetPreviewVC :: presentInVC</code>以打开此页面。 然后，您可以设置预览基本URL。</li></ol><h2 id="预览xml布局的修改"><a href="#预览xml布局的修改" class="headerlink" title="预览xml布局的修改"></a>预览xml布局的修改</h2><p>有三种方法可以做到：</p><ol><li>出现FlexBaseVC子类时按<code>Control + E</code>. 这将打开“在线Flex Explorer”，然后您可以通过HTTP协议导航和查看xml布局。您也可以调用FlexHttpVC :: presentInVC使其可用。</li><li>出现视图控制器时按<code>Command + R</code>. 这将重新加载视图控制器布局，但不会调用任何启动方法，如viewDidLoad。</li><li>在预览设置页面中，启用“在线加载资源”。然后所有布局都将由HTTP协议加载。您可以重新打开当前页面以刷新它。即使您的页面需要一些网络请求，这也可以正常工作。</li></ol><p><strong>注意：显示视图控制器时，应在模拟器上按下所有快捷方式，而不是在XCode中。 最好的方法是方法1和方法3。方法2有许多限制。</strong></p><h2 id="关于目录索引"><a href="#关于目录索引" class="headerlink" title="关于目录索引"></a>关于目录索引</h2><p>在预览设置页面上，您可以创建目录索引。这将遍历所有文件夹以提取xml布局。在此之后，框架可以轻松地按名称查找布局。否则，框架将从预览库url +’flexname.xml’加载布局。</p><p>转自：<a href="https://github.com/zhenglibao/FlexLib/wiki/Hot-preview#setup-environment" target="_blank" rel="noopener">https://github.com/zhenglibao/FlexLib/wiki/Hot-preview#setup-environment</a></p>]]></content:encoded>
      
      <comments>https://zjqian.top/2019/01/25/FlexLib%E4%B9%8B%E7%83%AD%E9%97%A8%E9%A2%84%E8%A7%88/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ios 仿写有妖气</title>
      <link>https://zjqian.top/2018/12/20/ios-%E4%BB%BF%E5%86%99%E6%9C%89%E5%A6%96%E6%B0%94/</link>
      <guid>https://zjqian.top/2018/12/20/ios-%E4%BB%BF%E5%86%99%E6%9C%89%E5%A6%96%E6%B0%94/</guid>
      <pubDate>Thu, 20 Dec 2018 07:04:19 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;有妖气仿写&quot;&gt;&lt;a href=&quot;#有妖气仿写&quot; class=&quot;headerlink&quot; title=&quot;有妖气仿写&quot;&gt;&lt;/a&gt;有妖气仿写&lt;/h1&gt;&lt;p&gt;闲来无事，App Store 里随便抓了一个爱派派进行一些仿写。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先声明：如有冒犯或侵权行为，请随时联系告知，我会立刻删除相关文件或资源。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="有妖气仿写"><a href="#有妖气仿写" class="headerlink" title="有妖气仿写"></a>有妖气仿写</h1><p>闲来无事，App Store 里随便抓了一个爱派派进行一些仿写。 </p><blockquote><p>首先声明：如有冒犯或侵权行为，请随时联系告知，我会立刻删除相关文件或资源。</p></blockquote><a id="more"></a><p>本次仿写是通过 <code>charles</code> 进行接口抓包， 然后代码是 MVC 格式进行书写；为了练习一下布局方式， 该项目采用了三种第三方库进行布局,，分别是<code>Masonry</code> 、<code>SDAutoLayout</code>、<code>YogaKit</code> 。 </p><p><strong>各自的特点</strong> ：</p><ul><li>Masonry：适用于大部分情况下的布局，易操作。缺点是代码量稍微多。</li><li>SDAutoLayout：在自适应 cell 行高的情况下，具有优势。</li><li>YogaKit：前端的<code>flexbox</code>布局方式，在普通视图中，如果不想事先设置视图的高度或宽度，可以考虑用该布局方式，代码清晰明了，易于理解。缺点是代码繁琐。</li></ul><p>示例代码：<br>Masonry：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[self.img_bg mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.edges.mas_equalTo(self.contentView);</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure><p>SDAutoLayout：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.img_cover.sd_layout</span><br><span class="line">    .leftEqualToView(self.contentView)</span><br><span class="line">    .topEqualToView(self.contentView)</span><br><span class="line">    .rightEqualToView(self.contentView)</span><br><span class="line">    .autoHeightRatio(296.0/504.0);</span><br></pre></td></tr></table></figure><p>YogaKit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UIView *v_header2 = [UIView new];</span><br><span class="line">[v_header addSubview:v_header2];</span><br><span class="line">[v_header2 configureLayoutWithBlock:^(YGLayout * _Nonnull layout) &#123;</span><br><span class="line">    layout.isEnabled = YES;</span><br><span class="line">    layout.alignItems = YGAlignCenter;</span><br><span class="line">    layout.flexDirection = YGFlexDirectionRow;</span><br><span class="line">    layout.marginHorizontal = YGPointValue(12);</span><br><span class="line">    layout.position = YGPositionTypeAbsolute;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p><strong>该项目实现的功能点</strong>：</p><ol><li>选项卡的应用。</li><li>tableView 多种cell 的应用。</li><li>广告页的应用。</li><li>皮肤切换的应用。</li><li>对网络请求的封装。</li><li>对普通 tableView 页面的封装。</li><li>对一些第三方库的应用。</li></ol><p><strong>效果图如下</strong>：</p><p><img src="/images/youyaoqi.gif" alt="有妖气"></p><p><a href="https://github.com/ZJQian/YouYaoQi" target="_blank" rel="noopener">项目地址</a></p>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/12/20/ios-%E4%BB%BF%E5%86%99%E6%9C%89%E5%A6%96%E6%B0%94/#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端 UI 框架汇总</title>
      <link>https://zjqian.top/2018/11/27/%E5%89%8D%E7%AB%AF-UI-%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/</link>
      <guid>https://zjqian.top/2018/11/27/%E5%89%8D%E7%AB%AF-UI-%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/</guid>
      <pubDate>Tue, 27 Nov 2018 02:34:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近需要一些前端框架,于是在网上整理了一些感觉不错的前端框架,有pc端和移动端,为了方便日后自己先记录下来了…&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近需要一些前端框架,于是在网上整理了一些感觉不错的前端框架,有pc端和移动端,为了方便日后自己先记录下来了…<br><a id="more"></a></p><p>##1. Bootstrap<br>首先说 <code>Bootstrap</code>，估计你也猜到会先说或者一定会有这个( 呵呵了 )，这是说明它的强大之处，拥有框架一壁江山的势气。自己刚入道的时候本着代码任何一个字母都得自己敲出来挡我者废的决心，来让自己成长。结果受到周围各种基友的引诱开始了 <code>Bootstrap</code> 旅程。本人虽然是个设计+前端的万里有一的人才，但是老天只让我会用 PS 和各种设计工具却不给我跟设计妹子一样的审美，所以这也是我最初选择 <code>Bootstrap</code> 的原因之一，它让我做出来的东西好歹能在妹子面前装个逼，不过时间长了难免觉得 <code>Bootstrap</code> 美的让人烦躁， 但好在它的每个版本都会有很大的改变，不会让人觉得自己做的网站会跟很多网站撞脸。Bootstrap 的用法及其简单( 这也可能就是 <code>Bootstrap</code> 作者阅攻城士无数，了解他们痛的结果 )，以至于是个小前端都可以快速上手，几乎没什么学习成本。</p><p>官网：<a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a><br>Github：<a href="https://github.com/twbs/bootstrap/" target="_blank" rel="noopener">https://github.com/twbs/bootstrap/</a><br>作者：Mark Otto 和Jacob Thornton Star：93,112</p><p><strong>总结</strong>：<code>Bootstrap</code> 最大的优势就是它非常流行，流行就代表你有问题就有很多人帮你解决问题，就代表装逼它就是利器，还有就是界面比较和谐，容易上手，关注它的童鞋应该发现最新 V4 版也开始支持 <code>FlexBox</code> 布局，这是非常好的升级体验。 劣势是 <code>class</code> 命名不够语义化，并且各种缩写，以至于我离了文档就是个菜，最近开始整混合 APP，选框架的时候首选就是它，但之前搞 PC 一直没注意，后来搞混合右键属性看它的时候，瞬间一阵凉风袭来，<code>Bootstrap</code> 好小，小到我只好选择别的框架。</p><p>##2.AUI<br>第三个是最近刚起来的<code>AUI</code>，虽然作者声称是专为<code>APICloud</code>开发者设计的一套UI框架，但实际它还是解决了很多移动前端开发的普遍问题，是主要面向混合开发的 CSS 框架。看起来作者比较猖狂，各种高级 CSS3 遍地使用，这让我也不得不去查查这些个 CSS3 的兼容性。不负众望果然选的都是兼容不错的属性，哈哈了一顿激动从前辈手上大胆认识了几个好东西，并且框架还提供了聊天界面、计数列表等组件，解决了很多复杂的让我骂娘的布局，现在可以直接拿走就用。</p><p>Github：<a href="https://github.com/liulangnan/aui" target="_blank" rel="noopener">https://github.com/liulangnan/aui</a><br>官网：<a href="http://www.auicss.com/" target="_blank" rel="noopener">http://www.auicss.com/</a><br>作者：流浪男 Star：92</p><p><strong>总结</strong>：这个框架对我来说有个优点就是纯 CSS 框架，自己以前也就用过 Pure，自己有点 JS 能力，如果不是复杂的效果，找个纯 CSS 框架自己随便改改就可以，而现在 CSS3 也已经能够做到动画，效率、质量、高效全兼顾，所以还是选择了这种 CSS 框架。有一点觉得不满的是这框架的文档真的好那什么，说好的高大上呢。</p><p>##3.Amaze UI<br>第二个介绍的是妹子UI，最初使用它是因为本尊遇到了一个爱纠结细节设计师，有一次她跟我的字体较上真了，结果一句顶万句的 BOOS 夸了她，我只好根据她的想法去解决，结果最后找到了<code>Amaze UI</code> 框架( 我不介意你叫我懒淫 )，按照官方的话说就是 “基于社区开源项目构建的一个跨屏前端框架，以移动优先，从小屏到大屏，最终实现所有屏幕适配，适应移动互联潮流” 。但其实我就是看中它能解决国内浏览器存在的跨屏适配和兼容性问题。</p><p>官网：<a href="http://amazeui.org/" target="_blank" rel="noopener">http://amazeui.org/</a><br>Github：<a href="https://github.com/amazeui/amazeui" target="_blank" rel="noopener">https://github.com/amazeui/amazeui</a><br>所属公司：云适配 Star：6710</p><p><strong>总结</strong>：Amaze UI 总的来说就是加入更多符合中国市场特性的元素，框架对跨屏、适配都做了的比较好的处理并且准备一了一系列的常用的网页组件，为减少搞兼容、适配各种敲键盘的加班狗们的工作时间做了不小的贡献。，框架还对中文排版优化，兼容中国本土主流浏览器、轻量化，不仅适用于桌面端，还更更适合移动端、包含一些封装好的Widgets。不过自也就我感觉 Amaze UI 文档是否有点太那什么了，比如 “人们不会在乎jQuery的那点流量。”，说实的在这真没啥，不过我从来不会说出来( 哈哈 )，代码和设计上感觉没太多突出的点。</p><p>##4.Frozen UI<br>有段时间看到 QQ 瞬间高大上了，后来四处打听，原来 QQ 客服端也用了 混合开发，其中QQ会员前端用的是 <code>Frozen UI</code>，并且这套框架开源，欣喜若狂耐不住心里的寂寞直接上手试了一遍，初体验感觉基础样式效果简单色调清爽，有个比较活跃的社区所以组件什么的也比较丰富。</p><p>Github：<a href="https://github.com/frozenui/frozenui" target="_blank" rel="noopener">https://github.com/frozenui/frozenui</a><br>官网：<a href="http://frozenui.github.io/" target="_blank" rel="noopener">http://frozenui.github.io/</a><br>作者： QQVIP FD Team Star：1,067</p><p><strong>总结</strong>：如果拿 <code>Frozen UI</code> 配合一些如 <code>APICloud</code> 用来做混合 APP 感觉就太酷了，或者原生的火鸡们拿去嵌套在应用中做前端开发，这个框架对 <code>android 2.3 +</code>、<code>ios 4.0 +</code> 做了兼容，或者拿来做 <code>Web App</code> 也是极好的选择，劣势的话从 UI 层面就可以看到了，谁让它是出生在QQ会员前端的呢。</p><p>##5.WeUI<br>是一个比较专一的框架，<code>WeUI</code>应该说比<code>FrozenUI</code>前者更专一，话说连个官网都不搞，所有答疑都在 gitHub Issues 解决了，这个框架极其简单，体积当然就不用说了，模块也就 7 个左右，不过体量虽然小做的却不错，口碑看 star 就够了，框架从 16/1/23 发版至今 github star 超过 7K,不过也不排除用户没地方发泄所以都跑到 git 上来，哈哈。</p><p>Github：<a href="https://github.com/weui/weui" target="_blank" rel="noopener">https://github.com/weui/weui</a><br>DEMO：<a href="http://weui.github.io/weui/" target="_blank" rel="noopener">http://weui.github.io/weui/</a><br>Star：7,129</p><p><strong>总结</strong>：看完微信设计团队设计的这套 DEMO，二话不说如果要做微信公众，这个二话不说必然是首选了。框架不好的地方简而言之就是框架本身应该就没考虑过让用户用到非微信的场景之下。</p><p>##6.SUI<br>“<code>SUI</code> 是一套基于<code>bootstrap</code>开发的前端组件库，同时它她也是一套设计规范。通过<code>SUI</code>，可以非常方便的设计和实现精美的页面”。 果然还是直接引用官方给的枯燥无味广告要节省自己的脑细胞( 囧… )，当然了就像广告说的，如果你之前用过 <code>Bootstrap</code>， 那么可以轻松转向 <code>SUI</code>，这可能就是淘宝给前端屌丝们的福利了。。 </p><p>Github：<a href="https://github.com/sdc-alibaba/sui" target="_blank" rel="noopener">https://github.com/sdc-alibaba/sui</a><br>官网：<a href="http://sui.taobao.org/sui/docs/index.html" target="_blank" rel="noopener">http://sui.taobao.org/sui/docs/index.html</a><br>Star：120</p><p>##7.MUI<br>曾经一直使用 <code>Android</code> 系统的我，后来见到 <code>IOS</code>，果断移情别恋了，不知道为什么苹果每次调整系统我都特别喜欢，后来一段时间因为缺设计我专门模仿 <code>IOS</code> 系统做 <code>UI</code>，但始终不能够做到很好，无意间就发现了 MUI 这个框架，这个框架给我的吸引之处就是它的 <code>UI</code> 是以 <code>IOS</code> 为主体设计的，当然它也补充了<code>android</code>特有<code>UI</code>样式。并且MUI官方声称用来开发深入以后发现拿它做 APP 还能够提高用户使用流畅度，然后便试着更深入的了解和使用一段时间。</p><p>官网：<a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">http://dev.dcloud.net.cn/mui/</a><br>Github：<a href="https://github.com/dcloudio/mui" target="_blank" rel="noopener">https://github.com/dcloudio/mui</a><br>Star：2,450</p><p><strong>总结</strong>：就像之前说的这个框架是以两大系统为参照来封装UI组件，框架自身还有一个较为活跃的社区，不太好的地方这也是我特别关注的一点，关于开发应用的流畅度，我当然知道这是 H5 目前的劣势，但是看到官网给的描述，还是抱着期待的心理试试看能否提升，然而它其实还是需要是借助 Webview来提升，而不是框架本身。</p><p>##8.Semantic UI<br>倒数第三个是 <code>Semantic UI</code>，接触这个框架还是因为 <code>Bootstrap</code>，<code>Semantic UI</code> 刚上线 github 就受到大量开发者的关注，以至于很多人拿它俩对比各种挑刺各种夸，是好是坏不能单凭别人三句四句就抬起手指开始赞，用了以后感觉 UI 上跟 <code>Bootstrap</code> 没太多的区别，不过代码命名规范上却相差甚大，本人认为 <code>Semantic UI</code> 是不是就想做的不一样，它的命名全是采用复合的方式，类名特别的离散，用的时候你得很小心自己扩展或者新增的 class 命名与它的类名冲突。</p><p>官网：<a href="http://www.semantic-ui.cn/" target="_blank" rel="noopener">http://www.semantic-ui.cn/</a><br>Github：<a href="https://github.com/semantic-org/semantic-ui/" target="_blank" rel="noopener">https://github.com/semantic-org/semantic-ui/</a></p><p>##9.Foundation<br><code>Foundation</code> 算是框架界的元老啦，都说框架去的早，而这个框架一直到现在依然这么的热门，如果你比较介意 <code>Bootstrap</code> 开发撞脸的尴尬事情，那么你可以考虑使用 <code>Foundation</code> 。即使你使用预定义的 UI 元素, 也不会与其他网站太像，就像官方说的给开发者更灵活的框架体验。</p><p>官网：<a href="http://foundation.zurb.com/" target="_blank" rel="noopener">http://foundation.zurb.com/</a><br>Github：<a href="https://github.com/zurb/foundation-sites" target="_blank" rel="noopener">https://github.com/zurb/foundation-sites</a><br>Star：22,736</p><p>##10.UiKit<br><code>UIkit</code>是<code>YOOtheme</code>团队开发的，在许多<code>WordPress</code>主题中都有应用(也就是如果你是个 <code>WordPress</code> 爱好者，那么这个框架应该比较适合深究)，并且框架能够通过<code>GUI</code>编辑器和手动编辑，所以它提供了一个灵活、强大的自定义机制。框架借助<code>LESS</code>、<code>jQuery</code>、<code>normalize.css</code>及<code>FontAwesome</code>开源项目的独有特点，整合成了这么一款轻量级、模块化的前端框架。  官网：<a href="http://www.getuikit.com/" target="_blank" rel="noopener">http://www.getuikit.com/</a><br>Github：<a href="https://github.com/uikit/uikit" target="_blank" rel="noopener">https://github.com/uikit/uikit</a><br>作者：YOOtheme<br>Star：6,372</p><p>##11.Pure<br>这个框架是我在做管理系统时接触的，选择使用也是因为框架小巧，并且是纯 CSS，没有太多的牵扯，好用来与其他框架快速结合使用。</p><p>官网：<a href="http://purecss.io/" target="_blank" rel="noopener">http://purecss.io/</a><br>Github：<a href="https://github.com/yahoo/pure/" target="_blank" rel="noopener">https://github.com/yahoo/pure/</a></p><p>介绍完毕，估计你应该看出来了，我使用框架真的也就是遇到了需求，才选择了某个框架，所以框架之间并没有什么好与特好之分，只能说你的需求是什么，这个框架合适不合适你去用，各种框架用起来也都大致差不多，会用一个其他的上手也就都变得简单容易上手，我觉得能写框架的人都是室外高仁。</p><p>##12.Ant Design<br>这个是蚂蚁金服团队开源的一套 UI 框架, 包括手机端和 web 端.</p><p>官网: <a href="http://design.alipay.com/" target="_blank" rel="noopener">http://design.alipay.com/</a></p>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/11/27/%E5%89%8D%E7%AB%AF-UI-%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python 之词云</title>
      <link>https://zjqian.top/2018/11/06/python-%E4%B9%8B%E8%AF%8D%E4%BA%91/</link>
      <guid>https://zjqian.top/2018/11/06/python-%E4%B9%8B%E8%AF%8D%E4%BA%91/</guid>
      <pubDate>Tue, 06 Nov 2018 05:57:48 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-爬取词源网页&quot;&gt;&lt;a href=&quot;#1-爬取词源网页&quot; class=&quot;headerlink&quot; title=&quot;1.爬取词源网页&quot;&gt;&lt;/a&gt;1.爬取词源网页&lt;/h2&gt;&lt;p&gt;在这我是爬取的自己博客的一些标签&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-爬取词源网页"><a href="#1-爬取词源网页" class="headerlink" title="1.爬取词源网页"></a>1.爬取词源网页</h2><p>在这我是爬取的自己博客的一些标签<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#获取html</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">()</span>:</span></span><br><span class="line">  url = <span class="string">'https://zjqian.github.io/tags/index.html'</span></span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line">    </span><br><span class="line"><span class="comment">#通过BeautifulSoup解析网页，得到标签</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContent</span><span class="params">()</span>:</span></span><br><span class="line">    soup = BeautifulSoup(getHtml(),<span class="string">'lxml'</span>)</span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find(<span class="string">'div'</span>, class_=<span class="string">'tag-cloud-tags'</span>):</span><br><span class="line">        text += item.string</span><br><span class="line">    <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure><h2 id="2-生成词云"><a href="#2-生成词云" class="headerlink" title="2.生成词云"></a>2.生成词云</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWordCloud</span><span class="params">()</span>:</span></span><br><span class="line">    d = path.dirname(__file__)</span><br><span class="line">    <span class="comment">#词云所依照的图片格式</span></span><br><span class="line">    coloring = np.array(Image.open(path.join(d, <span class="string">"WordArt.png"</span>)))</span><br><span class="line">  <span class="comment">#设置WordCloud属性</span></span><br><span class="line">    wc = WordCloud(background_color=<span class="string">"white"</span>, </span><br><span class="line">    max_words=<span class="number">2000</span>, </span><br><span class="line">    mask=coloring,</span><br><span class="line">    max_font_size=<span class="number">50</span>, </span><br><span class="line">    random_state=<span class="number">42</span>, </span><br><span class="line">    font_path=<span class="string">'fangsong_GB2312.ttf'</span>)</span><br><span class="line"></span><br><span class="line">    wc.generate(getContent())</span><br><span class="line">    <span class="comment"># 设置词的颜色</span></span><br><span class="line">    color_to_words = &#123;</span><br><span class="line">        <span class="comment"># 使用RGB来设置词的颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 设置词默认的颜色</span></span><br><span class="line">    default_color = <span class="string">"black"</span></span><br><span class="line">    grouped_color_func = GroupedColorFunc(color_to_words, default_color)</span><br><span class="line">    <span class="comment"># 设置词云的颜色</span></span><br><span class="line">    wc.recolor(color_func=grouped_color_func)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create coloring from image</span></span><br><span class="line">    <span class="comment"># image_colors = ImageColorGenerator(coloring)</span></span><br><span class="line">    wc.to_file(<span class="string">"路径/word-cloud.png"</span>)  <span class="comment"># 保存图片</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(wc, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="3-词云效果图"><a href="#3-词云效果图" class="headerlink" title="3.词云效果图:"></a>3.词云效果图:</h2><p><img src="/images/word-cloud.png" alt="由于词源有点少,所以图片中的熊猫有点不太清楚,可它真的是熊猫"></p><p><img src="/images/WordArt.png" alt="这是源图片"></p><p>对比一下,第二张是源图片</p>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/11/06/python-%E4%B9%8B%E8%AF%8D%E4%BA%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>react-native之run-android报错SDK location not found</title>
      <link>https://zjqian.top/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/</link>
      <guid>https://zjqian.top/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/</guid>
      <pubDate>Thu, 01 Nov 2018 05:08:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;react-native 项目运行 Android 时报错,错误信息如下:&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>react-native 项目运行 Android 时报错,错误信息如下:<br><a id="more"></a></p><p><img src="/images/sdk-location-not-found.png" alt="SDK location not found"></p><p><strong>解决办法</strong></p><blockquote><p>1.cd到项目文件夹 android目录下<br>2.创建<code>local.properties</code> 文件(命令行创建方法: <code>touch local.properties</code>)<br>3.编辑<code>local.properties</code>文件,添加 <code>sdk.dir = /Users/用户名/Library/Android/sdk</code>(等号右侧为sdk 的路径)<br>4.完成!</p></blockquote>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
