<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ZJQian&#39;s Blogs</title>
    <link>https://zjqian.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>stay hungry, stay foolish</description>
    <pubDate>Tue, 06 Nov 2018 06:13:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>python 之词云</title>
      <link>https://zjqian.top/2018/11/06/python-%E4%B9%8B%E8%AF%8D%E4%BA%91/</link>
      <guid>https://zjqian.top/2018/11/06/python-%E4%B9%8B%E8%AF%8D%E4%BA%91/</guid>
      <pubDate>Tue, 06 Nov 2018 05:57:48 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-爬取词源网页&quot;&gt;&lt;a href=&quot;#1-爬取词源网页&quot; class=&quot;headerlink&quot; title=&quot;1.爬取词源网页&quot;&gt;&lt;/a&gt;1.爬取词源网页&lt;/h2&gt;&lt;p&gt;在这我是爬取的自己博客的一些标签&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-爬取词源网页"><a href="#1-爬取词源网页" class="headerlink" title="1.爬取词源网页"></a>1.爬取词源网页</h2><p>在这我是爬取的自己博客的一些标签<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#获取html</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">()</span>:</span></span><br><span class="line">  url = <span class="string">'https://zjqian.github.io/tags/index.html'</span></span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line">    </span><br><span class="line"><span class="comment">#通过BeautifulSoup解析网页，得到标签</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContent</span><span class="params">()</span>:</span></span><br><span class="line">    soup = BeautifulSoup(getHtml(),<span class="string">'lxml'</span>)</span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find(<span class="string">'div'</span>, class_=<span class="string">'tag-cloud-tags'</span>):</span><br><span class="line">        text += item.string</span><br><span class="line">    <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure><h2 id="2-生成词云"><a href="#2-生成词云" class="headerlink" title="2.生成词云"></a>2.生成词云</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWordCloud</span><span class="params">()</span>:</span></span><br><span class="line">    d = path.dirname(__file__)</span><br><span class="line">    <span class="comment">#词云所依照的图片格式</span></span><br><span class="line">    coloring = np.array(Image.open(path.join(d, <span class="string">"WordArt.png"</span>)))</span><br><span class="line">  <span class="comment">#设置WordCloud属性</span></span><br><span class="line">    wc = WordCloud(background_color=<span class="string">"white"</span>, </span><br><span class="line">    max_words=<span class="number">2000</span>, </span><br><span class="line">    mask=coloring,</span><br><span class="line">    max_font_size=<span class="number">50</span>, </span><br><span class="line">    random_state=<span class="number">42</span>, </span><br><span class="line">    font_path=<span class="string">'fangsong_GB2312.ttf'</span>)</span><br><span class="line"></span><br><span class="line">    wc.generate(getContent())</span><br><span class="line">    <span class="comment"># 设置词的颜色</span></span><br><span class="line">    color_to_words = &#123;</span><br><span class="line">        <span class="comment"># 使用RGB来设置词的颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 设置词默认的颜色</span></span><br><span class="line">    default_color = <span class="string">"black"</span></span><br><span class="line">    grouped_color_func = GroupedColorFunc(color_to_words, default_color)</span><br><span class="line">    <span class="comment"># 设置词云的颜色</span></span><br><span class="line">    wc.recolor(color_func=grouped_color_func)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create coloring from image</span></span><br><span class="line">    <span class="comment"># image_colors = ImageColorGenerator(coloring)</span></span><br><span class="line">    wc.to_file(<span class="string">"路径/word-cloud.png"</span>)  <span class="comment"># 保存图片</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(wc, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="3-词云效果图"><a href="#3-词云效果图" class="headerlink" title="3.词云效果图:"></a>3.词云效果图:</h2><p><img src="/images/word-cloud.png" alt="由于词源有点少,所以图片中的熊猫有点不太清楚,可它真的是熊猫"></p><p><img src="/images/WordArt.png" alt="这是源图片"></p><p>对比一下,第二张是源图片</p>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/11/06/python-%E4%B9%8B%E8%AF%8D%E4%BA%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>react-native之run-android报错SDK location not found</title>
      <link>https://zjqian.top/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/</link>
      <guid>https://zjqian.top/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/</guid>
      <pubDate>Thu, 01 Nov 2018 05:08:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;react-native 项目运行 Android 时报错,错误信息如下:&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>react-native 项目运行 Android 时报错,错误信息如下:<br><a id="more"></a></p><p><img src="/images/sdk-location-not-found.png" alt="SDK location not found"></p><p><strong>解决办法</strong></p><blockquote><p>1.cd到项目文件夹 android目录下<br>2.创建<code>local.properties</code> 文件(命令行创建方法: <code>touch local.properties</code>)<br>3.编辑<code>local.properties</code>文件,添加 <code>sdk.dir = /Users/用户名/Library/Android/sdk</code>(等号右侧为sdk 的路径)<br>4.完成!</p></blockquote>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/11/01/react-native%E4%B9%8Brun-android%E6%8A%A5%E9%94%99-SDK-location-not-found/#disqus_thread</comments>
    </item>
    
    <item>
      <title>react-native之原生跳转RN</title>
      <link>https://zjqian.top/2018/10/30/react-native%E4%B9%8B%E5%8E%9F%E7%94%9F%E8%B7%B3%E8%BD%ACRN/</link>
      <guid>https://zjqian.top/2018/10/30/react-native%E4%B9%8B%E5%8E%9F%E7%94%9F%E8%B7%B3%E8%BD%ACRN/</guid>
      <pubDate>Tue, 30 Oct 2018 02:50:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://zjqian.github.io/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇文章&lt;/a&gt;记录了一下RN跳转原生的一些操作, 这次记录一下原生跳转 RN 页面的一些具体操作.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://zjqian.github.io/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/" target="_blank" rel="noopener">上一篇文章</a>记录了一下RN跳转原生的一些操作, 这次记录一下原生跳转 RN 页面的一些具体操作.<br><a id="more"></a></p><h2 id="1-创建-rn-页面并注册"><a href="#1-创建-rn-页面并注册" class="headerlink" title="1.创建 rn 页面并注册"></a>1.创建 rn 页面并注册</h2><p><strong>创建页面</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    View,</span><br><span class="line">    Text</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>,<span class="attr">backgroundColor</span>: <span class="string">'red'</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;&#123;<span class="attr">marginTop</span>: <span class="number">100</span>&#125;&#125;&gt; 这是 RN 页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在入口函数中注册组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'test'</span>,()=&gt;test);</span><br></pre></td></tr></table></figure><h2 id="2-在原生文件中加载"><a href="#2-在原生文件中加载" class="headerlink" title="2.在原生文件中加载"></a>2.在原生文件中加载</h2><p><strong>具体方案</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•建立一个NSObject类，让其实现RCTBridgeDelegate协议</span><br><span class="line">•这个类添加一个bridge属性作为一个全局的bridge，每一次新建RN页面使用这个bridge</span><br><span class="line">•类中实现预加载方法，在适当的时候可以预加载RCTRootView</span><br><span class="line">•类中实现RCTRootView的管理，将预加载的RCTRootView保存起来，在用到的时候直接提取</span><br></pre></td></tr></table></figure><p>新建一个继承自NSObject的类ReactRootViewManager:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//.h文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridge.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ReactRootViewManager</span> : <span class="title">NSObject</span>&lt;<span class="title">RCTBridgeDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局唯一的bridge */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) RCTBridge * bridge;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 获取单例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)manager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据viewName预加载bundle文件</span></span><br><span class="line"><span class="comment"> * param:</span></span><br><span class="line"><span class="comment"> *     viewName RN界面名称</span></span><br><span class="line"><span class="comment"> *     initialProperty: 初始化参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName;</span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName initialProperty:(<span class="built_in">NSDictionary</span> *)initialProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据viewName获取rootView</span></span><br><span class="line"><span class="comment"> * param:</span></span><br><span class="line"><span class="comment"> *     viewName RN界面名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * return: 返回匹配的rootView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (RCTRootView *)rootViewWithName:(<span class="built_in">NSString</span> *)viewName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure><p>具体实现:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ReactRootViewManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ReactRootViewManager</span> ()</span></span><br><span class="line"><span class="comment">// 以 viewName-rootView 的形式保存需预加载的RN界面</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, RCTRootView*&gt; * rootViewMap;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ReactRootViewManager</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">  _rootViewMap = <span class="literal">nil</span>;</span><br><span class="line">  [_bridge invalidate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)manager &#123;</span><br><span class="line">  <span class="keyword">static</span> ReactRootViewManager * _rootViewManager = <span class="literal">nil</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    _rootViewManager = [[ReactRootViewManager alloc] init];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> _rootViewManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">    _rootViewMap = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">0</span>];</span><br><span class="line">    _bridge = [[RCTBridge alloc] initWithDelegate:<span class="keyword">self</span> launchOptions:<span class="literal">nil</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName &#123;</span><br><span class="line">  [<span class="keyword">self</span> preLoadRootViewWithName:viewName initialProperty:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)preLoadRootViewWithName:(<span class="built_in">NSString</span> *)viewName initialProperty:(<span class="built_in">NSDictionary</span> *)initialProperty &#123;</span><br><span class="line">  <span class="keyword">if</span> (!viewName &amp;&amp; [_rootViewMap objectForKey:viewName]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 由bridge创建rootView</span></span><br><span class="line">  RCTRootView * rnView = [[RCTRootView alloc] initWithBridge:<span class="keyword">self</span>.bridge</span><br><span class="line">                                                  moduleName:viewName</span><br><span class="line">                                           initialProperties:initialProperty];</span><br><span class="line">  [_rootViewMap setObject:rnView forKey:viewName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (RCTRootView *)rootViewWithName:(<span class="built_in">NSString</span> *)viewName &#123;</span><br><span class="line">  <span class="keyword">if</span> (!viewName) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">self</span>.rootViewMap objectForKey:viewName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - RCTBridgeDelegate</span></span><br><span class="line">- (<span class="built_in">NSURL</span> *)sourceURLForBridge:(RCTBridge *)bridge &#123;</span><br><span class="line">  <span class="keyword">return</span> [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class="string">@"index"</span> fallbackResource:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="3-创建一个-controller-加载-RN-页面"><a href="#3-创建一个-controller-加载-RN-页面" class="headerlink" title="3.创建一个 controller 加载 RN 页面"></a>3.创建一个 controller 加载 RN 页面</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test为注册组件时定义的名称</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">self</span>.view=[[ReactRootViewManager manager] rootViewWithName:<span class="string">@"test"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-跳转操作"><a href="#4-跳转操作" class="headerlink" title="4.跳转操作"></a>4.跳转操作</h2><p><strong>预加载 RN 页面</strong></p><p>在原生的 controller 里预加载 RN 页面</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//RN页面预加载</span></span><br><span class="line">  <span class="built_in">NSString</span> *pageName = <span class="string">@"test"</span>;</span><br><span class="line">  [[ReactRootViewManager manager] preLoadRootViewWithName:pageName initialProperty:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p><strong>进行跳转</strong></p><p>在按钮的 click 事件里进行跳转:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)jumpToRN &#123;</span><br><span class="line">  </span><br><span class="line">  RNRootViewController *vc = [[RNRootViewController alloc] init];</span><br><span class="line">  [<span class="keyword">self</span>.navigationController pushViewController:vc animated:<span class="literal">YES</span>];</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="/images/gif2.gif" alt="原生跳转 RN"></p>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/10/30/react-native%E4%B9%8B%E5%8E%9F%E7%94%9F%E8%B7%B3%E8%BD%ACRN/#disqus_thread</comments>
    </item>
    
    <item>
      <title>react-native之RN跳转原生界面</title>
      <link>https://zjqian.top/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/</link>
      <guid>https://zjqian.top/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/</guid>
      <pubDate>Mon, 29 Oct 2018 09:25:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;混合开发中不可避免的会遇到原生页面与非原生页面之间的跳转, 这篇文章记录一下 RN 页面跳转原生页面的一些具体操作.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>混合开发中不可避免的会遇到原生页面与非原生页面之间的跳转, 这篇文章记录一下 RN 页面跳转原生页面的一些具体操作.<br><a id="more"></a></p><h2 id="1-配置原生文件"><a href="#1-配置原生文件" class="headerlink" title="1.配置原生文件"></a>1.配置原生文件</h2><p>在 <code>AppDelegate.h</code> 文件中声明一个属性 <code>nav</code>:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UINavigationController</span>         *           nav;</span><br></pre></td></tr></table></figure><p>在 <code>AppDelegate.m</code> 文件中配置导航栏:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line"><span class="built_in">UIViewController</span> *rootViewController = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">rootViewController.view = rootView;</span><br><span class="line">_nav = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:rootViewController];</span><br><span class="line"><span class="keyword">self</span>.window.rootViewController = _nav;</span><br><span class="line">[<span class="keyword">self</span>.window makeKeyAndVisible];</span><br></pre></td></tr></table></figure><h2 id="2-创建文件实现RCTBridgeModule协议"><a href="#2-创建文件实现RCTBridgeModule协议" class="headerlink" title="2.创建文件实现RCTBridgeModule协议"></a>2.创建文件实现<code>RCTBridgeModule</code>协议</h2><p>创建一个继承 NSObject 的类:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//.h文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RNToNative</span> : <span class="title">NSObject</span>&lt;<span class="title">RCTBridgeModule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.m文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"RNToNative.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridge.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NativeViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"AppDelegate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RNToNative</span></span></span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE(RNToNative);</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参</span></span><br><span class="line">RCT_EXPORT_METHOD(jumpToNative) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    </span><br><span class="line">    NativeViewController *vc = [[NativeViewController alloc] init];</span><br><span class="line">    AppDelegate *app = (AppDelegate *)<span class="built_in">UIApplication</span>.sharedApplication.delegate;</span><br><span class="line">    [app.nav pushViewController:vc animated:<span class="literal">YES</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参</span></span><br><span class="line">RCT_EXPORT_METHOD(jump2Native:(<span class="built_in">NSString</span> *)para) &#123;</span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    </span><br><span class="line">    NativeViewController *vc = [[NativeViewController alloc] init];</span><br><span class="line">    vc.para = para;</span><br><span class="line">    AppDelegate *app = (AppDelegate *)<span class="built_in">UIApplication</span>.sharedApplication.delegate;</span><br><span class="line">    [app.nav pushViewController:vc animated:<span class="literal">YES</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="3-在-RN-文件中配置"><a href="#3-在-RN-文件中配置" class="headerlink" title="3.在 RN 文件中配置"></a>3.在 RN 文件中配置</h2><p>直接贴源码好了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RNToNative为在原生文件中定义的类名称.</span></span><br><span class="line">jumpToNative()&#123;</span><br><span class="line">    <span class="keyword">var</span> jump = NativeModules.RNToNative;</span><br><span class="line">    InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//jumpToNative为在原生文件中定义的函数名称, 此为无参的函数</span></span><br><span class="line">        jump.jumpToNative();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">jumpToNativeWithPara() &#123;</span><br><span class="line">    <span class="keyword">var</span> jump = NativeModules.RNToNative;</span><br><span class="line">    InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//jump2Native为在原生文件中定义的函数名称, 此为带参的函数</span></span><br><span class="line">        jump.jump2Native(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>,<span class="attr">justifyContent</span>: <span class="string">'space-around'</span>&#125;&#125;&gt;</span><br><span class="line">            &lt;TouchableOpacity activeOpacity=&#123;<span class="number">0.5</span>&#125; onPress=&#123;<span class="keyword">this</span>.jumpToNative&#125; style=&#123;styles.btn&#125;&gt;</span><br><span class="line">                &lt;Text&gt;跳转原生(无参数)&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>TouchableOpacity&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TouchableOpacity activeOpacity=&#123;<span class="number">0.5</span>&#125; onPress=&#123;<span class="keyword">this</span>.jumpToNativeWithPara&#125; style=&#123;styles.btn&#125;&gt;</span><br><span class="line">                &lt;Text&gt;跳转原生(带参数)&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>TouchableOpacity&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="/images/gif.gif" alt="rn跳转原生"></p>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/10/29/react-native%E4%B9%8BRN%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E7%95%8C%E9%9D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一行命令统计iOS工程代码总行数</title>
      <link>https://zjqian.top/2018/10/27/%E4%B8%80%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%BB%9F%E8%AE%A1iOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%80%BB%E8%A1%8C%E6%95%B0/</link>
      <guid>https://zjqian.top/2018/10/27/%E4%B8%80%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%BB%9F%E8%AE%A1iOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%80%BB%E8%A1%8C%E6%95%B0/</guid>
      <pubDate>Sat, 27 Oct 2018 02:35:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;我们有时候想要统计一下我们的工程的总代码行数，来获取一些成就感或者作为别的用图，这里就介绍一些如何便捷地统计代码的行数，非常简单，方法如下：&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>我们有时候想要统计一下我们的工程的总代码行数，来获取一些成就感或者作为别的用图，这里就介绍一些如何便捷地统计代码的行数，非常简单，方法如下：<br><a id="more"></a></p><ol><li>打开终端；</li><li>通过cd命令到达我们的工程文件，这里注意如果要避免统计引用的第三方库的代码量，我们就要进一步进到我们自己写的代码文件中去，一般是一个与工程文件同名的文件；</li><li>统计代码行数：</li></ol><p>如果想列出每个文件的行数，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs wc -l</span><br></pre></td></tr></table></figure><p>如果想直接列出总代码行数，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs grep -v <span class="string">"^$"</span>|wc -l</span><br></pre></td></tr></table></figure><p>这样就可以直接得出数量了，而且非常快，是不是很方便\~</p><p>这个统计过程会去掉空行，但注释是会计算在内的。</p>]]></content:encoded>
      
      <comments>https://zjqian.top/2018/10/27/%E4%B8%80%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%BB%9F%E8%AE%A1iOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%80%BB%E8%A1%8C%E6%95%B0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
