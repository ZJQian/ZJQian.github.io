<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ZJQian&#39;s Blogs</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>stay hungry, stay foolish</description>
    <pubDate>Fri, 26 Oct 2018 11:36:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>react-navigation 使用详解</title>
      <link>http://yoursite.com/2018/04/12/react-navigation-detail/</link>
      <guid>http://yoursite.com/2018/04/12/react-navigation-detail/</guid>
      <pubDate>Thu, 12 Apr 2018 02:25:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;转自: &lt;a href=&quot;https://blog.csdn.net/u013718120/article/details/72357698&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、开源库介绍&quot;&gt;&lt;a href=&quot;#一、开源库介绍&quot; class=&quot;headerlink&quot; title=&quot;一、开源库介绍&quot;&gt;&lt;/a&gt;一、开源库介绍&lt;/h2&gt;&lt;p&gt;今年1月份，新开源的&lt;code&gt;react-natvigation&lt;/code&gt;库备受瞩目。在短短不到3个月的时间，&lt;code&gt;github&lt;/code&gt;上星数已达4000+。Fb推荐使用库，并且在&lt;code&gt;React Native&lt;/code&gt;当前最新版本0.44中将&lt;code&gt;Navigator&lt;/code&gt;删除。&lt;code&gt;react-navigation&lt;/code&gt;据称有原生般的性能体验效果。
      
      </description>
      
      <content:encoded><![CDATA[<p>转自: <a href="https://blog.csdn.net/u013718120/article/details/72357698" target="_blank" rel="noopener">这里</a></p><h2 id="一、开源库介绍"><a href="#一、开源库介绍" class="headerlink" title="一、开源库介绍"></a>一、开源库介绍</h2><p>今年1月份，新开源的<code>react-natvigation</code>库备受瞩目。在短短不到3个月的时间，<code>github</code>上星数已达4000+。Fb推荐使用库，并且在<code>React Native</code>当前最新版本0.44中将<code>Navigator</code>删除。<code>react-navigation</code>据称有原生般的性能体验效果。<a id="more"></a> 可能会成为未来<code>React Native</code>导航组件的主流军。本篇内容基于【 ^1.0.0-beta.9 】版本来介绍关于该库的使用和实战技巧。可以看到，虽然是beta版本，不过基本稳定，大家可放心在项目中使用。</p><p>该库包含三类组件：</p><blockquote><p>（1）StackNavigator：用来跳转页面和传递参数<br>（2）TabNavigator：类似底部导航栏，用来在同一屏幕下切换不同界面<br>（3）DrawerNavigator：侧滑菜单导航栏，用于轻松设置带抽屉导航的屏幕</p></blockquote><h2 id="二、react-navigation使用"><a href="#二、react-navigation使用" class="headerlink" title="二、react-navigation使用"></a>二、react-navigation使用</h2><p>具体内容大致分为如下：</p><blockquote><p>（1）react-navigation库属性介绍</p><p>（2）StackNavigator、TabNavigator实现界面间跳转，Tab切换</p><p>（3）StackNavigator界面间跳转、传值、取值</p><p>（4）DrawerNavigator实现抽屉导航菜单</p><p>（5）DrawerNavigator扩展功能</p></blockquote><h3>1、StackNavigator属性介绍</h3><p>navigationOptions：配置StackNavigator的一些属性。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">title：标题，如果设置了这个导航栏和标签栏的title就会变成一样的，不推荐使用  </span><br><span class="line">   header：可以设置一些导航的属性，如果隐藏顶部导航栏只要将这个属性设置为null  </span><br><span class="line">   headerTitle：设置导航栏标题，推荐  </span><br><span class="line">   headerBackTitle：设置跳转页面左侧返回箭头后面的文字，默认是上一个页面的标题。可以自定义，也可以设置为null  </span><br><span class="line">   headerTruncatedBackTitle：设置当上个页面标题不符合返回箭头后的文字时，默认改成&quot;返回&quot;  </span><br><span class="line">   headerRight：设置导航条右侧。可以是按钮或者其他视图控件  </span><br><span class="line">   headerLeft：设置导航条左侧。可以是按钮或者其他视图控件  </span><br><span class="line">   headerStyle：设置导航条的样式。背景色，宽高等  </span><br><span class="line">   headerTitleStyle：设置导航栏文字样式  </span><br><span class="line">   headerBackTitleStyle：设置导航栏‘返回’文字样式  </span><br><span class="line">   headerTintColor：设置导航栏颜色  </span><br><span class="line">   headerPressColorAndroid：安卓独有的设置颜色纹理，需要安卓版本大于5.0  </span><br><span class="line">   gesturesEnabled：是否支持滑动返回手势，iOS默认支持，安卓默认关闭  </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">screen：对应界面名称，需要填入import之后的页面  </span><br><span class="line"> </span><br><span class="line">mode：定义跳转风格  </span><br><span class="line"> </span><br><span class="line">  card：使用iOS和安卓默认的风格  </span><br><span class="line"> </span><br><span class="line">  modal：iOS独有的使屏幕从底部画出。类似iOS的present效果  </span><br><span class="line"> </span><br><span class="line">  headerMode：返回上级页面时动画效果  </span><br><span class="line"> </span><br><span class="line">  float：iOS默认的效果  </span><br><span class="line"> </span><br><span class="line">  screen：滑动过程中，整个页面都会返回  </span><br><span class="line"> </span><br><span class="line">  none：无动画  </span><br><span class="line"> </span><br><span class="line">  cardStyle：自定义设置跳转效果  </span><br><span class="line"> </span><br><span class="line">  transitionConfig： 自定义设置滑动返回的配置  </span><br><span class="line"> </span><br><span class="line">  onTransitionStart：当转换动画即将开始时被调用的功能  </span><br><span class="line"> </span><br><span class="line">  onTransitionEnd：当转换动画完成，将被调用的功能  </span><br><span class="line"> </span><br><span class="line">  path：路由中设置的路径的覆盖映射配置  </span><br><span class="line"> </span><br><span class="line"> initialRouteName：设置默认的页面组件，必须是上面已注册的页面组件  </span><br><span class="line"> </span><br><span class="line"> initialRouteParams：初始路由参数</span><br></pre></td></tr></table></figure><p><strong>注：大家可能对于<code>path</code>不太理解。<code>path</code>属性适用于其他<code>app</code>或浏览器使用url打开本<code>app</code>并进入指定页面。<code>path</code>属性用于声明一个界面路径，例如：<code>【/pages/Home】</code>。此时我们可以在手机浏览器中输入：<code>app名称://pages/Home</code>来启动该<code>App</code>，并进入<code>Home</code>界面。</strong></p><h3>2、TabNavigator属性介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">screen：和导航的功能是一样的，对应界面名称，可以在其他页面通过这个screen传值和跳转。  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">navigationOptions：配置TabNavigator的一些属性  </span><br><span class="line">  </span><br><span class="line">title：标题，会同时设置导航条和标签栏的title  </span><br><span class="line">  </span><br><span class="line">tabBarVisible：是否隐藏标签栏。默认不隐藏(true)  </span><br><span class="line">  </span><br><span class="line">tabBarIcon：设置标签栏的图标。需要给每个都设置  </span><br><span class="line">  </span><br><span class="line">tabBarLabel：设置标签栏的title。推荐  </span><br><span class="line">  </span><br><span class="line">导航栏配置  </span><br><span class="line">  </span><br><span class="line">tabBarPosition：设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：&apos;top&apos;，&apos;bottom&apos;）  </span><br><span class="line">  </span><br><span class="line">swipeEnabled：是否允许在标签之间进行滑动  </span><br><span class="line">  </span><br><span class="line">animationEnabled：是否在更改标签时显示动画  </span><br><span class="line">  </span><br><span class="line">lazy：是否根据需要懒惰呈现标签，而不是提前，意思是在app打开的时候将底部标签栏全部加载，默认false,推荐为true  </span><br><span class="line">  </span><br><span class="line">trueinitialRouteName： 设置默认的页面组件  </span><br><span class="line">  </span><br><span class="line">backBehavior：按 back 键是否跳转到第一个Tab(首页)， none 为不跳转  </span><br><span class="line">  </span><br><span class="line">tabBarOptions：配置标签栏的一些属性iOS属性  </span><br><span class="line">  </span><br><span class="line">activeTintColor：label和icon的前景色 活跃状态下  </span><br><span class="line">  </span><br><span class="line">activeBackgroundColor：label和icon的背景色 活跃状态下  </span><br><span class="line">  </span><br><span class="line">inactiveTintColor：label和icon的前景色 不活跃状态下  </span><br><span class="line">  </span><br><span class="line">inactiveBackgroundColor：label和icon的背景色 不活跃状态下  </span><br><span class="line">  </span><br><span class="line">showLabel：是否显示label，默认开启 style：tabbar的样式  </span><br><span class="line">  </span><br><span class="line">labelStyle：label的样式安卓属性  </span><br><span class="line">  </span><br><span class="line">activeTintColor：label和icon的前景色 活跃状态下  </span><br><span class="line">  </span><br><span class="line">inactiveTintColor：label和icon的前景色 不活跃状态下  </span><br><span class="line">  </span><br><span class="line">showIcon：是否显示图标，默认关闭  </span><br><span class="line">  </span><br><span class="line">showLabel：是否显示label，默认开启 style：tabbar的样式  </span><br><span class="line">  </span><br><span class="line">labelStyle：label的样式 upperCaseLabel：是否使标签大写，默认为true  </span><br><span class="line">  </span><br><span class="line">pressColor：material涟漪效果的颜色（安卓版本需要大于5.0）  </span><br><span class="line">  </span><br><span class="line">pressOpacity：按压标签的透明度变化（安卓版本需要小于5.0）  </span><br><span class="line">  </span><br><span class="line">scrollEnabled：是否启用可滚动选项卡 tabStyle：tab的样式  </span><br><span class="line">  </span><br><span class="line">indicatorStyle：标签指示器的样式对象（选项卡底部的行）。安卓底部会多出一条线，可以将height设置为0来暂时解决这个问题  </span><br><span class="line">  </span><br><span class="line">labelStyle：label的样式  </span><br><span class="line">  </span><br><span class="line">iconStyle：图标样式</span><br></pre></td></tr></table></figure><h3>3、DrawerNavigator属性介绍<h3><br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DrawerNavigatorConfig  </span><br><span class="line">  </span><br><span class="line">    drawerWidth - 抽屉的宽度  </span><br><span class="line">    drawerPosition - 选项是左或右。 默认为左侧位置  </span><br><span class="line">    contentComponent - 用于呈现抽屉内容的组件，例如导航项。 接收抽屉的导航。 默认为DrawerItems  </span><br><span class="line">    contentOptions - 配置抽屉内容  </span><br><span class="line">  </span><br><span class="line">    initialRouteName - 初始路由的routeName  </span><br><span class="line">    order - 定义抽屉项目顺序的routeNames数组。  </span><br><span class="line">    路径 - 提供routeName到路径配置的映射，它覆盖routeConfigs中设置的路径。  </span><br><span class="line">    backBehavior - 后退按钮是否会切换到初始路由？ 如果是，设置为initialRoute，否则为none。 默认为initialRoute行为  </span><br><span class="line">  </span><br><span class="line">   DrawerItems的contentOptions属性  </span><br><span class="line">  </span><br><span class="line">    activeTintColor - 活动标签的标签和图标颜色  </span><br><span class="line">    activeBackgroundColor - 活动标签的背景颜色  </span><br><span class="line">    inactiveTintColor - 非活动标签的标签和图标颜色  </span><br><span class="line">    inactiveBackgroundColor - 非活动标签的背景颜色  </span><br><span class="line">    内容部分的样式样式对象  </span><br><span class="line">    labelStyle - 当您的标签是字符串时，要覆盖内容部分中的文本样式的样式对象</span><br></pre></td></tr></table></figure><br><br><br>从上述中大致了解了<code>react-navigation</code>三种组件的一些基本属性，所以到我们甩起袖子撸代码见证下奇迹了。<br><br><h3>4、使用StackNavigator + TabNavigator实现Tab界面切换、界面间导航</h3><p>API定义：StackNavigator(RouteConfigs, StackNavigatorConfig)、TabNavigator(RouteConfigs, TabNavigatorConfig)</p><blockquote><p>（1）集成 react-navigation：在终端执行 【 npm install react-navigation –save 】</p><p>（2）界面中导入必要组件：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;StackNavigator,TabNavigator,TabBarBottom&#125; from &apos;react-navigation&apos;;  </span><br><span class="line">import HomeScreen from &apos;./pages/HomePage&apos;;  </span><br><span class="line">import MineScreen from &apos;./pages/MinePage&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>（3）定义TabNavigator：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">const Tab = TabNavigator(  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attribute">Home</span>:&#123;  </span><br><span class="line">      screen:HomeScreen,  </span><br><span class="line">      navigationOptions:(&#123;navigation&#125;) =&gt; (&#123;  </span><br><span class="line">        tabBarLabel:'首页',  </span><br><span class="line">        tabBarIcon:(&#123;focused,tintColor&#125;) =&gt; (  </span><br><span class="line">          &lt;<span class="selector-tag">TabBarItem</span>  </span><br><span class="line">            tintColor=&#123;tintColor&#125;  </span><br><span class="line">            focused=&#123;focused&#125;  </span><br><span class="line">            normalImage=&#123;require('./imgs/nav_fav@2x.png')&#125;  </span><br><span class="line">            selectedImage=&#123;require('./imgs/nav_fav_actived@3x.png')&#125;  </span><br><span class="line">          /&gt;  </span><br><span class="line">        )  </span><br><span class="line">      &#125;),  </span><br><span class="line">    &#125;,  </span><br><span class="line">  </span><br><span class="line">    <span class="selector-tag">Mine</span>:&#123;  </span><br><span class="line">          <span class="attribute">screen</span>:MineScreen,  </span><br><span class="line">          navigationOptions:(&#123;navigation&#125;) =&gt; (&#123;  </span><br><span class="line">          tabBarLabel:'我',  </span><br><span class="line">          tabBarIcon:(&#123;focused,tintColor&#125;) =&gt; (  </span><br><span class="line">            &lt;<span class="selector-tag">TabBarItem</span>  </span><br><span class="line">             tintColor=&#123;tintColor&#125;  </span><br><span class="line">              focused=&#123;focused&#125;  </span><br><span class="line">              normalImage=&#123;require('./imgs/tab_me_nor@3x.png')&#125;  </span><br><span class="line">              selectedImage=&#123;require('./imgs/tab_me_selected@2x.png')&#125;  </span><br><span class="line">            /&gt;  </span><br><span class="line">          )  </span><br><span class="line">        &#125;),  </span><br><span class="line">      &#125;,  </span><br><span class="line">    &#125;,  </span><br><span class="line">  </span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="attribute">tabBarComponent</span>:TabBarBottom,  </span><br><span class="line">      tabBarPosition:<span class="string">'bottom'</span>,  </span><br><span class="line">      swipeEnabled:false,  </span><br><span class="line">      animationEnabled:false,  </span><br><span class="line">      lazy:true,  </span><br><span class="line">      tabBarOptions:&#123;  </span><br><span class="line">        activeTintColor:<span class="string">'#06c1ae'</span>,  </span><br><span class="line">        inactiveTintColor:<span class="string">'#979797'</span>,  </span><br><span class="line">        style:&#123;backgroundColor:<span class="string">'#ffffff'</span>,&#125;,  </span><br><span class="line">        <span class="selector-tag">labelStyle</span>: &#123;  </span><br><span class="line">              <span class="attribute">fontSize</span>: <span class="number">20</span>, // 文字大小  </span><br><span class="line">          &#125;,  </span><br><span class="line">      &#125;  </span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>TabBarItem为封装的组件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React,&#123;Component&#125; from 'react';  </span><br><span class="line">import &#123;Image&#125; from 'react-native';  </span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> <span class="selector-tag">class</span> <span class="selector-tag">TabBarItem</span> <span class="selector-tag">extends</span> <span class="selector-tag">Component</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    render() &#123;  </span><br><span class="line">        <span class="selector-tag">return</span>(  </span><br><span class="line">            &lt;Image source=&#123; this.props.focused ? this.props.selectedImage : this.props.normalImage &#125;  </span><br><span class="line">                style=&#123; &#123; tintColor:this.props.tintColor,width:25,height:25 &#125; &#125;  </span><br><span class="line">            /&gt;  </span><br><span class="line">        )  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们定义了一个名称为【Tab】的TabNavigator的导航组件。在组件中，分为两层参数：</p><blockquote><p>（1）第一层参数定义了要切换的界面，即【首页】、【我】两个界面组件，通过screen属性指定。并且通过navigationOptions属性设置相关属性参数。</p><p>（2）设置导航栏的属性参数。</p></blockquote><p><code>TabNavigator</code>定义好之后，需要用<code>StackNavigator</code>，顾名思义，<code>StackNavigator</code>就是以栈的方式来存放整个界面的，而<code>TabNavigator</code>是作为一个界面内不同子界面之间切换。所以还需要我们定义<code>StackNavigator</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const Navigator = StackNavigator(  </span><br><span class="line">    </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attribute">Tab</span>:&#123;screen:Tab&#125;,  </span><br><span class="line">    <span class="selector-tag">Product</span>:&#123;<span class="attribute">screen</span>:ProductScreen&#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attribute">navigationOptions</span>:&#123;  </span><br><span class="line">      headerBackTitle:null,  </span><br><span class="line">      headerTintColor:<span class="string">'#333333'</span>,  </span><br><span class="line">      showIcon:true,  </span><br><span class="line">     swipeEnabled:false,  </span><br><span class="line">     animationEnabled:false,  </span><br><span class="line">    &#125;,  </span><br><span class="line">  </span><br><span class="line">    <span class="selector-tag">mode</span><span class="selector-pseudo">:'card'</span>,  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>看起来和<code>TabNavigator</code>很相似，同样是指定了两个参数：</p><blockquote><p>（1）指定要跳转的界面组件。同样是screen属性标识界面组件，不多赘述。</p><p>（2）定义跳转属性参数，即顶部导航栏的一些参数设置和跳转方式。</p></blockquote><p>可以看到，我们将<code>Tab</code>作为一个界面设置到了<code>StackNavigator</code>。这样就可以实现Tab导航和界面间跳转的效果了。</p><p>最后就是在<code>render</code>中引用<code>StackNavigator</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">  render() &#123;  </span><br><span class="line">        <span class="keyword">return</span> (  </span><br><span class="line">          &lt;Navigator /&gt;  </span><br><span class="line">        );  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StackNavigator</code>还提供了<code>onNavigationStateChange</code>回调方法，用来监听导航状态的改变。具体不再赘述。实现了界面跳转和切换，那么就该来增加下界面之间的感情了，来看看如何实现界面之间的传值和取值。</p><h3>5、界面间跳转、传值、取值</h3><p>在界面组件注入到<code>StackNavigator</code>中时，界面组件就被赋予了<code>navigation</code>属性，即在界面组件中可以通过<code>【this.props.navigation】</code>获取并进行一些操作。</p><p><code>navigation</code>属性中提供了很多的函数简化界面间操作，简单列举几点：</p><blockquote><p>（1）通过navigate函数实现界面之间跳转：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.props.navigation.navigate(&apos;Mine&apos;);</span><br></pre></td></tr></table></figure><p>参数为我们在<code>StackNavigator</code>注册界面组件时的名称。同样也可以从当前页面返回到上一页：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 返回上一页  </span><br><span class="line">this.props.navigation.goBack();</span><br></pre></td></tr></table></figure><blockquote><p>（2）跳转时传值：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.props.navigation.navigate(&apos;Mine&apos;,&#123;info:&apos;传值过去&apos;&#125;);</span><br></pre></td></tr></table></figure><p>第一个参数同样为要跳转的界面组件名称，第二个参数为要传递的参数，info可以理解为key，后面即传递的参数。</p><blockquote><p>（3）获取值：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;this.props.navigation.state.params.info&#125;</span><br></pre></td></tr></table></figure><p>通过<code>state.params</code>来获取传来的参数，后面为<code>key</code>值。此处为<code>info</code>。</p><p>以上实现完成，我们就可以愉快的玩耍啦~~ 什么？忽然发现在Android上的效果和IOS效果不一样。老板要界面一致哇~ 怎么办？那就需要我们进行简单的适配了。</p><h2 id="三、DrawerNavigator实现抽屉导航"><a href="#三、DrawerNavigator实现抽屉导航" class="headerlink" title="三、DrawerNavigator实现抽屉导航"></a>三、DrawerNavigator实现抽屉导航</h2><h3>1、导航实现</h3><p>API定义：DrawerNavigator（RouteConfigs，DrawerNavigatorConfig）</p><blockquote><p>（1）界面中定义DrawerNavigator：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import &#123;StackNavigator,TabNavigator,DrawerNavigator&#125; from 'react-navigation';  </span><br><span class="line">import HomeScreen from './pages/HomePage';  </span><br><span class="line">import MineScreen from './pages/MinePage';  </span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> <span class="selector-tag">class</span> <span class="selector-tag">Demo</span> <span class="selector-tag">extends</span> <span class="selector-tag">Component</span> &#123;  </span><br><span class="line">  </span><br><span class="line">  render() &#123;  </span><br><span class="line">        <span class="selector-tag">return</span> (  </span><br><span class="line">          &lt;Navigator /&gt;  </span><br><span class="line">        );  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">const Navigator = DrawerNavigator(&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="selector-tag">Home</span>:&#123;<span class="attribute">screen</span>:HomeScreen&#125;,  </span><br><span class="line">    <span class="selector-tag">Mine</span>:&#123;<span class="attribute">screen</span>:MineScreen&#125;,  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">const styles = StyleSheet.create(&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="selector-tag">container</span>: &#123;  </span><br><span class="line">        <span class="attribute">flex</span>: <span class="number">1</span>,  </span><br><span class="line">    &#125;,  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">AppRegistry.registerComponent('Demo', () =&gt; Demo);</span><br></pre></td></tr></table></figure><p>定义方式和<code>StackNavigator</code>基本类似，不再赘述。</p><blockquote><p>（2）HomeScreen界面和MineScreen界面：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> <span class="selector-tag">class</span> <span class="selector-tag">HomePage</span> <span class="selector-tag">extends</span> <span class="selector-tag">Component</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    static navigationOptions = &#123;  </span><br><span class="line">        drawerLabel: '首页',  </span><br><span class="line">        drawerIcon:(&#123;tintColor&#125;) =&gt; (  </span><br><span class="line">            &lt;<span class="selector-tag">Image</span>  </span><br><span class="line">                source=&#123;require('./../imgs/ic_happy.png')&#125;  </span><br><span class="line">                style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;/&gt;  </span><br><span class="line">        ),  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="selector-tag">render</span>() &#123;  </span><br><span class="line">        return(  </span><br><span class="line">            &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt;  </span><br><span class="line">                &lt;Text onPress=&#123;this._skip.bind(this)&#125;&gt;点击跳转&lt;/Text&gt;  </span><br><span class="line">            &lt;/View&gt;  </span><br><span class="line">        );  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    _<span class="selector-tag">skip</span>() &#123;  </span><br><span class="line">        this.props.navigation.navigate("Mine");  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> <span class="selector-tag">class</span> <span class="selector-tag">MinePage</span> <span class="selector-tag">extends</span> <span class="selector-tag">Component</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    static navigationOptions = &#123;  </span><br><span class="line">        drawerLabel:'我',  </span><br><span class="line">         drawerIcon: (&#123; tintColor &#125;) =&gt; (  </span><br><span class="line">            &lt;<span class="selector-tag">Image</span>  </span><br><span class="line">                source=&#123;require('./../imgs/ic_h.png')&#125;  </span><br><span class="line">                style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;  </span><br><span class="line">            /&gt;  </span><br><span class="line">        ),  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="selector-tag">render</span>() &#123;  </span><br><span class="line">        return(  </span><br><span class="line">            &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt;  </span><br><span class="line">                &lt;Text onPress=&#123;this._skip.bind(this)&#125;&gt;返回上一界面&lt;/Text&gt;  </span><br><span class="line">            &lt;/View&gt;  </span><br><span class="line">        );  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 跳转  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    _<span class="selector-tag">skip</span>() &#123;  </span><br><span class="line">        this.props.navigation.goBack();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，实现了界面之间的跳转。</p><h3>2、扩展功能</h3><blockquote><p>（1）默认DrawerView不可滚动。要实现可滚动视图，必须使用contentComponent自定义容器，如下所示：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  drawerWidth：200，  </span><br><span class="line">  抽屉位置：“对”  </span><br><span class="line">  contentComponent：props =&gt; &lt;ScrollView&gt; &lt;DrawerItems &#123;... props&#125; /&gt; &lt;/ ScrollView&gt;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（2）可以覆盖导航使用的默认组件，使用DrawerItems自定义导航组件：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;DrawerItems&#125; from &apos;react-navigation&apos;;  </span><br><span class="line">  </span><br><span class="line">const CustomDrawerContentComponent = (props) =&gt; (  </span><br><span class="line">  &lt;View style = &#123;style.container&#125;&gt;  </span><br><span class="line">    &lt;DrawerItems &#123;... props&#125; /&gt;  </span><br><span class="line">  &lt;/View&gt;    </span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>（3）嵌套抽屉导航</p></blockquote><p>如果您嵌套<code>DrawerNavigation</code>，抽屉将显示在父导航下方。</p><h2 id="五、效果图"><a href="#五、效果图" class="headerlink" title="五、效果图"></a>五、效果图</h2><p>抽屉导航：<br><img src="https://img-blog.csdn.net/20170517171824737" alt="这里写图片描述"></p><p>以上就是我们实战中常用的属性和技巧。具体的操作还需要大家在实践过程中测试体会。</p><p><a href="https://github.com/songxiaoliang/ComicApp" target="_blank" rel="noopener">源码参考</a></p></h3></h3>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/12/react-navigation-detail/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Method Swizzling 和 AOP 实践</title>
      <link>http://yoursite.com/2018/04/03/Method_Swizzling_and_AOP/</link>
      <guid>http://yoursite.com/2018/04/03/Method_Swizzling_and_AOP/</guid>
      <pubDate>Tue, 03 Apr 2018 02:45:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;转自: &lt;a href=&quot;http://tech.glowing.com/cn/method-swizzling-aop/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tech.glowing.com/cn/method-swizzling-aop/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇介绍了 &lt;a href=&quot;http://tech.glowing.com/cn/objective-c-runtime/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Objective-C Messaging&lt;/a&gt;。利用 &lt;code&gt;Objective-C&lt;/code&gt; 的 &lt;code&gt;Runtime&lt;/code&gt; 特性，我们可以给语言做扩展，帮助解决项目开发中的一些设计和技术问题。这一篇，我们来探索一些利用 &lt;code&gt;Objective-C Runtime&lt;/code&gt; 的黑色技巧。这些技巧中最具争议的或许就是 &lt;code&gt;Method Swizzling&lt;/code&gt; 。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>转自: <a href="http://tech.glowing.com/cn/method-swizzling-aop/" target="_blank" rel="noopener">http://tech.glowing.com/cn/method-swizzling-aop/</a></p><p>上一篇介绍了 <a href="http://tech.glowing.com/cn/objective-c-runtime/" target="_blank" rel="noopener">Objective-C Messaging</a>。利用 <code>Objective-C</code> 的 <code>Runtime</code> 特性，我们可以给语言做扩展，帮助解决项目开发中的一些设计和技术问题。这一篇，我们来探索一些利用 <code>Objective-C Runtime</code> 的黑色技巧。这些技巧中最具争议的或许就是 <code>Method Swizzling</code> 。</p><a id="more"></a><p>介绍一个技巧，最好的方式就是提出具体的需求，然后用它跟其他的解决方法做比较。</p><p>所以，先来看看我们的需求：对 <code>App</code> 的用户行为进行追踪和分析。简单说，就是当用户看到某个 <code>View</code> 或者点击某个 <code>Button</code> 的时候，就把这个事件记下来。</p><h2 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h2><p>最直接粗暴的方式就是在每个 <code>viewDidAppear</code> 里添加记录事件的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@implementation MyViewController ()</span><br><span class="line"></span><br><span class="line">- (void)viewDidAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidAppear:animated];</span><br><span class="line"></span><br><span class="line">    // Custom code </span><br><span class="line"></span><br><span class="line">    // Logging</span><br><span class="line">    [Logging logWithEventName:@“my view did appear”];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)myButtonClicked:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">    // Custom code </span><br><span class="line"></span><br><span class="line">    // Logging</span><br><span class="line">    [Logging logWithEventName:@“my button clicked”];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的缺点也很明显：它破坏了代码的干净整洁。因为 <code>Logging</code> 的代码本身并不属于 <code>ViewController</code> 里的主要逻辑。随着项目扩大、代码量增加，你的 <code>ViewController</code> 里会到处散布着 <code>Logging</code> 的代码。这时，要找到一段事件记录的代码会变得困难，也很容易忘记添加事件记录的代码。</p><p>你可能会想到用继承或类别，在重写的方法里添加事件记录的代码。代码可以是长的这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController ()</span><br><span class="line"></span><br><span class="line">- (void)myViewDidAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidAppear:animated];</span><br><span class="line"></span><br><span class="line">    // Custom code </span><br><span class="line"></span><br><span class="line">    // Logging</span><br><span class="line">    [Logging logWithEventName:NSStringFromClass([self class])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)myButtonClicked:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">    // Custom code </span><br><span class="line"></span><br><span class="line">    // Logging</span><br><span class="line">    NSString *name = [NSString stringWithFormat:@“my button in %@ is clicked”, NSStringFromClass([self class])];</span><br><span class="line">    [Logging logWithEventName:name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Logging</code>的代码都很相似，通过继承或类别重写相关方法是可以把它从主要逻辑中剥离出来。但同时也带来新的问题：</p><ol><li>你需要继承 <code>UIViewController</code>, <code>UITableViewController</code>,<br><code>UICollectionViewController</code> 所有这些 <code>ViewController</code> ，或者给他们添加类别；</li><li>每个 <code>ViewController</code> 里的 <code>ButtonClick</code> 方法命名不可能都一样；</li><li>你不能控制别人如何去实例化你的子类；</li><li>对于类别，你没办法调用到原来的方法实现。大多时候，我们重写一个方法只是为了添加一些代码，而不是完全取代它。</li><li>如果有两个类别都实现了相同的方法，运行时没法保证哪一个类别的方法会给调用。</li></ol><h2 id="Method-Swizzling"><a href="#Method-Swizzling" class="headerlink" title="Method Swizzling"></a>Method Swizzling</h2><p><code>Method Swizzling</code> 利用 <code>Runtime</code> 特性把一个方法的实现与另一个方法的实现进行替换。</p><p>上一篇文章 有讲到每个类里都有一个 <code>Dispatch Table</code> ，将方法的名字（<code>SEL</code>）跟方法的实现（<code>IMP</code>，指向 C 函数的指针）一一对应。<code>Swizzle</code> 一个方法其实就是在程序运行时在 <code>Dispatch Table</code> 里做点改动，让这个方法的名字（<code>SEL</code>）对应到另个<code>IMP</code> 。</p><p>首先定义一个类别，添加将要 Swizzled 的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController (Logging)</span><br><span class="line"></span><br><span class="line">- (void)swizzled_viewDidAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    // call original implementation</span><br><span class="line">    [self swizzled_viewDidAppear:animated];</span><br><span class="line"></span><br><span class="line">    // Logging</span><br><span class="line">    [Logging logWithEventName:NSStringFromClass([self class])];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码看起来可能有点奇怪，像递归不是么。当然不会是递归，因为在 <code>runtime</code> 的时候，函数实现已经被交换了。调用 <code>viewDidAppear:</code> 会调用你实现的 <code>swizzled_viewDidAppear:</code>，而在 <code>swizzled_viewDidAppear:</code> 里调用 <code>swizzled_viewDidAppear:</code> 实际上调用的是原来的 <code>viewDidAppear:</code> 。</p><p>接下来实现 <code>swizzle</code> 的方法 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController (Logging)</span><br><span class="line"></span><br><span class="line">void swizzleMethod(Class class, SEL originalSelector, SEL swizzledSelector)  </span><br><span class="line">&#123;</span><br><span class="line">    // the method might not exist in the class, but in its superclass</span><br><span class="line">    Method originalMethod = class_getInstanceMethod(class, originalSelector);</span><br><span class="line">    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</span><br><span class="line"></span><br><span class="line">    // class_addMethod will fail if original method already exists</span><br><span class="line">    BOOL didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class="line"></span><br><span class="line">    // the method doesn’t exist and we just added one</span><br><span class="line">    if (didAddMethod) &#123;</span><br><span class="line">        class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里唯一可能需要解释的是 <code>class_addMethod</code> 。要先尝试添加原 <code>selector</code> 是为了做一层保护，因为如果这个类没有实现 <code>originalSelector</code> ，但其父类实现了，那 <code>class_getInstanceMethod</code> 会返回父类的方法。这样 <code>method_exchangeImplementations</code> 替换的是父类的那个方法，这当然不是你想要的。所以我们先尝试添加 <code>orginalSelector</code> ，如果已经存在，再用 <code>method_exchangeImplementations</code> 把原方法的实现跟新的方法实现给交换掉。</p><p>最后，我们只需要确保在程序启动的时候调用 <code>swizzleMethod</code> 方法。比如，我们可以在之前 <code>UIViewController</code> 的 <code>Logging</code> 类别里添加 <code>+load:</code> 方法，然后在 <code>+load:</code> 里把 <code>viewDidAppear</code> 给替换掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController (Logging)</span><br><span class="line"></span><br><span class="line">+ (void)load</span><br><span class="line">&#123;</span><br><span class="line">    swizzleMethod([self class], @selector(viewDidAppear:), @selector(swizzled_viewDidAppear:));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下，类别里的方法会重写掉主类里相同命名的方法。如果有两个类别实现了相同命名的方法，只有一个方法会被调用。但 <code>+load:</code> 是个特例，当一个类被读到内存的时候， <code>runtime</code> 会给这个类及它的每一个类别都发送一个 <code>+load:</code> 消息。</p><p>其实，这里还可以更简化点：直接用新的 <code>IMP</code>取代原 <code>IMP</code> ，而不是替换。只需要有全局的函数指针指向原<code>IMP</code> 就可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void (gOriginalViewDidAppear)(id, SEL, BOOL);</span><br><span class="line"></span><br><span class="line">void newViewDidAppear(UIViewController *self, SEL _cmd, BOOL animated)  </span><br><span class="line">&#123;</span><br><span class="line">    // call original implementation</span><br><span class="line">    gOriginalViewDidAppear(self, _cmd, animated);</span><br><span class="line"></span><br><span class="line">    // Logging</span><br><span class="line">    [Logging logWithEventName:NSStringFromClass([self class])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)load</span><br><span class="line">&#123;</span><br><span class="line">    Method originalMethod = class_getInstanceMethod(self, @selector(viewDidAppear:));</span><br><span class="line">    gOriginalViewDidAppear = (void *)method_getImplementation(originalMethod);</span><br><span class="line"></span><br><span class="line">    if(!class_addMethod(self, @selector(viewDidAppear:), (IMP) newViewDidAppear, method_getTypeEncoding(originalMethod))) &#123;</span><br><span class="line">        method_setImplementation(originalMethod, (IMP) newViewDidAppear);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>Method Swizzling</code> ，我们成功把逻辑代码跟处理事件记录的代码解耦。当然除了 <code>Logging</code> ，还有很多类似的事务，如 <code>Authentication</code> 和 <code>Caching</code>。这些事务琐碎，跟主要业务逻辑无关，在很多地方都有，又很难抽象出来单独的模块。这种程序设计问题，业界也给了他们一个名字 - <a href="https://en.wikipedia.org/wiki/Cross-cutting_concern" target="_blank" rel="noopener">Cross Cutting Concerns</a>。</p><p>而像上面例子用 <code>Method Swizzling</code> 动态给指定的方法添加代码，以解决 <code>Cross Cutting Concerns</code> 的编程方式叫：<a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" target="_blank" rel="noopener">Aspect Oriented Programming</a></p><h2 id="Aspect-Oriented-Programming-（面向切面编程）"><a href="#Aspect-Oriented-Programming-（面向切面编程）" class="headerlink" title="Aspect Oriented Programming （面向切面编程）"></a>Aspect Oriented Programming （面向切面编程）</h2><p>Wikipedia 里对 AOP 是这么介绍的:</p><blockquote><p>An aspect can alter the behavior of the base code by applying advice<br>(additional behavior) at various join points (points in a program)<br>specified in a quantification or query called a pointcut (that detects<br>whether a given join point matches).</p></blockquote><p>在 <code>Objective-C</code> 的世界里，这句话意思就是利用 <code>Runtime</code> 特性给指定的方法添加自定义代码。有很多方式可以实现 <code>AOP</code> ，<code>Method Swizzling</code> 就是其中之一。而且幸运的是，目前已经有一些第三方库可以让你不需要了解 <code>Runtime</code> ，就能直接开始使用 <code>AOP</code> 。</p><p><code>Aspects</code> 就是一个不错的 <code>AOP</code> 库，封装了 <code>Runtime</code> ， <code>Method Swizzling</code> 这些黑色技巧，只提供两个简单的API：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span><br><span class="line">                          withOptions:(AspectOptions)options</span><br><span class="line">                       usingBlock:(id)block</span><br><span class="line">                            error:(NSError **)error;</span><br><span class="line">- (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span><br><span class="line">                      withOptions:(AspectOptions)options</span><br><span class="line">                       usingBlock:(id)block</span><br><span class="line">                            error:(NSError **)error;</span><br></pre></td></tr></table></figure><p>使用 <code>Aspects</code> 提供的<code>API</code>，我们之前的例子会进化成这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController (Logging)</span><br><span class="line"></span><br><span class="line">+ (void)load</span><br><span class="line">&#123;</span><br><span class="line">    [UIViewController aspect_hookSelector:@selector(viewDidAppear:)</span><br><span class="line">                              withOptions:AspectPositionAfter</span><br><span class="line">                               usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">        NSString *className = NSStringFromClass([[aspectInfo instance] class]);</span><br><span class="line">        [Logging logWithEventName:className];</span><br><span class="line">                               &#125; error:NULL];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以用同样的方式在任何你感兴趣的方法里添加自定义代码，比如 <code>IBAction</code> 的方法里。更好的方式，你提供一个 <code>Logging</code> 的配置文件作为唯一处理事件记录的地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@implementation AppDelegate (Logging)</span><br><span class="line"></span><br><span class="line">+ (void)setupLogging</span><br><span class="line">&#123;</span><br><span class="line">    NSDictionary *config = @&#123;</span><br><span class="line">        @&quot;MainViewController&quot;: @&#123;</span><br><span class="line">            GLLoggingPageImpression: @&quot;page imp - main page&quot;,</span><br><span class="line">            GLLoggingTrackedEvents: @[</span><br><span class="line">                @&#123;</span><br><span class="line">                    GLLoggingEventName: @&quot;button one clicked&quot;,</span><br><span class="line">                    GLLoggingEventSelectorName: @&quot;buttonOneClicked:&quot;,</span><br><span class="line">                    GLLoggingEventHandlerBlock: ^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                        [Logging logWithEventName:@&quot;button one clicked&quot;];</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                @&#123;</span><br><span class="line">                    GLLoggingEventName: @&quot;button two clicked&quot;,</span><br><span class="line">                    GLLoggingEventSelectorName: @&quot;buttonTwoClicked:&quot;,</span><br><span class="line">                    GLLoggingEventHandlerBlock: ^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                        [Logging logWithEventName:@&quot;button two clicked&quot;];</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">           ],</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        @&quot;DetailViewController&quot;: @&#123;</span><br><span class="line">            GLLoggingPageImpression: @&quot;page imp - detail page&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    [AppDelegate setupWithConfiguration:config];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)setupWithConfiguration:(NSDictionary *)configs</span><br><span class="line">&#123;</span><br><span class="line">    // Hook Page Impression</span><br><span class="line">    [UIViewController aspect_hookSelector:@selector(viewDidAppear:)</span><br><span class="line">                              withOptions:AspectPositionAfter</span><br><span class="line">                               usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                                       NSString *className = NSStringFromClass([[aspectInfo instance] class]);</span><br><span class="line">                                    [Logging logWithEventName:className];</span><br><span class="line">                               &#125; error:NULL];</span><br><span class="line"></span><br><span class="line">    // Hook Events</span><br><span class="line">    for (NSString *className in configs) &#123;</span><br><span class="line">        Class clazz = NSClassFromString(className);</span><br><span class="line">        NSDictionary *config = configs[className];</span><br><span class="line"></span><br><span class="line">        if (config[GLLoggingTrackedEvents]) &#123;</span><br><span class="line">            for (NSDictionary *event in config[GLLoggingTrackedEvents]) &#123;</span><br><span class="line">                SEL selekor = NSSelectorFromString(event[GLLoggingEventSelectorName]);</span><br><span class="line">                AspectHandlerBlock block = event[GLLoggingEventHandlerBlock];</span><br><span class="line"></span><br><span class="line">                [clazz aspect_hookSelector:selekor</span><br><span class="line">                               withOptions:AspectPositionAfter</span><br><span class="line">                                usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class="line">                                    block(aspectInfo);</span><br><span class="line">                                &#125; error:NULL];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>-application:didFinishLaunchingWithOptions:</code> 里调用 <code>setupLogging：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    // Override point for customization after application launch.</span><br><span class="line"></span><br><span class="line">    [self setupLogging];</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>利用 <code>objective-C Runtime</code> 特性和 <code>Aspect Oriented Programming</code> ，我们可以把琐碎事务的逻辑从主逻辑中分离出来，作为单独的模块。它是对面向对象编程模式的一个补充。<code>Logging</code> 是个经典的应用，这里做个抛砖引玉，发挥想象力，可以做出其他有趣的应用。</p><p>使用 <code>Aspects</code> 完整的例子可以从这里获得：<a href="https://github.com/okcomp/AspectsDemo" target="_blank" rel="noopener">AspectsDemo</a>。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/03/Method_Swizzling_and_AOP/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android 之简易涂鸦板</title>
      <link>http://yoursite.com/2017/06/08/android-canvas/</link>
      <guid>http://yoursite.com/2017/06/08/android-canvas/</guid>
      <pubDate>Thu, 08 Jun 2017 03:56:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;没有废话，简单粗暴。&lt;/p&gt;
&lt;h2 id=&quot;1-创建一个自定义-view&quot;&gt;&lt;a href=&quot;#1-创建一个自定义-view&quot; class=&quot;headerlink&quot; title=&quot;1.创建一个自定义 view&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.创建一个自定义 view&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;创建一个 DrawView，继承自 android.view.View 类。在这个类中，先定义所需的属性，再创建一个构造方法。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>没有废话，简单粗暴。</p><h2 id="1-创建一个自定义-view"><a href="#1-创建一个自定义-view" class="headerlink" title="1.创建一个自定义 view"></a><strong>1.创建一个自定义 view</strong></h2><p>创建一个 DrawView，继承自 android.view.View 类。在这个类中，先定义所需的属性，再创建一个构造方法。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class DrawView extends View &#123;</span><br><span class="line"></span><br><span class="line">    private int view_width = 0;//画板宽度</span><br><span class="line">    private int view_height = 0;//画板高度</span><br><span class="line">    private float preX;//起始点的 x 坐标</span><br><span class="line">    private float preY;//起始点的 y 坐标</span><br><span class="line">    private Path path;//路径</span><br><span class="line">    public Paint paint = null;//画笔</span><br><span class="line">    Bitmap cacheBitmap = null;//定义一个内存中的图片，该图片作为缓冲区</span><br><span class="line">    Canvas cacheCanvas = null;//定义 cacheBitmap 上的 Canvas 对象</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    /*构造方法*/</span><br><span class="line">    public DrawView(Context context, AttributeSet set)&#123;</span><br><span class="line">        super(context,set);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*重写 onDraw 方法*/</span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-修改-xml-文件"><a href="#2-修改-xml-文件" class="headerlink" title="2.修改 xml 文件"></a><strong>2.修改 xml 文件</strong></h2><p>修改 activity_main.xml 文件，并将自定义的 DrawView 添加到布局管理器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">    android:layout_height=&quot;fill_parent&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.example.test.DrawView</span><br><span class="line">        android:id=&quot;@+id/drawView1&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="3-DrawView-的构造方法"><a href="#3-DrawView-的构造方法" class="headerlink" title="3.DrawView 的构造方法"></a><strong>3.DrawView 的构造方法</strong></h2><p>在 DrawView 的构造方法中，首先获取屏幕的宽度和高度，并创建一个与该 view 相同大小的缓存区，然后创建一个新的画面，并实例化一个路径，再讲内存中的位图绘制到 cacheCanvas 中，最后实例化一个画笔，并设置画笔的相关属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//获取屏幕宽度</span><br><span class="line">        view_width = context.getResources().getDisplayMetrics().widthPixels;</span><br><span class="line">        //获取屏幕高度</span><br><span class="line">        view_height = context.getResources().getDisplayMetrics().heightPixels;</span><br><span class="line"></span><br><span class="line">        cacheBitmap = Bitmap.createBitmap(view_width,view_height, Bitmap.Config.ARGB_8888);</span><br><span class="line">        //创建一个新的画布</span><br><span class="line">        cacheCanvas = new Canvas();</span><br><span class="line">        path = new Path();</span><br><span class="line">        //在 cacheCanvas 上绘制 cacheBitmap</span><br><span class="line">        cacheCanvas.setBitmap(cacheBitmap);</span><br><span class="line"></span><br><span class="line">        paint = new Paint(Paint.DITHER_FLAG);</span><br><span class="line">        //设置默认的画笔颜色</span><br><span class="line">        paint.setColor(Color.RED);</span><br><span class="line"></span><br><span class="line">        //设置填充方式为描边</span><br><span class="line">        paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        //设置笔刷的图形样式</span><br><span class="line">        paint.setStrokeJoin(Paint.Join.ROUND);</span><br><span class="line">        //设置画笔转弯处的连接风格</span><br><span class="line">        paint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class="line">        //设置默认的画笔的宽度</span><br><span class="line">        paint.setStrokeWidth(1);</span><br><span class="line">        //使用抗锯齿功能</span><br><span class="line">        paint.setAntiAlias(true);</span><br><span class="line">        //使用抖动效果</span><br><span class="line">        paint.setDither(true);</span><br></pre></td></tr></table></figure><h2 id="4-重写-onDraw-方法"><a href="#4-重写-onDraw-方法" class="headerlink" title="4.重写 onDraw 方法"></a><strong>4.重写 onDraw 方法</strong></h2><p>在 DrawView 的 onDraw 方法中，设置背景颜色，绘制 cacheBitmap，绘制路径以及保存当前的状态到栈中，并调用 restore()方法恢复所保存的状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//设置背景颜色</span><br><span class="line">        canvas.drawColor(0xFFFFFFFF);</span><br><span class="line">        //采用默认设置创建一个画笔</span><br><span class="line">        Paint bmpPaint = new Paint();</span><br><span class="line"></span><br><span class="line">        //绘制cacheBitmap</span><br><span class="line">        canvas.drawBitmap(cacheBitmap,0,0,bmpPaint);</span><br><span class="line">        //绘制路径</span><br><span class="line">        canvas.drawPath(path,paint);</span><br><span class="line">        //保存 canvas 状态</span><br><span class="line">        canvas.save(Canvas.ALL_SAVE_FLAG);</span><br><span class="line">        //恢复 canvas 之前的保存状态，防止保存后对 canvas 执行的操作最后续的绘制有影响</span><br><span class="line">        canvas.restore();</span><br></pre></td></tr></table></figure><h2 id="5-重写-onTouchEvent-方法"><a href="#5-重写-onTouchEvent-方法" class="headerlink" title="5.重写 onTouchEvent 方法"></a><strong>5.重写 onTouchEvent 方法</strong></h2><p>在 DrawView 类中，重写onTouchEvent() 方法，为该视图添加触摸时间监听器，在该方法中，首先获取触摸时间发生的位置，然后应用 switch 对时间的不同状态添加响应代码，最后调用invalidate()方法更新视图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line"></span><br><span class="line">        //获取触摸时间发生的位置</span><br><span class="line">        float x = event.getX();</span><br><span class="line">        float y = event.getY();</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line"></span><br><span class="line">            case MotionEvent.ACTION_DOWN:</span><br><span class="line"></span><br><span class="line">                //将绘图的起始点移到（x，y）的坐标位置</span><br><span class="line">                path.moveTo(x,y);</span><br><span class="line">                preX = x;</span><br><span class="line">                preY = y;</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_MOVE:</span><br><span class="line">                float dx = Math.abs(x-preX);</span><br><span class="line">                float dy = Math.abs(y-preY);</span><br><span class="line"></span><br><span class="line">                //判断是否在允许的范围内</span><br><span class="line">                if (dx&gt;=5 || dy &gt;= 5)&#123;</span><br><span class="line">                    path.quadTo(preX,preY,(x+preX)/2,(y+preY)/2);</span><br><span class="line">                    preX = x;</span><br><span class="line">                    preY = y;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_UP:</span><br><span class="line">                //绘制路径</span><br><span class="line">                cacheCanvas.drawPath(path,paint);</span><br><span class="line">                path.reset();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        invalidate();</span><br><span class="line"></span><br><span class="line">        //返回 true，表示处理方法已经处理该事件</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-编写-clear-方法"><a href="#6-编写-clear-方法" class="headerlink" title="6.编写 clear() 方法"></a><strong>6.编写 clear() 方法</strong></h2><p>写一个 clear() 方法，用来实现橡皮擦功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void clear() &#123;</span><br><span class="line"></span><br><span class="line">       //设置图形重叠时的处理方式</span><br><span class="line">       paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));</span><br><span class="line">       //设置橡皮擦的宽度</span><br><span class="line">       paint.setStrokeWidth(50);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="7-编写-save-方法"><a href="#7-编写-save-方法" class="headerlink" title="7.编写 save() 方法"></a><strong>7.编写 save() 方法</strong></h2><p>写一个方法，用来保存当前的绘图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void save() &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            saveBitmap(&quot;myPicture&quot;);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private void saveBitmap(String filename) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        //创建文件对象</span><br><span class="line">        File file = new File(&quot;/sdcard/pictures/&quot;+filename+&quot;.png&quot;);</span><br><span class="line">        //创建一个新文件</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        //创建一个文件输出流对象</span><br><span class="line">        FileOutputStream out = new FileOutputStream(file);</span><br><span class="line">        //将绘图内容压缩成 PNG 格式输出到输出流对象中</span><br><span class="line">        cacheBitmap.compress(Bitmap.CompressFormat.PNG,100,out);</span><br><span class="line">        //将缓冲区的数据全部写出到输出流中</span><br><span class="line">        out.flush();</span><br><span class="line">        //关闭文件输出流对象</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="8-设置权限"><a href="#8-设置权限" class="headerlink" title="8.设置权限"></a><strong>8.设置权限</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;</span><br><span class="line">   &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="9-创建-menu-资源文件"><a href="#9-创建-menu-资源文件" class="headerlink" title="9.创建 menu 资源文件"></a><strong>9.创建 menu 资源文件</strong></h2><p>在 res 目录下，创建menu 文件夹，在 menu 文件夹下，创建 toolsmenu.xml 资源文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;</span><br><span class="line">    &lt;item android:title=&quot;@string/color&quot;&gt;</span><br><span class="line">        &lt;menu &gt;</span><br><span class="line">            &lt;!-- 定义一组单选菜单项 --&gt;</span><br><span class="line">            &lt;group android:checkableBehavior=&quot;single&quot; &gt;</span><br><span class="line">                &lt;!-- 定义子菜单 --&gt;</span><br><span class="line">                &lt;item android:id=&quot;@+id/red&quot; android:title=&quot;@string/color_red&quot;/&gt;</span><br><span class="line">                &lt;item android:id=&quot;@+id/green&quot; android:title=&quot;@string/color_green&quot;/&gt;</span><br><span class="line">                &lt;item android:id=&quot;@+id/blue&quot; android:title=&quot;@string/color_blue&quot;/&gt;</span><br><span class="line">            &lt;/group&gt;</span><br><span class="line">        &lt;/menu&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">    &lt;item android:title=&quot;@string/width&quot;&gt;</span><br><span class="line">        &lt;menu &gt;</span><br><span class="line">            &lt;!-- 定义子菜单 --&gt;</span><br><span class="line">            &lt;group&gt;</span><br><span class="line">                &lt;item android:id=&quot;@+id/width_1&quot; android:title=&quot;@string/width_1&quot;/&gt;</span><br><span class="line">                &lt;item android:id=&quot;@+id/width_2&quot; android:title=&quot;@string/width_2&quot;/&gt;</span><br><span class="line">                &lt;item android:id=&quot;@+id/width_3&quot; android:title=&quot;@string/width_3&quot;/&gt;</span><br><span class="line">            &lt;/group&gt;</span><br><span class="line">        &lt;/menu&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">    &lt;item android:id=&quot;@+id/clear&quot; android:title=&quot;@string/clear&quot;/&gt;</span><br><span class="line">    &lt;item android:id=&quot;@+id/save&quot; android:title=&quot;@string/save&quot;/&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure><h2 id="10-添加选项菜单"><a href="#10-添加选项菜单" class="headerlink" title="10.添加选项菜单"></a><strong>10.添加选项菜单</strong></h2><h3 id="重写onCreateOptionsMenu方法"><a href="#重写onCreateOptionsMenu方法" class="headerlink" title="重写onCreateOptionsMenu方法"></a><strong><1>重写onCreateOptionsMenu方法</1></strong></h3><p>在 activity 文件中，重写onCreateOptionsMenu()方法，在该方法中，实例化一个MenuInflater对象，并解析菜单资源文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">        MenuInflater menuInflater = new MenuInflater(this);</span><br><span class="line">        menuInflater.inflate(R.menu.toolsmenu,menu);</span><br><span class="line">        return super.onCreateOptionsMenu(menu);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="重写onOptionsItemSelected方法"><a href="#重写onOptionsItemSelected方法" class="headerlink" title="重写onOptionsItemSelected方法"></a><strong><2>重写onOptionsItemSelected方法</2></strong></h3><p>重写onOptionsItemSelected() 方法，分别对各个菜单项被选择时做出相应的处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class="line"></span><br><span class="line">        //获取自定义视图</span><br><span class="line">        DrawView drawView = (DrawView)findViewById(R.id.drawView1);</span><br><span class="line">        //取消擦除效果</span><br><span class="line">        drawView.paint.setXfermode(null);</span><br><span class="line">        //初始化画笔的宽度</span><br><span class="line">        drawView.paint.setStrokeWidth(1);</span><br><span class="line"></span><br><span class="line">        switch (item.getItemId())&#123;</span><br><span class="line"></span><br><span class="line">            //设置画笔的颜色为红色</span><br><span class="line">            case R.id.red:</span><br><span class="line">                drawView.paint.setColor(Color.RED);</span><br><span class="line">                item.setChecked(true);</span><br><span class="line">                break;</span><br><span class="line">            //设置画笔的颜色为绿色</span><br><span class="line">            case R.id.green:</span><br><span class="line">                drawView.paint.setColor(Color.GREEN);</span><br><span class="line">                item.setChecked(true);</span><br><span class="line">                break;</span><br><span class="line">            //设置画笔的颜色为蓝色</span><br><span class="line">            case R.id.blue:</span><br><span class="line">                drawView.paint.setColor(Color.BLUE);</span><br><span class="line">                item.setChecked(true);</span><br><span class="line">                break;</span><br><span class="line">            //设置画笔的宽度为1</span><br><span class="line">            case R.id.width_1:</span><br><span class="line">                drawView.paint.setStrokeWidth(1);</span><br><span class="line">                break;</span><br><span class="line">            //设置画笔的宽度为5</span><br><span class="line">            case R.id.width_2:</span><br><span class="line">                drawView.paint.setStrokeWidth(5);</span><br><span class="line">                break;</span><br><span class="line">            //设置画笔的宽度为10</span><br><span class="line">            case R.id.width_3:</span><br><span class="line">                drawView.paint.setStrokeWidth(10);</span><br><span class="line">                break;</span><br><span class="line">            //擦除绘画</span><br><span class="line">            case R.id.clear:</span><br><span class="line">                drawView.clear();</span><br><span class="line">                break;</span><br><span class="line">            //保存绘画</span><br><span class="line">            case R.id.save:</span><br><span class="line">                drawView.save();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行，就会得到一个简易的涂鸦板，可以改变画笔颜色，画笔宽度，擦除，保存等。</p><p>真是越来越有意思了呢！</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/06/08/android-canvas/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://yoursite.com/2017/06/07/hello-world/</link>
      <guid>http://yoursite.com/2017/06/07/hello-world/</guid>
      <pubDate>Wed, 07 Jun 2017 13:00:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/06/07/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android 自定义 item 的 ListView</title>
      <link>http://yoursite.com/2017/06/05/android-listView/</link>
      <guid>http://yoursite.com/2017/06/05/android-listView/</guid>
      <pubDate>Mon, 05 Jun 2017 08:34:46 GMT</pubDate>
      <description>
      
        &lt;p&gt; 从 iOS 的 TableView 突然转到 Android 的 ListView， 说实话，很恶心。各种不方便，不要问我为什么学 Android，我也不想，唉，牢骚归牢骚，既然学了，就得学到点什么，不然既浪费时间，又什么都没得到,太亏了。记录一下学习的历程。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p> 从 iOS 的 TableView 突然转到 Android 的 ListView， 说实话，很恶心。各种不方便，不要问我为什么学 Android，我也不想，唉，牢骚归牢骚，既然学了，就得学到点什么，不然既浪费时间，又什么都没得到,太亏了。记录一下学习的历程。</p><a id="more"></a><p>在使用 ListView 的时候，大部分我们都会自定义 item，iOS 也一样，会自定义 cell。不然使用系统为我们提供的几种格式是满足不了我们的各式各样的需求的。</p><p>废话到此为止。</p><h2 id="1-先在-xml-文件中布局："><a href="#1-先在-xml-文件中布局：" class="headerlink" title="1.先在 xml 文件中布局："></a><strong>1.先在 xml 文件中布局：</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:id=&quot;@+id/main_listView&quot;</span><br><span class="line">        android:layout_alignParentTop=&quot;true&quot;</span><br><span class="line">        android:layout_alignParentLeft=&quot;true&quot;</span><br><span class="line">        android:layout_alignParentStart=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="2-创建模型文件"><a href="#2-创建模型文件" class="headerlink" title="2.创建模型文件"></a><strong>2.创建模型文件</strong></h2><p>相当于 iOS 中的 model 文件，每写一个东西，就得去 iOS 中找对应的东西，这属于思维固化了。慢慢改正，不过这样能方便快速的理解这些东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Teacher &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int imageID;</span><br><span class="line"></span><br><span class="line">    //setter和getter方法</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getImageID() &#123;</span><br><span class="line">        return imageID;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setImageID(int imageID) &#123;</span><br><span class="line">        this.imageID = imageID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比较而言，Android 的模型文件真的很麻烦，定义一个属性，就得写它的 getter 和 setter 方法。也许有其他的办法，只是我还不知道。</p><h2 id="3-创建Adapter"><a href="#3-创建Adapter" class="headerlink" title="3.创建Adapter"></a><strong>3.创建Adapter</strong></h2><p>这个适配器，在我的理解中就相当于 iOS 中的自定义 cell 了，比 iOS 方便的是，iOS 的那些数据源方法都在这里实现。一般的话，自定义的 adapter 会继承于 <code>BaseAdapter</code>。</p><h3 id="1-实现数据源方法"><a href="#1-实现数据源方法" class="headerlink" title="1.实现数据源方法"></a><strong>1.实现数据源方法</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public int getCount() &#123;</span><br><span class="line">  //返回多少行数据</span><br><span class="line">       return mList.size();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public Object getItem(int position) &#123;</span><br><span class="line">   //获取每一行的数据</span><br><span class="line">       return mList.get(position);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public long getItemId(int position) &#123;</span><br><span class="line">   //获取行号</span><br><span class="line">       return position;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public View getView(final int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line"></span><br><span class="line">//UI 刷新的代码主要在这里实现</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建一个构造方法"><a href="#2-创建一个构造方法" class="headerlink" title="2.创建一个构造方法"></a><strong>2.创建一个构造方法</strong></h3><p>这里是举例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public TeacherAdapter(ArrayList&lt;Teacher&gt; mList, Context mContext) &#123;</span><br><span class="line">        this.mList = mList;</span><br><span class="line">        this.mContext = mContext;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-给-item-布局"><a href="#4-给-item-布局" class="headerlink" title="4.给 item 布局"></a><strong>4.给 item 布局</strong></h2><p>创建一个 item 的 xml 文件，每一个 item 的布局都在这个文件中进行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">       android:layout_width=&quot;50dp&quot;</span><br><span class="line">       android:layout_height=&quot;50dp&quot;</span><br><span class="line">       android:id=&quot;@+id/item_imageView&quot;</span><br><span class="line">       android:layout_marginTop=&quot;5dp&quot;</span><br><span class="line">       android:layout_marginLeft=&quot;10dp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;TextView</span><br><span class="line">       android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">       android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">       android:id=&quot;@+id/item_textView&quot;</span><br><span class="line">       android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">       android:layout_gravity=&quot;center_vertical&quot;/&gt;</span><br></pre></td></tr></table></figure><p>这里我给每个 item 上定义了两个控件，一个 TextView，一个 ImageView。是线性布局。</p><h2 id="5-给控件赋值"><a href="#5-给控件赋值" class="headerlink" title="5.给控件赋值"></a><strong>5.给控件赋值</strong></h2><p>接下来再回到 adapter 文件中的 getView 方法中，在这个方法中为控件赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public View getView(final int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line"></span><br><span class="line">//UI 刷新的代码主要在这里实现</span><br><span class="line">//获取老师的数据</span><br><span class="line">       final Teacher teacher = mlist.get(position);</span><br><span class="line"></span><br><span class="line">       //根据layout文件创建布局</span><br><span class="line">       View oneTeacherView = LayoutInflater.from(mContext).inflate(R.layout.teacher_item,parent,false);</span><br><span class="line"></span><br><span class="line">       //获取ImageView和TextView</span><br><span class="line">       ImageView imageView = (ImageView) oneTeacherView.findViewById(R.id.item_imageView);</span><br><span class="line">       TextView textView = (TextView) oneTeacherView.findViewById(R.id.item_textView);</span><br><span class="line"></span><br><span class="line">//根据数据分别为imageView和textView赋值       imageView.setImageResource(teacher.getImageID());</span><br><span class="line">       textView.setText(teacher.getName());</span><br><span class="line"></span><br><span class="line">return oneTeacherView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-设置数据源"><a href="#6-设置数据源" class="headerlink" title="6.设置数据源"></a><strong>6.设置数据源</strong></h2><p>接下来回到 Activity 文件中，获取 listView 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//因为这里是本地数据，所以将 listView 设置为了局部变量，本地数据也不需要在开启线程去刷新UI</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Teacher&gt; teacherList = new ArrayList&lt;Teacher&gt;();</span><br><span class="line"></span><br><span class="line">Teacher teacher = new Teacher()；</span><br><span class="line">teacher.setName(&quot;jack&quot;);</span><br><span class="line">teacher.setImageID(R.mipmap.header_image);</span><br><span class="line"></span><br><span class="line">teacherList.add(teacher);</span><br><span class="line"></span><br><span class="line">//我这里只添加了一条数据，如果像添加的话，添加进这个数组就行</span><br><span class="line">ListView listView = (ListView)findViewById(R.id.main_listView);</span><br><span class="line"></span><br><span class="line">TeacherAdapter adapter = new TeacherAdapter(teacherList,this);</span><br><span class="line"></span><br><span class="line">listView.setAdapter(adapter);</span><br></pre></td></tr></table></figure><p>到这里，一个完整的自定义 item 的 ListView 算是完成了。但是在实际开发中，大部分的应用场景都是从网络端获取数据，然后给 ListView 赋值。这个等我学到网络的时候再来介绍一下。</p><p>如有不对之处，请多多指正！达者为师，谢谢！</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/06/05/android-listView/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
